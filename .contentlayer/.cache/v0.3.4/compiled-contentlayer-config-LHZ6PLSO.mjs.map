{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files'\n\nexport const BlogPost = defineDocumentType(() => ({\n  name: 'BlogPost',\n  filePathPattern: `blog/**/*.md`,\n  contentType: 'markdown',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    author: { type: 'string', required: true },\n    tags: { type: 'list', of: { type: 'string' } },\n    category: { type: 'string', required: true },\n    excerpt: { type: 'string', required: true },\n    imageUrl: { type: 'string', required: true },\n    dataAiHint: { type: 'string' },\n    seriesId: { type: 'string' },\n    seriesOrder: { type: 'number' },\n    featured: { type: 'boolean', default: false },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (doc) => `/blog/${doc._raw.flattenedPath.replace(/^blog\\/?/, '')}`,\n    },\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^blog\\/?/, ''),\n    },\n    id: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^blog\\/?/, ''),\n    }\n  },\n}))\n\nexport const PythonTutorial = defineDocumentType(() => ({\n  name: \"PythonTutorial\",\n  filePathPattern: `tutorials/python/*.md`, \n  contentType: \"markdown\",\n  fields: {\n    title: { type: \"string\", required: true },\n    slug: { type: \"string\", required: true }, \n    order: { type: \"number\", required: true }, \n    description: { type: \"string\", required: false }, \n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (doc) => `/tutorial/python/${doc.slug}`,\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [BlogPost, PythonTutorial],\n})\n"],
  "mappings": ";AACA,SAAS,oBAAoB,kBAAkB;AAExC,IAAM,WAAW,mBAAmB,OAAO;AAAA,EAChD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAC7C,UAAU,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC3C,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,UAAU,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC3C,YAAY,EAAE,MAAM,SAAS;AAAA,IAC7B,UAAU,EAAE,MAAM,SAAS;AAAA,IAC3B,aAAa,EAAE,MAAM,SAAS;AAAA,IAC9B,UAAU,EAAE,MAAM,WAAW,SAAS,MAAM;AAAA,EAC9C;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,SAAS,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE,CAAC;AAAA,IAC3E;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE;AAAA,IACjE;AAAA,IACA,IAAI;AAAA,MACF,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE;AAAA,IACjE;AAAA,EACF;AACF,EAAE;AAEK,IAAM,iBAAiB,mBAAmB,OAAO;AAAA,EACtD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,EACjD;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,oBAAoB,IAAI,IAAI;AAAA,IAChD;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,UAAU,cAAc;AAC1C,CAAC;",
  "names": []
}
