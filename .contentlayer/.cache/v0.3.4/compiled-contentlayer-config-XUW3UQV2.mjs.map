{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files'\n\nexport const BlogPost = defineDocumentType(() => ({\n  name: 'BlogPost',\n  filePathPattern: `blog/**/*.md`, // Matches files in content/blog\n  contentType: 'markdown',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    updatedDate: { type: 'date', required: false },\n    author: { type: 'string', required: true },\n    tags: { type: 'list', of: { type: 'string' }, default: [] },\n    category: { type: 'string', required: false },\n    excerpt: { type: 'string', required: true },\n    imageUrl: { type: 'string' },\n    dataAiHint: { type: 'string' },\n    seriesId: { type: 'string', required: false }, \n    seriesOrder: { type: 'number', required: false },\n    featured: { type: 'boolean', default: false, required: false },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^blog\\/?/, ''),\n    },\n    id: { \n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^blog\\/?/, ''),\n    }\n  },\n}))\n\nexport const PythonTutorial = defineDocumentType(() => ({\n  name: \"PythonTutorial\",\n  filePathPattern: `tutorials/python/*.md`,\n  contentType: \"markdown\",\n  fields: {\n    title: { type: \"string\", required: true },\n    slug: { type: \"string\", required: true },\n    order: { type: \"number\", required: true },\n    description: { type: \"string\", required: false },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (doc) => `/tutorial/python/${doc.slug}`,\n    },\n  },\n}))\n\nexport const TutorialPost = defineDocumentType(() => ({\n  name: 'TutorialPost',\n  filePathPattern: `tutorials/python/**/*.md`, // Specific to Python tutorials for now\n  contentType: 'markdown',\n  fields: {\n    title: { type: 'string', required: true },\n    slug: { type: 'string', required: true }, // Slug from frontmatter for URL\n    order: { type: 'number', required: true },\n    description: { type: 'string', required: true },\n  },\n  computedFields: {\n    path: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath,\n    },\n    language: {\n      type: 'string',\n      resolve: (doc) => {\n        // Extracts 'python' from 'tutorials/python/filename.md'\n        const parts = doc._raw.sourceFileDir.split('/');\n        return parts.length > 1 ? parts[1] : 'unknown';\n      }\n    },\n    // id can be the path or just the slug if slugs are unique per language\n    id: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath,\n    }\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [BlogPost, PythonTutorial], // Removed TutorialPost\n  mdx: { \n    remarkPlugins: [], \n    rehypePlugins: [],\n  },\n})\n"],
  "mappings": "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",
  "names": []
}
