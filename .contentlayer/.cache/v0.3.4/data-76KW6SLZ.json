{
  "cacheItemsMap": {
    "tutorials/c/introduction.md": {
      "document": {
        "title": "Introduction to C",
        "slug": "introduction-to-c",
        "order": 1,
        "description": "A brief overview of the C programming language, its history, and its significance.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is C?\n\nC is a general-purpose, procedural computer programming language supporting structured programming, lexical variable scope, and recursion, with a static type system. Developed in the early 1970s by Dennis Ritchie at Bell Labs, C was designed to be a system implementation language for the nascent Unix operating system.\n\n### Key Characteristics:\n- **Mid-level Language**: C bridges the gap between low-level assembly language and high-level programming languages.\n- **Structured Language**: It follows a structured approach, which makes the program easier to understand, test, and maintain.\n- **Portability**: C programs can be compiled on different platforms with little to no modification.\n- **Performance**: It produces efficient code that is fast to execute, making it suitable for system programming, game development, and performance-critical applications.\n- **Foundation for Other Languages**: Many modern languages like C++, C#, Java, and Python have borrowed syntax and concepts from C.\n\nBy design, C provides constructs that map efficiently to typical machine instructions, and it has found lasting use in applications previously coded in assembly language. It remains one of the most influential programming languages ever created.",
          "html": "<h2>What is C?</h2>\n<p>C is a general-purpose, procedural computer programming language supporting structured programming, lexical variable scope, and recursion, with a static type system. Developed in the early 1970s by Dennis Ritchie at Bell Labs, C was designed to be a system implementation language for the nascent Unix operating system.</p>\n<h3>Key Characteristics:</h3>\n<ul>\n<li><strong>Mid-level Language</strong>: C bridges the gap between low-level assembly language and high-level programming languages.</li>\n<li><strong>Structured Language</strong>: It follows a structured approach, which makes the program easier to understand, test, and maintain.</li>\n<li><strong>Portability</strong>: C programs can be compiled on different platforms with little to no modification.</li>\n<li><strong>Performance</strong>: It produces efficient code that is fast to execute, making it suitable for system programming, game development, and performance-critical applications.</li>\n<li><strong>Foundation for Other Languages</strong>: Many modern languages like C++, C#, Java, and Python have borrowed syntax and concepts from C.</li>\n</ul>\n<p>By design, C provides constructs that map efficiently to typical machine instructions, and it has found lasting use in applications previously coded in assembly language. It remains one of the most influential programming languages ever created.</p>"
        },
        "_id": "tutorials/c/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/c/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/c",
          "contentType": "markdown",
          "flattenedPath": "tutorials/c/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/c/introduction-to-c",
        "language": "c"
      },
      "documentHash": "1754563588748",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/cplusplus/introduction.md": {
      "document": {
        "title": "Introduction to C++",
        "slug": "introduction-to-cplusplus",
        "order": 1,
        "description": "A brief overview of the C++ programming language, its features, and its applications.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is C++?\n\nC++ is a high-level, general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or \"C with Classes\". The language has expanded significantly over time, and modern C++ now has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation.\n\n### Core Features:\n- **Object-Oriented**: C++ introduces classes and objects, allowing for encapsulation, inheritance, and polymorphism.\n- **Performance**: Like C, it allows for low-level memory manipulation, making it extremely fast and efficient. This is why it's a popular choice for game engines, high-frequency trading, and embedded systems.\n- **Standard Template Library (STL)**: A set of C++ template classes to provide common programming data structures and functions such as lists, stacks, arrays, etc.\n- **Scalability**: C++ can be used to create large-scale applications with complex requirements.\n- **Compatibility with C**: C++ is highly compatible with C, allowing C code to be easily included in C++ programs.\n\nC++ is a versatile language used in a wide range of applications, from operating systems and browsers to graphical user interfaces and game development.",
          "html": "<h2>What is C++?</h2>\n<p>C++ is a high-level, general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or \"C with Classes\". The language has expanded significantly over time, and modern C++ now has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation.</p>\n<h3>Core Features:</h3>\n<ul>\n<li><strong>Object-Oriented</strong>: C++ introduces classes and objects, allowing for encapsulation, inheritance, and polymorphism.</li>\n<li><strong>Performance</strong>: Like C, it allows for low-level memory manipulation, making it extremely fast and efficient. This is why it's a popular choice for game engines, high-frequency trading, and embedded systems.</li>\n<li><strong>Standard Template Library (STL)</strong>: A set of C++ template classes to provide common programming data structures and functions such as lists, stacks, arrays, etc.</li>\n<li><strong>Scalability</strong>: C++ can be used to create large-scale applications with complex requirements.</li>\n<li><strong>Compatibility with C</strong>: C++ is highly compatible with C, allowing C code to be easily included in C++ programs.</li>\n</ul>\n<p>C++ is a versatile language used in a wide range of applications, from operating systems and browsers to graphical user interfaces and game development.</p>"
        },
        "_id": "tutorials/cplusplus/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/cplusplus/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/cplusplus",
          "contentType": "markdown",
          "flattenedPath": "tutorials/cplusplus/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/cplusplus/introduction-to-cplusplus",
        "language": "cplusplus"
      },
      "documentHash": "1754563588802",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/csharp/introduction.md": {
      "document": {
        "title": "Introduction to C#",
        "slug": "introduction-to-csharp",
        "order": 1,
        "description": "A brief overview of the C# programming language, its features, and its use in the .NET ecosystem.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is C#?\n\nC# (pronounced \"C-sharp\") is a modern, object-oriented, and type-safe programming language developed by Microsoft. Released in 2000 as part of the .NET Framework, C# is designed for building a wide variety of secure and robust applications that run on the .NET ecosystem.\n\n### Key Features:\n- **Object-Oriented**: C# is a pure object-oriented language, enforcing concepts like encapsulation, inheritance, and polymorphism.\n- **Type-Safe**: It prevents type errors that can occur at runtime, leading to more reliable applications. Variables are strongly typed.\n- **Component-Oriented**: C# is designed for building reusable software components.\n- **Part of .NET**: It is the primary language for the .NET framework, giving it access to a vast library of pre-written code and a powerful runtime environment.\n- **Versatility**: Used for web applications (ASP.NET), game development (Unity), desktop applications (Windows Forms, WPF), and mobile apps (Xamarin, MAUI).\n\nC# has its roots in the C family of languages and will be immediately familiar to C, C++, Java, and JavaScript programmers. Its ongoing development has added many modern features like LINQ (Language Integrated Query) and async/await for asynchronous programming.",
          "html": "<h2>What is C#?</h2>\n<p>C# (pronounced \"C-sharp\") is a modern, object-oriented, and type-safe programming language developed by Microsoft. Released in 2000 as part of the .NET Framework, C# is designed for building a wide variety of secure and robust applications that run on the .NET ecosystem.</p>\n<h3>Key Features:</h3>\n<ul>\n<li><strong>Object-Oriented</strong>: C# is a pure object-oriented language, enforcing concepts like encapsulation, inheritance, and polymorphism.</li>\n<li><strong>Type-Safe</strong>: It prevents type errors that can occur at runtime, leading to more reliable applications. Variables are strongly typed.</li>\n<li><strong>Component-Oriented</strong>: C# is designed for building reusable software components.</li>\n<li><strong>Part of .NET</strong>: It is the primary language for the .NET framework, giving it access to a vast library of pre-written code and a powerful runtime environment.</li>\n<li><strong>Versatility</strong>: Used for web applications (ASP.NET), game development (Unity), desktop applications (Windows Forms, WPF), and mobile apps (Xamarin, MAUI).</li>\n</ul>\n<p>C# has its roots in the C family of languages and will be immediately familiar to C, C++, Java, and JavaScript programmers. Its ongoing development has added many modern features like LINQ (Language Integrated Query) and async/await for asynchronous programming.</p>"
        },
        "_id": "tutorials/csharp/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/csharp/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/csharp",
          "contentType": "markdown",
          "flattenedPath": "tutorials/csharp/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/csharp/introduction-to-csharp",
        "language": "csharp"
      },
      "documentHash": "1754563588920",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/css/introduction.md": {
      "document": {
        "title": "Introduction to CSS",
        "slug": "introduction-to-css",
        "order": 1,
        "description": "An overview of Cascading Style Sheets (CSS) and its role in styling web pages.",
        "category": "Web Development",
        "body": {
          "raw": "\n## What is CSS?\n\nCascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. It allows web developers to control the look and feel of a website, including colors, fonts, layout, and responsive design.\n\n### The \"Cascading\" in CSS\n\nThe \"cascading\" part refers to the specified priority scheme to determine which style rule applies if more than one rule conflicts for a particular element. This system is a fundamental aspect of CSS. The cascade order is generally:\n1.  **Inline styles**: Styles applied directly to an HTML element (e.g., `<p style=\"color: red;\">`).\n2.  **ID selectors**: Rules that target an element with a specific ID (e.g., `#my-id`).\n3.  **Class selectors, attribute selectors, and pseudo-classes**: Rules that target elements by class, attribute, or state (e.g., `.my-class`, `[type=\"text\"]`, `:hover`).\n4.  **Type selectors and pseudo-elements**: Rules that target element types (e.g., `p`, `div`, `::before`).\n\n### Why use CSS?\n\n- **Separation of Concerns**: It separates the document content (HTML) from its presentation, making the code cleaner and easier to maintain.\n- **Consistency**: You can define a style once and apply it to multiple pages.\n- **Accessibility**: Correctly used, CSS can improve the accessibility of a website.\n- **Responsive Design**: With features like media queries, CSS allows you to create layouts that adapt to different screen sizes and devices.\n\nWithout CSS, all web pages would be plain text on a white background. It is an essential skill for any front-end web developer.",
          "html": "<h2>What is CSS?</h2>\n<p>Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. It allows web developers to control the look and feel of a website, including colors, fonts, layout, and responsive design.</p>\n<h3>The \"Cascading\" in CSS</h3>\n<p>The \"cascading\" part refers to the specified priority scheme to determine which style rule applies if more than one rule conflicts for a particular element. This system is a fundamental aspect of CSS. The cascade order is generally:</p>\n<ol>\n<li><strong>Inline styles</strong>: Styles applied directly to an HTML element (e.g., <code>&#x3C;p style=\"color: red;\"></code>).</li>\n<li><strong>ID selectors</strong>: Rules that target an element with a specific ID (e.g., <code>#my-id</code>).</li>\n<li><strong>Class selectors, attribute selectors, and pseudo-classes</strong>: Rules that target elements by class, attribute, or state (e.g., <code>.my-class</code>, <code>[type=\"text\"]</code>, <code>:hover</code>).</li>\n<li><strong>Type selectors and pseudo-elements</strong>: Rules that target element types (e.g., <code>p</code>, <code>div</code>, <code>::before</code>).</li>\n</ol>\n<h3>Why use CSS?</h3>\n<ul>\n<li><strong>Separation of Concerns</strong>: It separates the document content (HTML) from its presentation, making the code cleaner and easier to maintain.</li>\n<li><strong>Consistency</strong>: You can define a style once and apply it to multiple pages.</li>\n<li><strong>Accessibility</strong>: Correctly used, CSS can improve the accessibility of a website.</li>\n<li><strong>Responsive Design</strong>: With features like media queries, CSS allows you to create layouts that adapt to different screen sizes and devices.</li>\n</ul>\n<p>Without CSS, all web pages would be plain text on a white background. It is an essential skill for any front-end web developer.</p>"
        },
        "_id": "tutorials/css/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/css/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/css",
          "contentType": "markdown",
          "flattenedPath": "tutorials/css/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/css/introduction-to-css",
        "language": "css"
      },
      "documentHash": "1754563588931",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/dart/introduction.md": {
      "document": {
        "title": "Introduction to Dart",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of Dart, a client-optimized language for fast apps on any platform.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is Dart?\n\nDart is a programming language designed by Google and is used to build mobile, desktop, server, and web applications. Dart is an object-oriented, class-based, garbage-collected language with C-style syntax. It can compile to either native code or JavaScript. It is the language used by the Flutter framework.\n",
          "html": "<h2>What is Dart?</h2>\n<p>Dart is a programming language designed by Google and is used to build mobile, desktop, server, and web applications. Dart is an object-oriented, class-based, garbage-collected language with C-style syntax. It can compile to either native code or JavaScript. It is the language used by the Flutter framework.</p>"
        },
        "_id": "tutorials/dart/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/dart/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/dart",
          "contentType": "markdown",
          "flattenedPath": "tutorials/dart/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/dart/introduction",
        "language": "dart"
      },
      "documentHash": "1754562111352",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/go/introduction.md": {
      "document": {
        "title": "Introduction to Go",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of Go, an open-source programming language that makes it easy to build simple, reliable, and efficient software.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is Go?\n\nGo (often referred to as Golang) is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. Go is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency.\n",
          "html": "<h2>What is Go?</h2>\n<p>Go (often referred to as Golang) is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. Go is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency.</p>"
        },
        "_id": "tutorials/go/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/go/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/go",
          "contentType": "markdown",
          "flattenedPath": "tutorials/go/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/go/introduction",
        "language": "go"
      },
      "documentHash": "1754562111331",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/html/introduction.md": {
      "document": {
        "title": "Introduction to HTML",
        "slug": "introduction-to-html",
        "order": 1,
        "description": "Learn the basics of HTML, the standard markup language for documents designed to be displayed in a web browser.",
        "category": "Web Development",
        "body": {
          "raw": "\n## What is HTML?\n\nThe HyperText Markup Language, or HTML, is the standard markup language for documents designed to be displayed in a web browser. It forms the very skeleton of web pages. It can be assisted by technologies such as Cascading Style Sheets (CSS) for styling and scripting languages such as JavaScript for functionality.\n\n### Core Concepts\n\n- **Elements**: HTML consists of a series of elements, which you use to enclose, or wrap, different parts of the content to make it appear a certain way, or act a certain way.\n- **Tags**: The enclosing tags can make a word or image hyperlink to somewhere else, can italicize words, can make the font bigger or smaller, and so on. For example, a simple paragraph is enclosed in `<p>` tags: `<p>This is a paragraph.</p>`.\n- **Attributes**: Tags can also have attributes, which provide additional information about an element. For example, an `<img>` tag has a `src` attribute to specify the image source: `<img src=\"image.jpg\">`.\n\n### Basic Document Structure\n\nA typical HTML document has the following structure:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Page Title</title>\n</head>\n<body>\n\n    <h1>This is a Heading</h1>\n    <p>This is a paragraph.</p>\n\n</body>\n</html>\n```\n\n- `<!DOCTYPE html>`: Declares that this document is an HTML5 document.\n- `<html>`: The root element of an HTML page.\n- `<head>`: Contains meta-information about the document, such as its title.\n- `<body>`: Contains the visible page content.\n\nHTML is the foundational technology that every web developer must know.",
          "html": "<h2>What is HTML?</h2>\n<p>The HyperText Markup Language, or HTML, is the standard markup language for documents designed to be displayed in a web browser. It forms the very skeleton of web pages. It can be assisted by technologies such as Cascading Style Sheets (CSS) for styling and scripting languages such as JavaScript for functionality.</p>\n<h3>Core Concepts</h3>\n<ul>\n<li><strong>Elements</strong>: HTML consists of a series of elements, which you use to enclose, or wrap, different parts of the content to make it appear a certain way, or act a certain way.</li>\n<li><strong>Tags</strong>: The enclosing tags can make a word or image hyperlink to somewhere else, can italicize words, can make the font bigger or smaller, and so on. For example, a simple paragraph is enclosed in <code>&#x3C;p></code> tags: <code>&#x3C;p>This is a paragraph.&#x3C;/p></code>.</li>\n<li><strong>Attributes</strong>: Tags can also have attributes, which provide additional information about an element. For example, an <code>&#x3C;img></code> tag has a <code>src</code> attribute to specify the image source: <code>&#x3C;img src=\"image.jpg\"></code>.</li>\n</ul>\n<h3>Basic Document Structure</h3>\n<p>A typical HTML document has the following structure:</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;title>Page Title&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n    &#x3C;h1>This is a Heading&#x3C;/h1>\n    &#x3C;p>This is a paragraph.&#x3C;/p>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<ul>\n<li><code>&#x3C;!DOCTYPE html></code>: Declares that this document is an HTML5 document.</li>\n<li><code>&#x3C;html></code>: The root element of an HTML page.</li>\n<li><code>&#x3C;head></code>: Contains meta-information about the document, such as its title.</li>\n<li><code>&#x3C;body></code>: Contains the visible page content.</li>\n</ul>\n<p>HTML is the foundational technology that every web developer must know.</p>"
        },
        "_id": "tutorials/html/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/html/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/html",
          "contentType": "markdown",
          "flattenedPath": "tutorials/html/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/html/introduction-to-html",
        "language": "html"
      },
      "documentHash": "1754563588956",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/java/control-flow.md": {
      "document": {
        "title": "Java Control Flow",
        "slug": "java-control-flow",
        "order": 5,
        "description": "Learn how to control the flow of execution in Java using conditional statements and loops.",
        "category": "Java Fundamentals",
        "body": {
          "raw": "\n## Control Flow in Java\n\nControl flow statements are what allow a program to make decisions and repeat actions.\n\n### Conditional Statements (`if`, `else if`, `else`)\n\nThese statements allow your program to execute certain blocks of code based on a boolean condition.\n\n```java\nint score = 85;\n\nif (score >= 90) {\n    System.out.println(\"Grade: A\");\n} else if (score >= 80) {\n    System.out.println(\"Grade: B\"); // This will be printed\n} else if (score >= 70) {\n    System.out.println(\"Grade: C\");\n} else {\n    System.out.println(\"Grade: F\");\n}\n```\n\n### The `switch` Statement\n\nA `switch` statement can be a cleaner alternative to a long chain of `if-else if` statements when you are checking a single variable against multiple values.\n\n```java\nint day = 4;\nString dayString;\nswitch (day) {\n    case 1:  dayString = \"Monday\";\n             break;\n    case 2:  dayString = \"Tuesday\";\n             break;\n    case 3:  dayString = \"Wednesday\";\n             break;\n    case 4:  dayString = \"Thursday\";\n             break;\n    // ... other cases\n    default: dayString = \"Invalid day\";\n             break;\n}\nSystem.out.println(dayString); // Output: Thursday\n```\n\n### Loops\n\nLoops are used to execute a block of code repeatedly.\n\n#### The `for` Loop\n\nA `for` loop is ideal when you know how many times you want to iterate.\n\n```java\n// Prints numbers from 0 to 4\nfor (int i = 0; i < 5; i++) {\n    System.out.println(\"Iteration: \" + i);\n}\n```\n\n#### The `while` Loop\n\nA `while` loop continues as long as a condition is true.\n\n```java\nint count = 0;\nwhile (count < 3) {\n    System.out.println(\"Count is \" + count);\n    count++;\n}\n```\n\n#### The `do-while` Loop\n\nA `do-while` loop is similar to a `while` loop, but it guarantees that the block of code is executed at least once.\n\n```java\nint i = 5;\ndo {\n    System.out.println(\"This will print once, even though i is not less than 5.\");\n    i++;\n} while (i < 5);\n```\n",
          "html": "<h2>Control Flow in Java</h2>\n<p>Control flow statements are what allow a program to make decisions and repeat actions.</p>\n<h3>Conditional Statements (<code>if</code>, <code>else if</code>, <code>else</code>)</h3>\n<p>These statements allow your program to execute certain blocks of code based on a boolean condition.</p>\n<pre><code class=\"language-java\">int score = 85;\n\nif (score >= 90) {\n    System.out.println(\"Grade: A\");\n} else if (score >= 80) {\n    System.out.println(\"Grade: B\"); // This will be printed\n} else if (score >= 70) {\n    System.out.println(\"Grade: C\");\n} else {\n    System.out.println(\"Grade: F\");\n}\n</code></pre>\n<h3>The <code>switch</code> Statement</h3>\n<p>A <code>switch</code> statement can be a cleaner alternative to a long chain of <code>if-else if</code> statements when you are checking a single variable against multiple values.</p>\n<pre><code class=\"language-java\">int day = 4;\nString dayString;\nswitch (day) {\n    case 1:  dayString = \"Monday\";\n             break;\n    case 2:  dayString = \"Tuesday\";\n             break;\n    case 3:  dayString = \"Wednesday\";\n             break;\n    case 4:  dayString = \"Thursday\";\n             break;\n    // ... other cases\n    default: dayString = \"Invalid day\";\n             break;\n}\nSystem.out.println(dayString); // Output: Thursday\n</code></pre>\n<h3>Loops</h3>\n<p>Loops are used to execute a block of code repeatedly.</p>\n<h4>The <code>for</code> Loop</h4>\n<p>A <code>for</code> loop is ideal when you know how many times you want to iterate.</p>\n<pre><code class=\"language-java\">// Prints numbers from 0 to 4\nfor (int i = 0; i &#x3C; 5; i++) {\n    System.out.println(\"Iteration: \" + i);\n}\n</code></pre>\n<h4>The <code>while</code> Loop</h4>\n<p>A <code>while</code> loop continues as long as a condition is true.</p>\n<pre><code class=\"language-java\">int count = 0;\nwhile (count &#x3C; 3) {\n    System.out.println(\"Count is \" + count);\n    count++;\n}\n</code></pre>\n<h4>The <code>do-while</code> Loop</h4>\n<p>A <code>do-while</code> loop is similar to a <code>while</code> loop, but it guarantees that the block of code is executed at least once.</p>\n<pre><code class=\"language-java\">int i = 5;\ndo {\n    System.out.println(\"This will print once, even though i is not less than 5.\");\n    i++;\n} while (i &#x3C; 5);\n</code></pre>"
        },
        "_id": "tutorials/java/control-flow.md",
        "_raw": {
          "sourceFilePath": "tutorials/java/control-flow.md",
          "sourceFileName": "control-flow.md",
          "sourceFileDir": "tutorials/java",
          "contentType": "markdown",
          "flattenedPath": "tutorials/java/control-flow"
        },
        "type": "TutorialPost",
        "url": "/tutorial/java/java-control-flow",
        "language": "java"
      },
      "documentHash": "1754559706315",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/java/hello-world.md": {
      "document": {
        "title": "Java Hello World",
        "slug": "hello-world-in-java",
        "order": 2,
        "description": "Learn to write, compile, and run your first 'Hello, World!' program in Java.",
        "category": "Java Basics",
        "body": {
          "raw": "\n## Your First Java Program\n\nThe \"Hello, World!\" program is the traditional first step for learning a new language. It's a simple program that outputs `Hello, World!` to the console.\n\n### The Code\n\nIn Java, all code must reside inside a class. Here is the basic structure:\n\n```java\n// The file must be named HelloWorld.java\npublic class HelloWorld {\n    // This is the main method, the entry point of any Java application.\n    public static void main(String[] args) {\n        // This line prints the text to the console.\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n### Breaking Down the Code\n\n- **`public class HelloWorld`**: This declares a class named `HelloWorld`, which is `public`, meaning it's accessible by any other class. The class name **must** match the filename (`HelloWorld.java`).\n- **`public static void main(String[] args)`**: This is the main method.\n    - `public`: It can be called from anywhere.\n    - `static`: It can be run without creating an instance of the `HelloWorld` class.\n    - `void`: It does not return any value.\n    - `main`: This is the name of the method. The JVM looks for this specific method to start the program.\n    - `(String[] args)`: This accepts command-line arguments as an array of strings.\n- **`System.out.println(\"Hello, World!\");`**: This is the statement that does the printing.\n    - `System`: A final class from the `java.lang` package.\n    - `out`: A static member of the `System` class, which is an instance of `PrintStream`.\n    - `println()`: A method of the `PrintStream` class that prints the argument passed to it, followed by a new line.\n\n### How to Compile and Run\n\n1.  Save the code in a file named `HelloWorld.java`.\n2.  Open a terminal or command prompt.\n3.  Navigate to the directory where you saved the file.\n4.  **Compile the code**: Use the Java compiler (`javac`).\n    ```bash\n    javac HelloWorld.java\n    ```\n    This will create a `HelloWorld.class` file containing the Java bytecode.\n5.  **Run the program**: Use the Java Virtual Machine (`java`).\n    ```bash\n    java HelloWorld\n    ```\n    You should see the output: `Hello, World!`\n",
          "html": "<h2>Your First Java Program</h2>\n<p>The \"Hello, World!\" program is the traditional first step for learning a new language. It's a simple program that outputs <code>Hello, World!</code> to the console.</p>\n<h3>The Code</h3>\n<p>In Java, all code must reside inside a class. Here is the basic structure:</p>\n<pre><code class=\"language-java\">// The file must be named HelloWorld.java\npublic class HelloWorld {\n    // This is the main method, the entry point of any Java application.\n    public static void main(String[] args) {\n        // This line prints the text to the console.\n        System.out.println(\"Hello, World!\");\n    }\n}\n</code></pre>\n<h3>Breaking Down the Code</h3>\n<ul>\n<li><strong><code>public class HelloWorld</code></strong>: This declares a class named <code>HelloWorld</code>, which is <code>public</code>, meaning it's accessible by any other class. The class name <strong>must</strong> match the filename (<code>HelloWorld.java</code>).</li>\n<li><strong><code>public static void main(String[] args)</code></strong>: This is the main method.\n<ul>\n<li><code>public</code>: It can be called from anywhere.</li>\n<li><code>static</code>: It can be run without creating an instance of the <code>HelloWorld</code> class.</li>\n<li><code>void</code>: It does not return any value.</li>\n<li><code>main</code>: This is the name of the method. The JVM looks for this specific method to start the program.</li>\n<li><code>(String[] args)</code>: This accepts command-line arguments as an array of strings.</li>\n</ul>\n</li>\n<li><strong><code>System.out.println(\"Hello, World!\");</code></strong>: This is the statement that does the printing.\n<ul>\n<li><code>System</code>: A final class from the <code>java.lang</code> package.</li>\n<li><code>out</code>: A static member of the <code>System</code> class, which is an instance of <code>PrintStream</code>.</li>\n<li><code>println()</code>: A method of the <code>PrintStream</code> class that prints the argument passed to it, followed by a new line.</li>\n</ul>\n</li>\n</ul>\n<h3>How to Compile and Run</h3>\n<ol>\n<li>Save the code in a file named <code>HelloWorld.java</code>.</li>\n<li>Open a terminal or command prompt.</li>\n<li>Navigate to the directory where you saved the file.</li>\n<li><strong>Compile the code</strong>: Use the Java compiler (<code>javac</code>).\n<pre><code class=\"language-bash\">javac HelloWorld.java\n</code></pre>\nThis will create a <code>HelloWorld.class</code> file containing the Java bytecode.</li>\n<li><strong>Run the program</strong>: Use the Java Virtual Machine (<code>java</code>).\n<pre><code class=\"language-bash\">java HelloWorld\n</code></pre>\nYou should see the output: <code>Hello, World!</code></li>\n</ol>"
        },
        "_id": "tutorials/java/hello-world.md",
        "_raw": {
          "sourceFilePath": "tutorials/java/hello-world.md",
          "sourceFileName": "hello-world.md",
          "sourceFileDir": "tutorials/java",
          "contentType": "markdown",
          "flattenedPath": "tutorials/java/hello-world"
        },
        "type": "TutorialPost",
        "url": "/tutorial/java/hello-world-in-java",
        "language": "java"
      },
      "documentHash": "1754559706320",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/java/introduction.md": {
      "document": {
        "title": "Introduction to Java",
        "slug": "introduction-to-java",
        "order": 1,
        "description": "Get an overview of the Java programming language, its history, features, and why it remains one of the most popular languages in the world.",
        "category": "Java Basics",
        "body": {
          "raw": "\n## What is Java?\n\nJava is a high-level, class-based, object-oriented programming language developed by Sun Microsystems (now owned by Oracle) and first released in 1995. It is designed to have as few implementation dependencies as possible, allowing developers to \"write once, run anywhere\" (WORA). This means that compiled Java code can run on all platforms that support Java without the need for recompilation.\n\n## Key Features of Java\n\n-   **Platform Independent**: Thanks to the Java Virtual Machine (JVM), Java bytecode can run on any device, making it highly portable.\n-   **Object-Oriented**: Java is fundamentally object-oriented, which helps in building modular and reusable code.\n-   **Robust and Secure**: It emphasizes early checking for possible errors and has built-in security features, including a Security Manager.\n-   **Automatic Memory Management**: Java automatically manages memory through a process called garbage collection.\n-   **Multithreaded**: Java has built-in support for multithreading, which allows for the concurrent execution of multiple parts of a program.\n-   **Rich Standard Library**: Java provides a large standard library with classes and methods for common tasks like I/O, networking, and data structures.\n\nThis tutorial series will guide you through the fundamentals of Java programming.\n",
          "html": "<h2>What is Java?</h2>\n<p>Java is a high-level, class-based, object-oriented programming language developed by Sun Microsystems (now owned by Oracle) and first released in 1995. It is designed to have as few implementation dependencies as possible, allowing developers to \"write once, run anywhere\" (WORA). This means that compiled Java code can run on all platforms that support Java without the need for recompilation.</p>\n<h2>Key Features of Java</h2>\n<ul>\n<li><strong>Platform Independent</strong>: Thanks to the Java Virtual Machine (JVM), Java bytecode can run on any device, making it highly portable.</li>\n<li><strong>Object-Oriented</strong>: Java is fundamentally object-oriented, which helps in building modular and reusable code.</li>\n<li><strong>Robust and Secure</strong>: It emphasizes early checking for possible errors and has built-in security features, including a Security Manager.</li>\n<li><strong>Automatic Memory Management</strong>: Java automatically manages memory through a process called garbage collection.</li>\n<li><strong>Multithreaded</strong>: Java has built-in support for multithreading, which allows for the concurrent execution of multiple parts of a program.</li>\n<li><strong>Rich Standard Library</strong>: Java provides a large standard library with classes and methods for common tasks like I/O, networking, and data structures.</li>\n</ul>\n<p>This tutorial series will guide you through the fundamentals of Java programming.</p>"
        },
        "_id": "tutorials/java/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/java/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/java",
          "contentType": "markdown",
          "flattenedPath": "tutorials/java/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/java/introduction-to-java",
        "language": "java"
      },
      "documentHash": "1754559706320",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/java/operators.md": {
      "document": {
        "title": "Java Operators",
        "slug": "java-operators",
        "order": 4,
        "description": "Understand the various operators in Java for performing arithmetic, assignment, comparison, and logical operations.",
        "category": "Java Fundamentals",
        "body": {
          "raw": "\n## Operators in Java\n\nOperators are special symbols that perform specific operations on one, two, or three operands, and then return a result.\n\n### 1. Arithmetic Operators\nUsed to perform common mathematical operations.\n- `+` Addition\n- `-` Subtraction\n- `*` Multiplication\n- `/` Division\n- `%` Modulus (returns the remainder of a division)\n- `++` Increment (increases a value by 1)\n- `--` Decrement (decreases a value by 1)\n\n```java\nint x = 10;\nint y = 3;\nSystem.out.println(x + y); // 13\nSystem.out.println(x % y); // 1\nx++; // x is now 11\n```\n\n### 2. Assignment Operators\nUsed to assign values to variables.\n- `=` Assign\n- `+=` (e.g., `x += 3` is same as `x = x + 3`)\n- `-=`\n- `*=`\n- `/=`\n- `%=`\n\n### 3. Comparison Operators\nUsed to compare two values. The result is a boolean (`true` or `false`).\n- `==` Equal to\n- `!=` Not equal to\n- `>` Greater than\n- `<` Less than\n- `>=` Greater than or equal to\n- `<=` Less than or equal to\n\n```java\nint a = 5;\nint b = 7;\nSystem.out.println(a == b); // false\nSystem.out.println(a < b);  // true\n```\n\n### 4. Logical Operators\nUsed to determine the logic between variables or values.\n- `&&` Logical AND (returns `true` if both statements are true)\n- `||` Logical OR (returns `true` if one of the statements is true)\n- `!` Logical NOT (reverses the result, returns `false` if the result is true)\n\n```java\nint age = 25;\nboolean hasLicense = true;\nif (age >= 18 && hasLicense) {\n    System.out.println(\"Can drive.\");\n}\n```\n",
          "html": "<h2>Operators in Java</h2>\n<p>Operators are special symbols that perform specific operations on one, two, or three operands, and then return a result.</p>\n<h3>1. Arithmetic Operators</h3>\n<p>Used to perform common mathematical operations.</p>\n<ul>\n<li><code>+</code> Addition</li>\n<li><code>-</code> Subtraction</li>\n<li><code>*</code> Multiplication</li>\n<li><code>/</code> Division</li>\n<li><code>%</code> Modulus (returns the remainder of a division)</li>\n<li><code>++</code> Increment (increases a value by 1)</li>\n<li><code>--</code> Decrement (decreases a value by 1)</li>\n</ul>\n<pre><code class=\"language-java\">int x = 10;\nint y = 3;\nSystem.out.println(x + y); // 13\nSystem.out.println(x % y); // 1\nx++; // x is now 11\n</code></pre>\n<h3>2. Assignment Operators</h3>\n<p>Used to assign values to variables.</p>\n<ul>\n<li><code>=</code> Assign</li>\n<li><code>+=</code> (e.g., <code>x += 3</code> is same as <code>x = x + 3</code>)</li>\n<li><code>-=</code></li>\n<li><code>*=</code></li>\n<li><code>/=</code></li>\n<li><code>%=</code></li>\n</ul>\n<h3>3. Comparison Operators</h3>\n<p>Used to compare two values. The result is a boolean (<code>true</code> or <code>false</code>).</p>\n<ul>\n<li><code>==</code> Equal to</li>\n<li><code>!=</code> Not equal to</li>\n<li><code>></code> Greater than</li>\n<li><code>&#x3C;</code> Less than</li>\n<li><code>>=</code> Greater than or equal to</li>\n<li><code>&#x3C;=</code> Less than or equal to</li>\n</ul>\n<pre><code class=\"language-java\">int a = 5;\nint b = 7;\nSystem.out.println(a == b); // false\nSystem.out.println(a &#x3C; b);  // true\n</code></pre>\n<h3>4. Logical Operators</h3>\n<p>Used to determine the logic between variables or values.</p>\n<ul>\n<li><code>&#x26;&#x26;</code> Logical AND (returns <code>true</code> if both statements are true)</li>\n<li><code>||</code> Logical OR (returns <code>true</code> if one of the statements is true)</li>\n<li><code>!</code> Logical NOT (reverses the result, returns <code>false</code> if the result is true)</li>\n</ul>\n<pre><code class=\"language-java\">int age = 25;\nboolean hasLicense = true;\nif (age >= 18 &#x26;&#x26; hasLicense) {\n    System.out.println(\"Can drive.\");\n}\n</code></pre>"
        },
        "_id": "tutorials/java/operators.md",
        "_raw": {
          "sourceFilePath": "tutorials/java/operators.md",
          "sourceFileName": "operators.md",
          "sourceFileDir": "tutorials/java",
          "contentType": "markdown",
          "flattenedPath": "tutorials/java/operators"
        },
        "type": "TutorialPost",
        "url": "/tutorial/java/java-operators",
        "language": "java"
      },
      "documentHash": "1754559706321",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/java/variables-and-data-types.md": {
      "document": {
        "title": "Java Variables and Data Types",
        "slug": "java-variables-data-types",
        "order": 3,
        "description": "Learn about declaring variables and the fundamental data types in Java.",
        "category": "Java Fundamentals",
        "body": {
          "raw": "\n## Variables in Java\n\nA variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.\n\nIn Java, all variables must be declared before they can be used.\n\n```java\n// SYNTAX: type variableName = value;\nint myNumber = 5;\nString greeting = \"Hello\";\nboolean isActive = true;\n```\n\n## Data Types\n\nData types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:\n\n### 1. Primitive Data Types\n\nPrimitive data types are predefined by the language and named by a keyword. There are 8 primitive types:\n\n- **`byte`**: 1 byte, stores whole numbers from -128 to 127\n- **`short`**: 2 bytes, stores whole numbers from -32,768 to 32,767\n- **`int`**: 4 bytes, stores whole numbers from -2,147,483,648 to 2,147,483,647 (most common for integers)\n- **`long`**: 8 bytes, stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\n- **`float`**: 4 bytes, stores fractional numbers. Sufficient for storing 6 to 7 decimal digits\n- **`double`**: 8 bytes, stores fractional numbers. Sufficient for storing 15 decimal digits (most common for floating-point numbers)\n- **`boolean`**: 1 bit, stores `true` or `false` values\n- **`char`**: 2 bytes, stores a single character/letter or ASCII values.\n\n```java\nint myInt = 10000;\nfloat myFloat = 5.75f; // Note the 'f' suffix\nchar myLetter = 'D';\nboolean myBool = true;\n```\n\n### 2. Non-Primitive Data Types (Reference Types)\n\nNon-primitive types are created by the programmer and are not defined by Java (except for `String`). They are also known as reference types because they refer to objects.\n\n- **Classes**, **Interfaces**, **Arrays**, and **Strings** are examples of non-primitive types.\n\nThe main difference between primitive and non-primitive types is that primitive types are stored directly in memory where the variable is allocated, whereas non-primitive types store a reference (or address) to the memory location where the object is actually stored.\n",
          "html": "<h2>Variables in Java</h2>\n<p>A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.</p>\n<p>In Java, all variables must be declared before they can be used.</p>\n<pre><code class=\"language-java\">// SYNTAX: type variableName = value;\nint myNumber = 5;\nString greeting = \"Hello\";\nboolean isActive = true;\n</code></pre>\n<h2>Data Types</h2>\n<p>Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:</p>\n<h3>1. Primitive Data Types</h3>\n<p>Primitive data types are predefined by the language and named by a keyword. There are 8 primitive types:</p>\n<ul>\n<li><strong><code>byte</code></strong>: 1 byte, stores whole numbers from -128 to 127</li>\n<li><strong><code>short</code></strong>: 2 bytes, stores whole numbers from -32,768 to 32,767</li>\n<li><strong><code>int</code></strong>: 4 bytes, stores whole numbers from -2,147,483,648 to 2,147,483,647 (most common for integers)</li>\n<li><strong><code>long</code></strong>: 8 bytes, stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</li>\n<li><strong><code>float</code></strong>: 4 bytes, stores fractional numbers. Sufficient for storing 6 to 7 decimal digits</li>\n<li><strong><code>double</code></strong>: 8 bytes, stores fractional numbers. Sufficient for storing 15 decimal digits (most common for floating-point numbers)</li>\n<li><strong><code>boolean</code></strong>: 1 bit, stores <code>true</code> or <code>false</code> values</li>\n<li><strong><code>char</code></strong>: 2 bytes, stores a single character/letter or ASCII values.</li>\n</ul>\n<pre><code class=\"language-java\">int myInt = 10000;\nfloat myFloat = 5.75f; // Note the 'f' suffix\nchar myLetter = 'D';\nboolean myBool = true;\n</code></pre>\n<h3>2. Non-Primitive Data Types (Reference Types)</h3>\n<p>Non-primitive types are created by the programmer and are not defined by Java (except for <code>String</code>). They are also known as reference types because they refer to objects.</p>\n<ul>\n<li><strong>Classes</strong>, <strong>Interfaces</strong>, <strong>Arrays</strong>, and <strong>Strings</strong> are examples of non-primitive types.</li>\n</ul>\n<p>The main difference between primitive and non-primitive types is that primitive types are stored directly in memory where the variable is allocated, whereas non-primitive types store a reference (or address) to the memory location where the object is actually stored.</p>"
        },
        "_id": "tutorials/java/variables-and-data-types.md",
        "_raw": {
          "sourceFilePath": "tutorials/java/variables-and-data-types.md",
          "sourceFileName": "variables-and-data-types.md",
          "sourceFileDir": "tutorials/java",
          "contentType": "markdown",
          "flattenedPath": "tutorials/java/variables-and-data-types"
        },
        "type": "TutorialPost",
        "url": "/tutorial/java/java-variables-data-types",
        "language": "java"
      },
      "documentHash": "1754559706323",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/arrays.md": {
      "document": {
        "title": "JavaScript Arrays",
        "slug": "javascript-arrays",
        "order": 8,
        "description": "Learn how to work with arrays in JavaScript to store and manipulate collections of data.",
        "category": "JS Fundamentals",
        "body": {
          "raw": "\n## Understanding JavaScript Arrays\n\nAn array is a special variable that can hold more than one value at a time. It's a fundamental data structure for storing ordered collections of items.\n\n### Creating an Array\n\nYou can create an array using an array literal, which is the most common way:\n\n```javascript\n// An array of strings\nconst fruits = [\"Apple\", \"Banana\", \"Cherry\"];\n\n// An array of numbers\nconst numbers = [1, 1, 2, 3, 5, 8];\n\n// An array with mixed data types\nconst mixed = [42, \"hello\", true, null];\n```\n\n### Accessing Elements\n\nArray elements are accessed using zero-based indexes.\n\n```javascript\nconst fruits = [\"Apple\", \"Banana\", \"Cherry\"];\n\nconsole.log(fruits[0]); // Output: \"Apple\"\nconsole.log(fruits[1]); // Output: \"Banana\"\n\n// You can also change an element\nfruits[1] = \"Blueberry\";\nconsole.log(fruits); // Output: [\"Apple\", \"Blueberry\", \"Cherry\"]\n```\n\n### Common Array Properties and Methods\n\n-   **`.length`**: Returns the number of elements in the array.\n    ```javascript\n    console.log(fruits.length); // 3\n    ```\n\n-   **`.push()`**: Adds a new element to the end of an array.\n    ```javascript\n    fruits.push(\"Date\");\n    console.log(fruits); // [\"Apple\", \"Blueberry\", \"Cherry\", \"Date\"]\n    ```\n\n-   **`.pop()`**: Removes the last element from an array.\n    ```javascript\n    fruits.pop();\n    console.log(fruits); // [\"Apple\", \"Blueberry\", \"Cherry\"]\n    ```\n\n-   **`.forEach()`**: Executes a provided function once for each array element.\n    ```javascript\n    fruits.forEach(function(fruit) {\n      console.log(\"I love \" + fruit);\n    });\n    ```\n\n-   **`.map()`**: Creates a new array populated with the results of calling a provided function on every element.\n    ```javascript\n    const numbers = [1, 4, 9, 16];\n    const roots = numbers.map(Math.sqrt);\n    console.log(roots); // [1, 2, 3, 4]\n    ```\n\nArrays are one of the most useful and versatile parts of JavaScript.",
          "html": "<h2>Understanding JavaScript Arrays</h2>\n<p>An array is a special variable that can hold more than one value at a time. It's a fundamental data structure for storing ordered collections of items.</p>\n<h3>Creating an Array</h3>\n<p>You can create an array using an array literal, which is the most common way:</p>\n<pre><code class=\"language-javascript\">// An array of strings\nconst fruits = [\"Apple\", \"Banana\", \"Cherry\"];\n\n// An array of numbers\nconst numbers = [1, 1, 2, 3, 5, 8];\n\n// An array with mixed data types\nconst mixed = [42, \"hello\", true, null];\n</code></pre>\n<h3>Accessing Elements</h3>\n<p>Array elements are accessed using zero-based indexes.</p>\n<pre><code class=\"language-javascript\">const fruits = [\"Apple\", \"Banana\", \"Cherry\"];\n\nconsole.log(fruits[0]); // Output: \"Apple\"\nconsole.log(fruits[1]); // Output: \"Banana\"\n\n// You can also change an element\nfruits[1] = \"Blueberry\";\nconsole.log(fruits); // Output: [\"Apple\", \"Blueberry\", \"Cherry\"]\n</code></pre>\n<h3>Common Array Properties and Methods</h3>\n<ul>\n<li>\n<p><strong><code>.length</code></strong>: Returns the number of elements in the array.</p>\n<pre><code class=\"language-javascript\">console.log(fruits.length); // 3\n</code></pre>\n</li>\n<li>\n<p><strong><code>.push()</code></strong>: Adds a new element to the end of an array.</p>\n<pre><code class=\"language-javascript\">fruits.push(\"Date\");\nconsole.log(fruits); // [\"Apple\", \"Blueberry\", \"Cherry\", \"Date\"]\n</code></pre>\n</li>\n<li>\n<p><strong><code>.pop()</code></strong>: Removes the last element from an array.</p>\n<pre><code class=\"language-javascript\">fruits.pop();\nconsole.log(fruits); // [\"Apple\", \"Blueberry\", \"Cherry\"]\n</code></pre>\n</li>\n<li>\n<p><strong><code>.forEach()</code></strong>: Executes a provided function once for each array element.</p>\n<pre><code class=\"language-javascript\">fruits.forEach(function(fruit) {\n  console.log(\"I love \" + fruit);\n});\n</code></pre>\n</li>\n<li>\n<p><strong><code>.map()</code></strong>: Creates a new array populated with the results of calling a provided function on every element.</p>\n<pre><code class=\"language-javascript\">const numbers = [1, 4, 9, 16];\nconst roots = numbers.map(Math.sqrt);\nconsole.log(roots); // [1, 2, 3, 4]\n</code></pre>\n</li>\n</ul>\n<p>Arrays are one of the most useful and versatile parts of JavaScript.</p>"
        },
        "_id": "tutorials/javascript/arrays.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/arrays.md",
          "sourceFileName": "arrays.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/arrays"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-arrays",
        "language": "javascript"
      },
      "documentHash": "1754563339722",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/data-types.md": {
      "document": {
        "title": "JavaScript Data Types",
        "slug": "javascript-data-types",
        "order": 4,
        "description": "Explore the different data types available in JavaScript, both primitive and non-primitive.",
        "category": "JS Variables and Data Types",
        "body": {
          "raw": "\n## JavaScript Data Types\n\nJavaScript variables can hold different data types. JavaScript is a dynamically typed language, which means you don't need to specify the type of a variable when you declare it.\n\n### Primitive Data Types\nPrimitive data types are immutable (they cannot be changed).\n\n1.  **String**: Represents textual data.\n    ```javascript\n    let name = \"Alice\";\n    ```\n2.  **Number**: Represents numeric values, including integers and floating-point numbers.\n    ```javascript\n    let age = 30;\n    let price = 19.99;\n    ```\n3.  **BigInt**: Represents integers with arbitrary precision.\n    ```javascript\n    const veryLargeNumber = 9007199254740991n;\n    ```\n4.  **Boolean**: Represents `true` or `false`.\n    ```javascript\n    let isActive = true;\n    ```\n5.  **Undefined**: A variable that has been declared but not assigned a value has the value `undefined`.\n    ```javascript\n    let status; // status is undefined\n    ```\n6.  **Null**: Represents the intentional absence of any object value.\n    ```javascript\n    let user = null;\n    ```\n7.  **Symbol**: A unique and immutable primitive value, often used as object property keys.\n    ```javascript\n    const id = Symbol('id');\n    ```\n\n### Non-Primitive Data Type (Object)\nThe `object` data type can store collections of data.\n\n- **Object**: A collection of key-value pairs.\n  ```javascript\n  const person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 50\n  };\n  ```\n- **Array**: A special type of object for storing ordered collections.\n  ```javascript\n  const colors = [\"red\", \"green\", \"blue\"];\n  ```\n- **Function**: A block of code designed to perform a particular task.\n  ```javascript\n  function greet() {\n    return \"Hello!\";\n  }\n  ```\n",
          "html": "<h2>JavaScript Data Types</h2>\n<p>JavaScript variables can hold different data types. JavaScript is a dynamically typed language, which means you don't need to specify the type of a variable when you declare it.</p>\n<h3>Primitive Data Types</h3>\n<p>Primitive data types are immutable (they cannot be changed).</p>\n<ol>\n<li><strong>String</strong>: Represents textual data.\n<pre><code class=\"language-javascript\">let name = \"Alice\";\n</code></pre>\n</li>\n<li><strong>Number</strong>: Represents numeric values, including integers and floating-point numbers.\n<pre><code class=\"language-javascript\">let age = 30;\nlet price = 19.99;\n</code></pre>\n</li>\n<li><strong>BigInt</strong>: Represents integers with arbitrary precision.\n<pre><code class=\"language-javascript\">const veryLargeNumber = 9007199254740991n;\n</code></pre>\n</li>\n<li><strong>Boolean</strong>: Represents <code>true</code> or <code>false</code>.\n<pre><code class=\"language-javascript\">let isActive = true;\n</code></pre>\n</li>\n<li><strong>Undefined</strong>: A variable that has been declared but not assigned a value has the value <code>undefined</code>.\n<pre><code class=\"language-javascript\">let status; // status is undefined\n</code></pre>\n</li>\n<li><strong>Null</strong>: Represents the intentional absence of any object value.\n<pre><code class=\"language-javascript\">let user = null;\n</code></pre>\n</li>\n<li><strong>Symbol</strong>: A unique and immutable primitive value, often used as object property keys.\n<pre><code class=\"language-javascript\">const id = Symbol('id');\n</code></pre>\n</li>\n</ol>\n<h3>Non-Primitive Data Type (Object)</h3>\n<p>The <code>object</code> data type can store collections of data.</p>\n<ul>\n<li><strong>Object</strong>: A collection of key-value pairs.\n<pre><code class=\"language-javascript\">const person = {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  age: 50\n};\n</code></pre>\n</li>\n<li><strong>Array</strong>: A special type of object for storing ordered collections.\n<pre><code class=\"language-javascript\">const colors = [\"red\", \"green\", \"blue\"];\n</code></pre>\n</li>\n<li><strong>Function</strong>: A block of code designed to perform a particular task.\n<pre><code class=\"language-javascript\">function greet() {\n  return \"Hello!\";\n}\n</code></pre>\n</li>\n</ul>"
        },
        "_id": "tutorials/javascript/data-types.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/data-types.md",
          "sourceFileName": "data-types.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/data-types"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-data-types",
        "language": "javascript"
      },
      "documentHash": "1753939310772",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/events.md": {
      "document": {
        "title": "JavaScript Events",
        "slug": "javascript-events",
        "order": 10,
        "description": "Understand how to handle user actions and other events on a web page with JavaScript.",
        "category": "JS DOM & Events",
        "body": {
          "raw": "\n## JavaScript Events\n\nEvents are actions or occurrences that happen in the system you are programming — the system will fire a signal of some kind when an event takes place, and you can write code that listens for and reacts to those events.\n\n### Common HTML Events\n\n-   **`onclick`**: The user clicks an HTML element.\n-   **`onmouseover`**: The user moves the mouse over an HTML element.\n-   **`onkeydown`**: The user presses a keyboard key.\n-   **`onload`**: The browser has finished loading the page.\n-   **`onsubmit`**: A form is submitted.\n\n### Event Handlers\n\nYou can add event handlers directly in your HTML, but the modern and recommended approach is to use JavaScript to add \"event listeners\".\n\n#### 1. Inline Event Handlers (Older, not recommended)\n\n```html\n<button onclick=\"alert('You clicked me!')\">Click Me</button>\n```\n\n#### 2. Using `addEventListener()` (Modern, recommended)\n\nThis is the preferred way to handle events. It allows you to add multiple event listeners for the same event to a single element.\n\nFirst, you need to select the element in your JavaScript:\n\n```javascript\nconst myButton = document.getElementById(\"my-button\");\n```\n\nThen, you add the event listener:\n\n```javascript\nmyButton.addEventListener(\"click\", function() {\n  console.log(\"Button was clicked!\");\n  // You can run any code here\n});\n\nmyButton.addEventListener(\"mouseover\", function() {\n  myButton.style.backgroundColor = \"lightgray\";\n});\n\nmyButton.addEventListener(\"mouseout\", function() {\n    myButton.style.backgroundColor = \"\"; // Revert to original style\n});\n```\n\nThis separates your HTML structure from your JavaScript logic, making your code cleaner and easier to maintain. Event handling is the key to creating interactive and dynamic web pages.",
          "html": "<h2>JavaScript Events</h2>\n<p>Events are actions or occurrences that happen in the system you are programming — the system will fire a signal of some kind when an event takes place, and you can write code that listens for and reacts to those events.</p>\n<h3>Common HTML Events</h3>\n<ul>\n<li><strong><code>onclick</code></strong>: The user clicks an HTML element.</li>\n<li><strong><code>onmouseover</code></strong>: The user moves the mouse over an HTML element.</li>\n<li><strong><code>onkeydown</code></strong>: The user presses a keyboard key.</li>\n<li><strong><code>onload</code></strong>: The browser has finished loading the page.</li>\n<li><strong><code>onsubmit</code></strong>: A form is submitted.</li>\n</ul>\n<h3>Event Handlers</h3>\n<p>You can add event handlers directly in your HTML, but the modern and recommended approach is to use JavaScript to add \"event listeners\".</p>\n<h4>1. Inline Event Handlers (Older, not recommended)</h4>\n<pre><code class=\"language-html\">&#x3C;button onclick=\"alert('You clicked me!')\">Click Me&#x3C;/button>\n</code></pre>\n<h4>2. Using <code>addEventListener()</code> (Modern, recommended)</h4>\n<p>This is the preferred way to handle events. It allows you to add multiple event listeners for the same event to a single element.</p>\n<p>First, you need to select the element in your JavaScript:</p>\n<pre><code class=\"language-javascript\">const myButton = document.getElementById(\"my-button\");\n</code></pre>\n<p>Then, you add the event listener:</p>\n<pre><code class=\"language-javascript\">myButton.addEventListener(\"click\", function() {\n  console.log(\"Button was clicked!\");\n  // You can run any code here\n});\n\nmyButton.addEventListener(\"mouseover\", function() {\n  myButton.style.backgroundColor = \"lightgray\";\n});\n\nmyButton.addEventListener(\"mouseout\", function() {\n    myButton.style.backgroundColor = \"\"; // Revert to original style\n});\n</code></pre>\n<p>This separates your HTML structure from your JavaScript logic, making your code cleaner and easier to maintain. Event handling is the key to creating interactive and dynamic web pages.</p>"
        },
        "_id": "tutorials/javascript/events.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/events.md",
          "sourceFileName": "events.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/events"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-events",
        "language": "javascript"
      },
      "documentHash": "1754563339816",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/features-of-javascript.md": {
      "document": {
        "title": "Features of JavaScript",
        "slug": "features-of-javascript",
        "order": 2,
        "description": "An overview of the core features that make JavaScript a powerful and popular language for web development.",
        "category": "JavaScript Basics",
        "body": {
          "raw": "\n## What is JavaScript?\n\nJavaScript is a programming language that lets developers create interactive web pages. It's a high-level, interpreted language that is a cornerstone technology of the World Wide Web, alongside HTML and CSS.\n\nJavaScript is one of the most popular programming languages, which includes several features when it comes to web development. Some of the features are lightweight, dynamic, functional, and interpreted.\n\nLet's discuss some important features of JavaScript:\n\n1.  **Lightweight Scripting Language**: JavaScript is lightweight because it is designed for client-side execution in the browser. This makes it fast and efficient for enhancing user interfaces.\n2.  **Dynamic Typing**: Variables in JavaScript are not tied to a specific type. You can reassign variables to different types at any time.\n3.  **Functional Style**: JavaScript supports functional programming paradigms, treating functions as first-class citizens. You can pass functions as arguments, return them from other functions, and assign them to variables.\n4.  **Platform Independent**: JavaScript can run on any platform with a web browser, be it Windows, macOS, or Linux.\n5.  **Prototype-based Language**: JavaScript uses prototypes for inheritance instead of classes (though ES6 introduced class syntax as syntactic sugar over prototypes).\n6.  **Interpreted Language**: JavaScript code is interpreted line-by-line by the browser's engine, which means you don't need a compilation step.\n7.  **Single-Threaded**: JavaScript has a single-threaded execution model, which means it processes one task at a time. Asynchronous operations are handled by the event loop.\n8.  **Async Processing**: With features like Promises and async/await, JavaScript can handle asynchronous operations like API calls without blocking the main thread.\n9.  **Web Workers**: Allows for running scripts in background threads, enabling long-running tasks without freezing the UI.\n10. **Client-side Validation**: JavaScript is widely used to validate user input on the client-side before sending data to the server.\n11. **Backend Development**: With Node.js, JavaScript can be used to build full-stack applications.\n12. **More Control in Browser**: JavaScript gives developers extensive control over the browser and its Document Object Model (DOM).\n",
          "html": "<h2>What is JavaScript?</h2>\n<p>JavaScript is a programming language that lets developers create interactive web pages. It's a high-level, interpreted language that is a cornerstone technology of the World Wide Web, alongside HTML and CSS.</p>\n<p>JavaScript is one of the most popular programming languages, which includes several features when it comes to web development. Some of the features are lightweight, dynamic, functional, and interpreted.</p>\n<p>Let's discuss some important features of JavaScript:</p>\n<ol>\n<li><strong>Lightweight Scripting Language</strong>: JavaScript is lightweight because it is designed for client-side execution in the browser. This makes it fast and efficient for enhancing user interfaces.</li>\n<li><strong>Dynamic Typing</strong>: Variables in JavaScript are not tied to a specific type. You can reassign variables to different types at any time.</li>\n<li><strong>Functional Style</strong>: JavaScript supports functional programming paradigms, treating functions as first-class citizens. You can pass functions as arguments, return them from other functions, and assign them to variables.</li>\n<li><strong>Platform Independent</strong>: JavaScript can run on any platform with a web browser, be it Windows, macOS, or Linux.</li>\n<li><strong>Prototype-based Language</strong>: JavaScript uses prototypes for inheritance instead of classes (though ES6 introduced class syntax as syntactic sugar over prototypes).</li>\n<li><strong>Interpreted Language</strong>: JavaScript code is interpreted line-by-line by the browser's engine, which means you don't need a compilation step.</li>\n<li><strong>Single-Threaded</strong>: JavaScript has a single-threaded execution model, which means it processes one task at a time. Asynchronous operations are handled by the event loop.</li>\n<li><strong>Async Processing</strong>: With features like Promises and async/await, JavaScript can handle asynchronous operations like API calls without blocking the main thread.</li>\n<li><strong>Web Workers</strong>: Allows for running scripts in background threads, enabling long-running tasks without freezing the UI.</li>\n<li><strong>Client-side Validation</strong>: JavaScript is widely used to validate user input on the client-side before sending data to the server.</li>\n<li><strong>Backend Development</strong>: With Node.js, JavaScript can be used to build full-stack applications.</li>\n<li><strong>More Control in Browser</strong>: JavaScript gives developers extensive control over the browser and its Document Object Model (DOM).</li>\n</ol>"
        },
        "_id": "tutorials/javascript/features-of-javascript.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/features-of-javascript.md",
          "sourceFileName": "features-of-javascript.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/features-of-javascript"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/features-of-javascript",
        "language": "javascript"
      },
      "documentHash": "1753939310761",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/functions.md": {
      "document": {
        "title": "JavaScript Functions",
        "slug": "javascript-functions",
        "order": 6,
        "description": "Learn how to define and use functions to create reusable blocks of code in JavaScript.",
        "category": "JS Functions",
        "body": {
          "raw": "\n## JavaScript Functions\n\nA JavaScript function is a block of code designed to perform a particular task. A function is executed when \"something\" invokes it (calls it).\n\n### Function Declarations\nThis is the most common way to define a function.\n\n```javascript\nfunction greet(name) {\n  return \"Hello, \" + name + \"!\";\n}\n\nconsole.log(greet(\"World\")); // Output: Hello, World!\n```\n\n### Function Expressions\nA function can also be defined as an expression, which can be stored in a variable.\n\n```javascript\nconst farewell = function(name) {\n  return \"Goodbye, \" + name + \"!\";\n};\n\nconsole.log(farewell(\"World\")); // Output: Goodbye, World!\n```\n\n### Arrow Functions (ES6)\nArrow functions provide a more concise syntax for writing function expressions.\n\n```javascript\nconst add = (a, b) => {\n  return a + b;\n};\n\n// For single-expression functions, you can omit the braces and return keyword\nconst subtract = (a, b) => a - b;\n\nconsole.log(add(5, 3));       // Output: 8\nconsole.log(subtract(10, 4)); // Output: 6\n```\n\n### Parameters and Arguments\n- **Parameters** are the names listed in the function definition.\n- **Arguments** are the real values passed to the function when it is invoked.\n\n### Return Value\nThe `return` statement stops the execution of a function and returns a value. If `return` is omitted, the function returns `undefined`.\n",
          "html": "<h2>JavaScript Functions</h2>\n<p>A JavaScript function is a block of code designed to perform a particular task. A function is executed when \"something\" invokes it (calls it).</p>\n<h3>Function Declarations</h3>\n<p>This is the most common way to define a function.</p>\n<pre><code class=\"language-javascript\">function greet(name) {\n  return \"Hello, \" + name + \"!\";\n}\n\nconsole.log(greet(\"World\")); // Output: Hello, World!\n</code></pre>\n<h3>Function Expressions</h3>\n<p>A function can also be defined as an expression, which can be stored in a variable.</p>\n<pre><code class=\"language-javascript\">const farewell = function(name) {\n  return \"Goodbye, \" + name + \"!\";\n};\n\nconsole.log(farewell(\"World\")); // Output: Goodbye, World!\n</code></pre>\n<h3>Arrow Functions (ES6)</h3>\n<p>Arrow functions provide a more concise syntax for writing function expressions.</p>\n<pre><code class=\"language-javascript\">const add = (a, b) => {\n  return a + b;\n};\n\n// For single-expression functions, you can omit the braces and return keyword\nconst subtract = (a, b) => a - b;\n\nconsole.log(add(5, 3));       // Output: 8\nconsole.log(subtract(10, 4)); // Output: 6\n</code></pre>\n<h3>Parameters and Arguments</h3>\n<ul>\n<li><strong>Parameters</strong> are the names listed in the function definition.</li>\n<li><strong>Arguments</strong> are the real values passed to the function when it is invoked.</li>\n</ul>\n<h3>Return Value</h3>\n<p>The <code>return</code> statement stops the execution of a function and returns a value. If <code>return</code> is omitted, the function returns <code>undefined</code>.</p>"
        },
        "_id": "tutorials/javascript/functions.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/functions.md",
          "sourceFileName": "functions.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/functions"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-functions",
        "language": "javascript"
      },
      "documentHash": "1753939310781",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/hello-world.md": {
      "document": {
        "title": "Hello World Program in JavaScript",
        "slug": "hello-world-in-javascript",
        "order": 3,
        "description": "Learn how to write your first 'Hello, World!' program in JavaScript using the browser console, alerts, and direct HTML manipulation.",
        "category": "JavaScript Basics",
        "body": {
          "raw": "\n## \"Hello, World!\" in JavaScript\n\nThe \"Hello, World!\" program is a classic first step in learning any new programming language. It's a simple program that outputs the text `Hello, World!` to demonstrate the basic syntax. In JavaScript, there are several ways to do this, especially in the context of a web browser.\n\n### 1. Using `console.log()`\n\nThe most common method for developers to see output from their code is by printing it to the web console. This is essential for debugging and understanding what your code is doing.\n\n**To see the output:**\n1.  Open an HTML file containing this script in a web browser.\n2.  Right-click on the page and select \"Inspect\" or \"Inspect Element\".\n3.  Click on the \"Console\" tab.\n\n```javascript\n// This line prints \"Hello, World!\" to the browser's developer console.\nconsole.log(\"Hello, World!\");\n```\n\n### 2. Displaying an Alert Box\n\nThe `alert()` function creates a pop-up dialog box in the browser window. While it's simple, it's not often used in modern applications because it can be disruptive to the user experience.\n\n```javascript\n// This will create a pop-up alert with the message.\nalert(\"Hello, World!\");\n```\n\n### 3. Writing Directly to the HTML Document\n\nYou can also write content directly into the HTML body using `document.write()`. This method is generally avoided in modern web development because it can overwrite the entire page if used after the page has finished loading.\n\n```javascript\n// This will write \"Hello, World!\" directly into the HTML body where the script is placed.\ndocument.write(\"Hello, World!\");\n```\n\nThis is the foundational step to start your journey with JavaScript development.",
          "html": "<h2>\"Hello, World!\" in JavaScript</h2>\n<p>The \"Hello, World!\" program is a classic first step in learning any new programming language. It's a simple program that outputs the text <code>Hello, World!</code> to demonstrate the basic syntax. In JavaScript, there are several ways to do this, especially in the context of a web browser.</p>\n<h3>1. Using <code>console.log()</code></h3>\n<p>The most common method for developers to see output from their code is by printing it to the web console. This is essential for debugging and understanding what your code is doing.</p>\n<p><strong>To see the output:</strong></p>\n<ol>\n<li>Open an HTML file containing this script in a web browser.</li>\n<li>Right-click on the page and select \"Inspect\" or \"Inspect Element\".</li>\n<li>Click on the \"Console\" tab.</li>\n</ol>\n<pre><code class=\"language-javascript\">// This line prints \"Hello, World!\" to the browser's developer console.\nconsole.log(\"Hello, World!\");\n</code></pre>\n<h3>2. Displaying an Alert Box</h3>\n<p>The <code>alert()</code> function creates a pop-up dialog box in the browser window. While it's simple, it's not often used in modern applications because it can be disruptive to the user experience.</p>\n<pre><code class=\"language-javascript\">// This will create a pop-up alert with the message.\nalert(\"Hello, World!\");\n</code></pre>\n<h3>3. Writing Directly to the HTML Document</h3>\n<p>You can also write content directly into the HTML body using <code>document.write()</code>. This method is generally avoided in modern web development because it can overwrite the entire page if used after the page has finished loading.</p>\n<pre><code class=\"language-javascript\">// This will write \"Hello, World!\" directly into the HTML body where the script is placed.\ndocument.write(\"Hello, World!\");\n</code></pre>\n<p>This is the foundational step to start your journey with JavaScript development.</p>"
        },
        "_id": "tutorials/javascript/hello-world.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/hello-world.md",
          "sourceFileName": "hello-world.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/hello-world"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/hello-world-in-javascript",
        "language": "javascript"
      },
      "documentHash": "1754563339678",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/javascript-enabling.md": {
      "document": {
        "title": "JavaScript - Enabling",
        "slug": "javascript-enabling",
        "order": 4,
        "description": "How to ensure JavaScript is enabled in your web browser.",
        "category": "JavaScript Basics",
        "body": {
          "raw": "\n## Enabling JavaScript in Your Browser\n\nJavaScript is a standard technology of the web and is enabled by default in all modern web browsers. If for some reason JavaScript has been disabled, your web browsing experience will be significantly limited, as most modern websites rely heavily on it for interactivity.\n\n### Why You Need JavaScript Enabled\n-   **Interactive Forms**: Validating input, showing/hiding fields, and submitting data without a full page reload.\n-   **Dynamic Content**: Loading new content (like blog posts or social media feeds) without refreshing the page.\n-   **Animations & Effects**: Creating smooth transitions, pop-up modals, and other visual effects.\n-   **User Experience**: Powering features like interactive maps, drag-and-drop interfaces, and single-page applications (SPAs).\n\n### How to Check and Enable JavaScript\n\nAll major browsers have JavaScript enabled by default. If you suspect it's disabled, you can check your browser's settings.\n\n#### Google Chrome\n1.  Go to `Settings`.\n2.  Click on `Privacy and security`.\n3.  Go to `Site settings`.\n4.  Under `Content`, click on `JavaScript`.\n5.  Make sure `Sites can use Javascript` is selected.\n\n#### Mozilla Firefox\n1.  Type `about:config` in the address bar and press Enter.\n2.  Accept the warning message.\n3.  Search for `javascript.enabled`.\n4.  Ensure that the value is `true`. If it's `false`, double-click it to toggle it to `true`.\n\n#### Microsoft Edge\n1.  Go to `Settings`.\n2.  Click on `Cookies and site permissions`.\n3.  Scroll down and click on `JavaScript`.\n4.  Make sure the `Allowed (recommended)` toggle is turned on.\n\nIf you are a developer, you don't need to do anything to \"enable\" JavaScript for your users beyond writing the code itself. The user's browser is responsible for executing it. The `<script>` tag in an HTML file tells the browser where to find and run the JavaScript code.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My Page</title>\n</head>\n<body>\n\n    <h1>My Web Page</h1>\n\n    <!-- The browser will execute the code in this script file -->\n    <script src=\"my_script.js\"></script>\n\n</body>\n</html>\n```\n",
          "html": "<h2>Enabling JavaScript in Your Browser</h2>\n<p>JavaScript is a standard technology of the web and is enabled by default in all modern web browsers. If for some reason JavaScript has been disabled, your web browsing experience will be significantly limited, as most modern websites rely heavily on it for interactivity.</p>\n<h3>Why You Need JavaScript Enabled</h3>\n<ul>\n<li><strong>Interactive Forms</strong>: Validating input, showing/hiding fields, and submitting data without a full page reload.</li>\n<li><strong>Dynamic Content</strong>: Loading new content (like blog posts or social media feeds) without refreshing the page.</li>\n<li><strong>Animations &#x26; Effects</strong>: Creating smooth transitions, pop-up modals, and other visual effects.</li>\n<li><strong>User Experience</strong>: Powering features like interactive maps, drag-and-drop interfaces, and single-page applications (SPAs).</li>\n</ul>\n<h3>How to Check and Enable JavaScript</h3>\n<p>All major browsers have JavaScript enabled by default. If you suspect it's disabled, you can check your browser's settings.</p>\n<h4>Google Chrome</h4>\n<ol>\n<li>Go to <code>Settings</code>.</li>\n<li>Click on <code>Privacy and security</code>.</li>\n<li>Go to <code>Site settings</code>.</li>\n<li>Under <code>Content</code>, click on <code>JavaScript</code>.</li>\n<li>Make sure <code>Sites can use Javascript</code> is selected.</li>\n</ol>\n<h4>Mozilla Firefox</h4>\n<ol>\n<li>Type <code>about:config</code> in the address bar and press Enter.</li>\n<li>Accept the warning message.</li>\n<li>Search for <code>javascript.enabled</code>.</li>\n<li>Ensure that the value is <code>true</code>. If it's <code>false</code>, double-click it to toggle it to <code>true</code>.</li>\n</ol>\n<h4>Microsoft Edge</h4>\n<ol>\n<li>Go to <code>Settings</code>.</li>\n<li>Click on <code>Cookies and site permissions</code>.</li>\n<li>Scroll down and click on <code>JavaScript</code>.</li>\n<li>Make sure the <code>Allowed (recommended)</code> toggle is turned on.</li>\n</ol>\n<p>If you are a developer, you don't need to do anything to \"enable\" JavaScript for your users beyond writing the code itself. The user's browser is responsible for executing it. The <code>&#x3C;script></code> tag in an HTML file tells the browser where to find and run the JavaScript code.</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;title>My Page&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n    &#x3C;h1>My Web Page&#x3C;/h1>\n\n    &#x3C;!-- The browser will execute the code in this script file -->\n    &#x3C;script src=\"my_script.js\">&#x3C;/script>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>"
        },
        "_id": "tutorials/javascript/javascript-enabling.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/javascript-enabling.md",
          "sourceFileName": "javascript-enabling.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/javascript-enabling"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-enabling",
        "language": "javascript"
      },
      "documentHash": "1753939310803",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/javascript-overview.md": {
      "document": {
        "title": "JavaScript - Overview",
        "slug": "javascript-overview",
        "order": 2,
        "description": "A high-level overview of JavaScript, its history, and its role in modern web development.",
        "category": "JavaScript Basics",
        "body": {
          "raw": "\n## What is JavaScript?\n\nJavaScript is a high-level, interpreted programming language that is a cornerstone technology of the World Wide Web, alongside HTML and CSS. While it was initially created to make web pages interactive, it has since evolved into a versatile language used for both front-end (client-side) and back-end (server-side) development.\n\n### The \"Big Three\" of Web Development\n-   **HTML (HyperText Markup Language)**: Provides the basic structure and content of web pages. Think of it as the skeleton.\n-   **CSS (Cascading Style Sheets)**: Used to control the presentation, formatting, and layout of the content. Think of it as the clothing and appearance.\n-   **JavaScript**: Used to control the behavior of the web page, creating dynamic and interactive experiences. Think of it as the brain and nervous system.\n\n### How JavaScript Works\nJavaScript code is embedded in or included from HTML pages and is executed by the JavaScript engine in the user's web browser. This client-side execution allows for immediate feedback and manipulation of the page content without needing to communicate with a server for every action.\n\n### Beyond the Browser: Node.js\nIn 2009, the creation of **Node.js** allowed JavaScript to be run outside of the browser, on servers. This opened the door for full-stack development using a single language, greatly expanding JavaScript's use cases to include:\n-   Building web servers and APIs.\n-   Creating command-line tools.\n-   Developing desktop applications.\n-   Powering IoT devices.\n\nJavaScript is an essential skill for any modern web developer and serves as the foundation for countless frameworks, libraries, and tools that power the web today.\n",
          "html": "<h2>What is JavaScript?</h2>\n<p>JavaScript is a high-level, interpreted programming language that is a cornerstone technology of the World Wide Web, alongside HTML and CSS. While it was initially created to make web pages interactive, it has since evolved into a versatile language used for both front-end (client-side) and back-end (server-side) development.</p>\n<h3>The \"Big Three\" of Web Development</h3>\n<ul>\n<li><strong>HTML (HyperText Markup Language)</strong>: Provides the basic structure and content of web pages. Think of it as the skeleton.</li>\n<li><strong>CSS (Cascading Style Sheets)</strong>: Used to control the presentation, formatting, and layout of the content. Think of it as the clothing and appearance.</li>\n<li><strong>JavaScript</strong>: Used to control the behavior of the web page, creating dynamic and interactive experiences. Think of it as the brain and nervous system.</li>\n</ul>\n<h3>How JavaScript Works</h3>\n<p>JavaScript code is embedded in or included from HTML pages and is executed by the JavaScript engine in the user's web browser. This client-side execution allows for immediate feedback and manipulation of the page content without needing to communicate with a server for every action.</p>\n<h3>Beyond the Browser: Node.js</h3>\n<p>In 2009, the creation of <strong>Node.js</strong> allowed JavaScript to be run outside of the browser, on servers. This opened the door for full-stack development using a single language, greatly expanding JavaScript's use cases to include:</p>\n<ul>\n<li>Building web servers and APIs.</li>\n<li>Creating command-line tools.</li>\n<li>Developing desktop applications.</li>\n<li>Powering IoT devices.</li>\n</ul>\n<p>JavaScript is an essential skill for any modern web developer and serves as the foundation for countless frameworks, libraries, and tools that power the web today.</p>"
        },
        "_id": "tutorials/javascript/javascript-overview.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/javascript-overview.md",
          "sourceFileName": "javascript-overview.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/javascript-overview"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-overview",
        "language": "javascript"
      },
      "documentHash": "1753939310793",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/javascript-placement.md": {
      "document": {
        "title": "JavaScript - Placement",
        "slug": "javascript-placement",
        "order": 6,
        "description": "Learn where to place your JavaScript code within an HTML document for optimal performance and behavior.",
        "category": "JavaScript Basics",
        "body": {
          "raw": "\n## Where to Place JavaScript Code\n\nYou can place JavaScript code within an HTML document using the `<script>` tag. There are three main ways to include JavaScript, and the placement can affect your page's performance and behavior.\n\n### 1. Internal JavaScript (in the `<head>`)\n\nYou can place your JavaScript code directly inside the `<head>` section of your HTML file.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>JS in Head</title>\n    <script>\n        function sayHello() {\n            alert('Hello, World!');\n        }\n    </script>\n</head>\n<body>\n    <button onclick=\"sayHello()\">Click Me</button>\n</body>\n</html>\n```\n**Behavior**: The browser will parse and execute the JavaScript code before it starts rendering the body of the page. This can be problematic if your script is large, as it will block the page from displaying until the script is fully loaded and executed. This placement is generally discouraged for scripts that are not critical to the initial page paint.\n\n### 2. Internal JavaScript (in the `<body>`)\n\nPlacing scripts at the end of the `<body>` section is a common practice.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>JS in Body</title>\n</head>\n<body>\n\n    <h1>My Web Page</h1>\n    <p id=\"demo\"></p>\n\n    <script>\n        document.getElementById(\"demo\").innerHTML = \"Hello from JavaScript!\";\n    </script>\n\n</body>\n</html>\n```\n**Behavior**: The browser renders the HTML content first and then executes the JavaScript. This improves the perceived page load speed because users can see the page content before the scripts have finished running. It also ensures that all HTML elements are available in the DOM when the script tries to access them.\n\n### 3. External JavaScript (Recommended)\n\nThe best practice is to place your JavaScript in a separate `.js` file and link to it. This keeps your HTML clean and allows the browser to cache the script file.\n\n**`my_script.js`**:\n```javascript\nfunction changeText() {\n    document.getElementById(\"header\").innerHTML = \"Welcome to External JS!\";\n}\n```\n\n**`index.html`**:\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>External JS</title>\n</head>\n<body>\n\n    <h1 id=\"header\">Hello!</h1>\n    <button onclick=\"changeText()\">Change Text</button>\n\n    <!-- Linking the external script at the end of the body -->\n    <script src=\"my_script.js\"></script>\n\n</body>\n</html>\n```\n**Placement**: Like internal scripts, external scripts can be linked in the `<head>` or `<body>`. For best performance, it is almost always recommended to link them just before the closing `</body>` tag.\n\n#### Using `async` and `defer`\nWhen linking external scripts in the `<head>`, you can use the `async` and `defer` attributes to control how they are loaded and executed, preventing them from blocking page rendering.\n-   `<script defer src=\"script.js\">`: The script is downloaded in parallel with page parsing and executed after the parser has completed. Scripts with `defer` execute in the order they appear in the HTML.\n-   `<script async src=\"script.js\">`: The script is downloaded in parallel and executed as soon as it's available, which can be before the HTML parsing is complete. This can block rendering and the order of execution is not guaranteed.\n",
          "html": "<h2>Where to Place JavaScript Code</h2>\n<p>You can place JavaScript code within an HTML document using the <code>&#x3C;script></code> tag. There are three main ways to include JavaScript, and the placement can affect your page's performance and behavior.</p>\n<h3>1. Internal JavaScript (in the <code>&#x3C;head></code>)</h3>\n<p>You can place your JavaScript code directly inside the <code>&#x3C;head></code> section of your HTML file.</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;title>JS in Head&#x3C;/title>\n    &#x3C;script>\n        function sayHello() {\n            alert('Hello, World!');\n        }\n    &#x3C;/script>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;button onclick=\"sayHello()\">Click Me&#x3C;/button>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><strong>Behavior</strong>: The browser will parse and execute the JavaScript code before it starts rendering the body of the page. This can be problematic if your script is large, as it will block the page from displaying until the script is fully loaded and executed. This placement is generally discouraged for scripts that are not critical to the initial page paint.</p>\n<h3>2. Internal JavaScript (in the <code>&#x3C;body></code>)</h3>\n<p>Placing scripts at the end of the <code>&#x3C;body></code> section is a common practice.</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;title>JS in Body&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n    &#x3C;h1>My Web Page&#x3C;/h1>\n    &#x3C;p id=\"demo\">&#x3C;/p>\n\n    &#x3C;script>\n        document.getElementById(\"demo\").innerHTML = \"Hello from JavaScript!\";\n    &#x3C;/script>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><strong>Behavior</strong>: The browser renders the HTML content first and then executes the JavaScript. This improves the perceived page load speed because users can see the page content before the scripts have finished running. It also ensures that all HTML elements are available in the DOM when the script tries to access them.</p>\n<h3>3. External JavaScript (Recommended)</h3>\n<p>The best practice is to place your JavaScript in a separate <code>.js</code> file and link to it. This keeps your HTML clean and allows the browser to cache the script file.</p>\n<p><strong><code>my_script.js</code></strong>:</p>\n<pre><code class=\"language-javascript\">function changeText() {\n    document.getElementById(\"header\").innerHTML = \"Welcome to External JS!\";\n}\n</code></pre>\n<p><strong><code>index.html</code></strong>:</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;title>External JS&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n    &#x3C;h1 id=\"header\">Hello!&#x3C;/h1>\n    &#x3C;button onclick=\"changeText()\">Change Text&#x3C;/button>\n\n    &#x3C;!-- Linking the external script at the end of the body -->\n    &#x3C;script src=\"my_script.js\">&#x3C;/script>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><strong>Placement</strong>: Like internal scripts, external scripts can be linked in the <code>&#x3C;head></code> or <code>&#x3C;body></code>. For best performance, it is almost always recommended to link them just before the closing <code>&#x3C;/body></code> tag.</p>\n<h4>Using <code>async</code> and <code>defer</code></h4>\n<p>When linking external scripts in the <code>&#x3C;head></code>, you can use the <code>async</code> and <code>defer</code> attributes to control how they are loaded and executed, preventing them from blocking page rendering.</p>\n<ul>\n<li><code>&#x3C;script defer src=\"script.js\"></code>: The script is downloaded in parallel with page parsing and executed after the parser has completed. Scripts with <code>defer</code> execute in the order they appear in the HTML.</li>\n<li><code>&#x3C;script async src=\"script.js\"></code>: The script is downloaded in parallel and executed as soon as it's available, which can be before the HTML parsing is complete. This can block rendering and the order of execution is not guaranteed.</li>\n</ul>"
        },
        "_id": "tutorials/javascript/javascript-placement.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/javascript-placement.md",
          "sourceFileName": "javascript-placement.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/javascript-placement"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-placement",
        "language": "javascript"
      },
      "documentHash": "1753939310796",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/javascript-syntax.md": {
      "document": {
        "title": "JavaScript - Syntax",
        "slug": "javascript-syntax",
        "order": 7,
        "description": "Understand the basic syntax rules of JavaScript programming.",
        "category": "JavaScript Basics",
        "body": {
          "raw": "\n## JavaScript Syntax\n\nJavaScript syntax is the set of rules that define a correctly structured JavaScript program.\n\n### Basic Rules\n\n- **Case-Sensitive**: JavaScript is case-sensitive. `myVariable` and `myvariable` are two different variables.\n- **Semicolons**: Semicolons (`;`) are used to separate statements. They are often optional due to Automatic Semicolon Insertion (ASI), but it's a good practice to use them to avoid ambiguity.\n- **Whitespace**: JavaScript ignores extra spaces. You can add white space to your script to make it more readable.\n\n### Literals\nLiterals are fixed values in a program's source code.\n\n- **Numbers**: Can be integers or floating-point numbers. `100`, `3.14`.\n- **Strings**: Can be enclosed in single (`'`) or double (`\"`) quotes. `'Hello'`, `\"World\"`.\n- **Booleans**: `true` or `false`.\n- **Objects**: `{ key: 'value' }`.\n- **Arrays**: `[1, 2, 3]`.\n\n### Variables\nVariables are containers for storing data values. In JavaScript, you can use `var`, `let`, or `const`.\n\n```javascript\nlet x;       // Declare a variable\nx = 5;       // Assign a value\nlet y = 10;  // Declare and assign\nconst PI = 3.14; // Declare a constant\n```\n\n### Operators\nJavaScript uses arithmetic operators (`+`, `-`, `*`, `/`), assignment operators (`=`), and comparison operators (`==`, `>`).\n\n```javascript\nlet sum = 5 + 10; // 15\n```\n\n### Comments\nComments are used to explain code and are ignored by the interpreter.\n\n```javascript\n// This is a single-line comment\n\n/*\nThis is a\nmulti-line comment.\n*/\n```\n\nUnderstanding these basic syntax rules is the first step to writing JavaScript code.\n",
          "html": "<h2>JavaScript Syntax</h2>\n<p>JavaScript syntax is the set of rules that define a correctly structured JavaScript program.</p>\n<h3>Basic Rules</h3>\n<ul>\n<li><strong>Case-Sensitive</strong>: JavaScript is case-sensitive. <code>myVariable</code> and <code>myvariable</code> are two different variables.</li>\n<li><strong>Semicolons</strong>: Semicolons (<code>;</code>) are used to separate statements. They are often optional due to Automatic Semicolon Insertion (ASI), but it's a good practice to use them to avoid ambiguity.</li>\n<li><strong>Whitespace</strong>: JavaScript ignores extra spaces. You can add white space to your script to make it more readable.</li>\n</ul>\n<h3>Literals</h3>\n<p>Literals are fixed values in a program's source code.</p>\n<ul>\n<li><strong>Numbers</strong>: Can be integers or floating-point numbers. <code>100</code>, <code>3.14</code>.</li>\n<li><strong>Strings</strong>: Can be enclosed in single (<code>'</code>) or double (<code>\"</code>) quotes. <code>'Hello'</code>, <code>\"World\"</code>.</li>\n<li><strong>Booleans</strong>: <code>true</code> or <code>false</code>.</li>\n<li><strong>Objects</strong>: <code>{ key: 'value' }</code>.</li>\n<li><strong>Arrays</strong>: <code>[1, 2, 3]</code>.</li>\n</ul>\n<h3>Variables</h3>\n<p>Variables are containers for storing data values. In JavaScript, you can use <code>var</code>, <code>let</code>, or <code>const</code>.</p>\n<pre><code class=\"language-javascript\">let x;       // Declare a variable\nx = 5;       // Assign a value\nlet y = 10;  // Declare and assign\nconst PI = 3.14; // Declare a constant\n</code></pre>\n<h3>Operators</h3>\n<p>JavaScript uses arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), assignment operators (<code>=</code>), and comparison operators (<code>==</code>, <code>></code>).</p>\n<pre><code class=\"language-javascript\">let sum = 5 + 10; // 15\n</code></pre>\n<h3>Comments</h3>\n<p>Comments are used to explain code and are ignored by the interpreter.</p>\n<pre><code class=\"language-javascript\">// This is a single-line comment\n\n/*\nThis is a\nmulti-line comment.\n*/\n</code></pre>\n<p>Understanding these basic syntax rules is the first step to writing JavaScript code.</p>"
        },
        "_id": "tutorials/javascript/javascript-syntax.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/javascript-syntax.md",
          "sourceFileName": "javascript-syntax.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/javascript-syntax"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-syntax",
        "language": "javascript"
      },
      "documentHash": "1753939310799",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/let-statement.md": {
      "document": {
        "title": "JavaScript - let Statement",
        "slug": "let-statement",
        "order": 12,
        "description": "Learn how to use the let keyword to declare block-scoped variables in JavaScript.",
        "category": "JavaScript Basics",
        "body": {
          "raw": "\n## What is JavaScript let statement?\nThe JavaScript let statement is used to declare a variable. With the let statement, we can declare a variable that is block-scoped. This mean a variable declared with let is only accessible within the block of code in which it is defined.\n\nThe let keyword was introduced in the ES6 (2015) version of JavaScript. It is an alternative to the var keyword.\n\nThe main reason behind introducing the let keyword is to improve the scoping behaviors of variables and the safety of the code.\n\n## Variable Declaration with let statement\nFollowing is the syntax to declare a variable with let statement −\n\n```javascript\nlet var_name = value\n```\nLet's have a look at some examples for variable declaration with let.\n\n```javascript\nlet name = \"John\";\nlet age = 35;\nlet x = true;\n```\nUsing let statement we can declare a variable of any datatypes, e.g., numeric, string, boolean, etc.\n\n## JavaScript Block Scope vs. Function Scope\nThe scope of the variable declared with the let keyword is a block-scope. It means if you define the variable with the let keyword in the specific block, you can access the variable inside that particular block only, and if you try to access the variable outside the block, it raises an error like 'variable is not defined'.\n\n```javascript\n{\n   let x = \"John\";\n}\n//here x can't be accessed\n```\nThe var keyword has a function scope, meaning if you define the variable using the var keyword in any function block, you can access it throughout the function.\n\n```javascript\nfunction foo(){\n   if (true){\n      let x = 5\n      var y = 10\n   }\n   // here x can't be accessed while y is accessible\n}\n```\nSometimes, we require to define the variable with the same name in different blocks of one function. Conflicts may occur with the variable value if they use the var keyword.\n\n### Example\nIn the example below, we have defined the variable x using the let keyword and variable y using the var keyword. Also, we have assigned 10 and 20 values to both variables, respectively.\n\nWe defined the test() function, redeclared the x and y variables inside it, and initialized them with 50 and 100 values, respectively. We print variable values inside the function, and it prints the 50 and 100 as it gives first preference to the local variables over global variables.\n\n```html\n<html>\n<head>\n   <title> Variable declaration with let keyword </title>\n</head>\n<body>\n   <script>\n      let x = 10;\n\t  var y = 20;\n\t  function test() {\n\t     let x = 50;\n\t     var y = 100;\n\t     document.write(\"x = \" + x + \", y = \" + y + \"<br/>\");\n\t  }\n\t  test();\n   </script>\n</body>\n</html>\n```\n\n### Example\nIn the example below, we initialized the bool variable with a 'true' value. After that, we declared the variables x and y using the let and var keywords in the 'if' block.\n\nWe print the value of the x and y variable inside the 'if' block. We can't access the 'x' variable outside the 'if' block as it has blocked scope, but we can access variable y outside the 'if' block and inside the function block as it has function scope.\n\n```html\n<html>\n<head>\n   <title> Variable declaration with let keyword </title>\n</head>\n<body>\n   <script>\n      function test() {\n\t     let bool = true;\n\t\t if (bool) {\n\t\t    let x = 30;\n\n\t\t    var y = 40;\n\t\t    document.write(\"x = \" + x + \", y = \" + y + \"<br/>\");\n\t\t }\n\t\t // x can't be accessible here\n\t\t document.write(\"y = \" + y + \"<br/>\");\n\t\t}\n      test();\n   </script>\n</body>\n</html>\n```\nIn this way, the let keyword is used to improve the scoping behaviors of the code.\n\n## Redeclaring Variables in JavaScript\nYou can't redeclare the variables declared with the let keyword in the same block. However, you can declare the variables with the same name into the different blocks with the same function.\n\n### Example\nIn the example below, you can observe that variables declared with the let keyword cant be redeclared in the same block, but variables declared with the var keyword can be redeclared in the same block.\n\nThe code prints the value of the newly declared variable in the output.\n\n```html\n<html>\n<head>\n   <title> Variable redeclaring </title>\n</head>\n<body>\n   <script>\n      function test() {\n\t     if (1) {\n\t        let m = 70;\n\t\t\t// let m = 80; // redeclaration with let keyword is not\tpossible\n\t\t\tvar n = 80;\n\t\t\tvar n = 90; // redeclaration with var keyword is possible\n\t\t\tdocument.write(\"m = \" + m + \", n = \" + n);\n\t\t }\n\t  }\n      test();\n   </script>\n</body>\n</html>\n```\n\n## Variable Hoisting\nThe hoisting behaviors of JavaScript move the declaration of the variables at the top of the code. The let keyword doesn't support hoisting, but the var keyword supports the hosting.\n\n### Example\nIn the example below, you can see that we can initialize and print the value of the variable n before its declaration as it is declared using the var keyword.\n\n```html\n<html>\n<head>\n   <title> Variable hoisting </title>\n</head>\n<body>\n   <script>\n      function test() {\n         // Hoisiting is not supported by let keyword\n         // m = 100;\n         // document.write(\"m = \" + m + \"<br/>\");\n         // let m;\n         n = 50;\n         document.write(\"n = \" + n + \"<br/>\");\n         var n;\n      }\n      test();\n   </script>\n</body>\n</html>\n```\n\nYou can uncomment the code using the let keyword and check the error in the web console, as it doesn't support hoisting.\n",
          "html": "<h2>What is JavaScript let statement?</h2>\n<p>The JavaScript let statement is used to declare a variable. With the let statement, we can declare a variable that is block-scoped. This mean a variable declared with let is only accessible within the block of code in which it is defined.</p>\n<p>The let keyword was introduced in the ES6 (2015) version of JavaScript. It is an alternative to the var keyword.</p>\n<p>The main reason behind introducing the let keyword is to improve the scoping behaviors of variables and the safety of the code.</p>\n<h2>Variable Declaration with let statement</h2>\n<p>Following is the syntax to declare a variable with let statement −</p>\n<pre><code class=\"language-javascript\">let var_name = value\n</code></pre>\n<p>Let's have a look at some examples for variable declaration with let.</p>\n<pre><code class=\"language-javascript\">let name = \"John\";\nlet age = 35;\nlet x = true;\n</code></pre>\n<p>Using let statement we can declare a variable of any datatypes, e.g., numeric, string, boolean, etc.</p>\n<h2>JavaScript Block Scope vs. Function Scope</h2>\n<p>The scope of the variable declared with the let keyword is a block-scope. It means if you define the variable with the let keyword in the specific block, you can access the variable inside that particular block only, and if you try to access the variable outside the block, it raises an error like 'variable is not defined'.</p>\n<pre><code class=\"language-javascript\">{\n   let x = \"John\";\n}\n//here x can't be accessed\n</code></pre>\n<p>The var keyword has a function scope, meaning if you define the variable using the var keyword in any function block, you can access it throughout the function.</p>\n<pre><code class=\"language-javascript\">function foo(){\n   if (true){\n      let x = 5\n      var y = 10\n   }\n   // here x can't be accessed while y is accessible\n}\n</code></pre>\n<p>Sometimes, we require to define the variable with the same name in different blocks of one function. Conflicts may occur with the variable value if they use the var keyword.</p>\n<h3>Example</h3>\n<p>In the example below, we have defined the variable x using the let keyword and variable y using the var keyword. Also, we have assigned 10 and 20 values to both variables, respectively.</p>\n<p>We defined the test() function, redeclared the x and y variables inside it, and initialized them with 50 and 100 values, respectively. We print variable values inside the function, and it prints the 50 and 100 as it gives first preference to the local variables over global variables.</p>\n<pre><code class=\"language-html\">&#x3C;html>\n&#x3C;head>\n   &#x3C;title> Variable declaration with let keyword &#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n   &#x3C;script>\n      let x = 10;\n\t  var y = 20;\n\t  function test() {\n\t     let x = 50;\n\t     var y = 100;\n\t     document.write(\"x = \" + x + \", y = \" + y + \"&#x3C;br/>\");\n\t  }\n\t  test();\n   &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h3>Example</h3>\n<p>In the example below, we initialized the bool variable with a 'true' value. After that, we declared the variables x and y using the let and var keywords in the 'if' block.</p>\n<p>We print the value of the x and y variable inside the 'if' block. We can't access the 'x' variable outside the 'if' block as it has blocked scope, but we can access variable y outside the 'if' block and inside the function block as it has function scope.</p>\n<pre><code class=\"language-html\">&#x3C;html>\n&#x3C;head>\n   &#x3C;title> Variable declaration with let keyword &#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n   &#x3C;script>\n      function test() {\n\t     let bool = true;\n\t\t if (bool) {\n\t\t    let x = 30;\n\n\t\t    var y = 40;\n\t\t    document.write(\"x = \" + x + \", y = \" + y + \"&#x3C;br/>\");\n\t\t }\n\t\t // x can't be accessible here\n\t\t document.write(\"y = \" + y + \"&#x3C;br/>\");\n\t\t}\n      test();\n   &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>In this way, the let keyword is used to improve the scoping behaviors of the code.</p>\n<h2>Redeclaring Variables in JavaScript</h2>\n<p>You can't redeclare the variables declared with the let keyword in the same block. However, you can declare the variables with the same name into the different blocks with the same function.</p>\n<h3>Example</h3>\n<p>In the example below, you can observe that variables declared with the let keyword cant be redeclared in the same block, but variables declared with the var keyword can be redeclared in the same block.</p>\n<p>The code prints the value of the newly declared variable in the output.</p>\n<pre><code class=\"language-html\">&#x3C;html>\n&#x3C;head>\n   &#x3C;title> Variable redeclaring &#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n   &#x3C;script>\n      function test() {\n\t     if (1) {\n\t        let m = 70;\n\t\t\t// let m = 80; // redeclaration with let keyword is not\tpossible\n\t\t\tvar n = 80;\n\t\t\tvar n = 90; // redeclaration with var keyword is possible\n\t\t\tdocument.write(\"m = \" + m + \", n = \" + n);\n\t\t }\n\t  }\n      test();\n   &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h2>Variable Hoisting</h2>\n<p>The hoisting behaviors of JavaScript move the declaration of the variables at the top of the code. The let keyword doesn't support hoisting, but the var keyword supports the hosting.</p>\n<h3>Example</h3>\n<p>In the example below, you can see that we can initialize and print the value of the variable n before its declaration as it is declared using the var keyword.</p>\n<pre><code class=\"language-html\">&#x3C;html>\n&#x3C;head>\n   &#x3C;title> Variable hoisting &#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n   &#x3C;script>\n      function test() {\n         // Hoisiting is not supported by let keyword\n         // m = 100;\n         // document.write(\"m = \" + m + \"&#x3C;br/>\");\n         // let m;\n         n = 50;\n         document.write(\"n = \" + n + \"&#x3C;br/>\");\n         var n;\n      }\n      test();\n   &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>You can uncomment the code using the let keyword and check the error in the web console, as it doesn't support hoisting.</p>"
        },
        "_id": "tutorials/javascript/let-statement.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/let-statement.md",
          "sourceFileName": "let-statement.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/let-statement"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/let-statement",
        "language": "javascript"
      },
      "documentHash": "1753939310785",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/loops.md": {
      "document": {
        "title": "JavaScript Loops",
        "slug": "javascript-loops",
        "order": 5,
        "description": "Learn how to repeat actions using different types of loops in JavaScript.",
        "category": "JS Control Flow",
        "body": {
          "raw": "\n## JavaScript Loops\n\nLoops are handy if you want to run the same code over and over again, each time with a different value.\n\n### The `for` Loop\nThe `for` loop is often the tool you'll use when you want to iterate over a block of code a certain number of times.\n\n```javascript\nfor (let i = 0; i < 5; i++) {\n  console.log(\"The number is \" + i);\n}\n// This will print numbers 0 through 4.\n```\n\n### The `for...in` Loop\nThe `for...in` statement iterates over the properties of an object.\n\n```javascript\nconst person = {fname:\"John\", lname:\"Doe\", age:25};\n\nfor (let key in person) {\n  console.log(key + \": \" + person[key]);\n}\n// Prints:\n// fname: John\n// lname: Doe\n// age: 25\n```\n\n### The `for...of` Loop\nThe `for...of` statement iterates over the values of an iterable object (like an Array, String, Map, etc.).\n\n```javascript\nconst colors = [\"red\", \"green\", \"blue\"];\n\nfor (let color of colors) {\n  console.log(color);\n}\n// Prints:\n// red\n// green\n// blue\n```\n\n### The `while` Loop\nThe `while` loop loops through a block of code as long as a specified condition is true.\n\n```javascript\nlet i = 0;\nwhile (i < 5) {\n  console.log(\"The number is \" + i);\n  i++;\n}\n```\n\n### The `do...while` Loop\nThe `do...while` loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\n\n```javascript\nlet i = 0;\ndo {\n  console.log(\"The number is \" + i);\n  i++;\n}\nwhile (i < 5);\n```\n",
          "html": "<h2>JavaScript Loops</h2>\n<p>Loops are handy if you want to run the same code over and over again, each time with a different value.</p>\n<h3>The <code>for</code> Loop</h3>\n<p>The <code>for</code> loop is often the tool you'll use when you want to iterate over a block of code a certain number of times.</p>\n<pre><code class=\"language-javascript\">for (let i = 0; i &#x3C; 5; i++) {\n  console.log(\"The number is \" + i);\n}\n// This will print numbers 0 through 4.\n</code></pre>\n<h3>The <code>for...in</code> Loop</h3>\n<p>The <code>for...in</code> statement iterates over the properties of an object.</p>\n<pre><code class=\"language-javascript\">const person = {fname:\"John\", lname:\"Doe\", age:25};\n\nfor (let key in person) {\n  console.log(key + \": \" + person[key]);\n}\n// Prints:\n// fname: John\n// lname: Doe\n// age: 25\n</code></pre>\n<h3>The <code>for...of</code> Loop</h3>\n<p>The <code>for...of</code> statement iterates over the values of an iterable object (like an Array, String, Map, etc.).</p>\n<pre><code class=\"language-javascript\">const colors = [\"red\", \"green\", \"blue\"];\n\nfor (let color of colors) {\n  console.log(color);\n}\n// Prints:\n// red\n// green\n// blue\n</code></pre>\n<h3>The <code>while</code> Loop</h3>\n<p>The <code>while</code> loop loops through a block of code as long as a specified condition is true.</p>\n<pre><code class=\"language-javascript\">let i = 0;\nwhile (i &#x3C; 5) {\n  console.log(\"The number is \" + i);\n  i++;\n}\n</code></pre>\n<h3>The <code>do...while</code> Loop</h3>\n<p>The <code>do...while</code> loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.</p>\n<pre><code class=\"language-javascript\">let i = 0;\ndo {\n  console.log(\"The number is \" + i);\n  i++;\n}\nwhile (i &#x3C; 5);\n</code></pre>"
        },
        "_id": "tutorials/javascript/loops.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/loops.md",
          "sourceFileName": "loops.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/loops"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-loops",
        "language": "javascript"
      },
      "documentHash": "1753939310780",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/objects.md": {
      "document": {
        "title": "JavaScript Objects",
        "slug": "javascript-objects",
        "order": 9,
        "description": "Learn how to use objects to store collections of key-value data in JavaScript.",
        "category": "JS Fundamentals",
        "body": {
          "raw": "\n## Understanding JavaScript Objects\n\nIn JavaScript, an object is a standalone entity, with properties and type. Think of an object as a collection of key-value pairs. This is a very common way to group related data and functionality.\n\n### Creating an Object\n\nThe most common way to create an object is with an object literal `{}`.\n\n```javascript\nconst person = {\n  firstName: \"Ada\",\n  lastName: \"Lovelace\",\n  age: 36,\n  isProgrammer: true,\n  greet: function() {\n    console.log(\"Hello, my name is \" + this.firstName);\n  }\n};\n```\n\nThis `person` object has properties (`firstName`, `age`) and a method (`greet`).\n\n### Accessing Properties\n\nYou can access object properties in two ways:\n\n1.  **Dot Notation**: `objectName.propertyName`\n    ```javascript\n    console.log(person.firstName); // Output: \"Ada\"\n    ```\n\n2.  **Bracket Notation**: `objectName[\"propertyName\"]`\n    ```javascript\n    console.log(person[\"lastName\"]); // Output: \"Lovelace\"\n    ```\n\nBracket notation is useful when the property name is stored in a variable.\n\n### Modifying Objects\n\nYou can add, change, or delete object properties.\n\n```javascript\n// Adding a new property\nperson.nationality = \"British\";\n\n// Changing an existing property\nperson.age = 37;\n\n// Deleting a property\ndelete person.isProgrammer;\n```\n\n### Methods\n\nA method is a function stored as a property.\n\n```javascript\nperson.greet(); // Calls the greet method, output: \"Hello, my name is Ada\"\n```\nThe `this` keyword refers to the object the method is part of.\n\nObjects are fundamental to understanding almost every aspect of JavaScript, from simple data storage to complex application architecture.",
          "html": "<h2>Understanding JavaScript Objects</h2>\n<p>In JavaScript, an object is a standalone entity, with properties and type. Think of an object as a collection of key-value pairs. This is a very common way to group related data and functionality.</p>\n<h3>Creating an Object</h3>\n<p>The most common way to create an object is with an object literal <code>{}</code>.</p>\n<pre><code class=\"language-javascript\">const person = {\n  firstName: \"Ada\",\n  lastName: \"Lovelace\",\n  age: 36,\n  isProgrammer: true,\n  greet: function() {\n    console.log(\"Hello, my name is \" + this.firstName);\n  }\n};\n</code></pre>\n<p>This <code>person</code> object has properties (<code>firstName</code>, <code>age</code>) and a method (<code>greet</code>).</p>\n<h3>Accessing Properties</h3>\n<p>You can access object properties in two ways:</p>\n<ol>\n<li>\n<p><strong>Dot Notation</strong>: <code>objectName.propertyName</code></p>\n<pre><code class=\"language-javascript\">console.log(person.firstName); // Output: \"Ada\"\n</code></pre>\n</li>\n<li>\n<p><strong>Bracket Notation</strong>: <code>objectName[\"propertyName\"]</code></p>\n<pre><code class=\"language-javascript\">console.log(person[\"lastName\"]); // Output: \"Lovelace\"\n</code></pre>\n</li>\n</ol>\n<p>Bracket notation is useful when the property name is stored in a variable.</p>\n<h3>Modifying Objects</h3>\n<p>You can add, change, or delete object properties.</p>\n<pre><code class=\"language-javascript\">// Adding a new property\nperson.nationality = \"British\";\n\n// Changing an existing property\nperson.age = 37;\n\n// Deleting a property\ndelete person.isProgrammer;\n</code></pre>\n<h3>Methods</h3>\n<p>A method is a function stored as a property.</p>\n<pre><code class=\"language-javascript\">person.greet(); // Calls the greet method, output: \"Hello, my name is Ada\"\n</code></pre>\n<p>The <code>this</code> keyword refers to the object the method is part of.</p>\n<p>Objects are fundamental to understanding almost every aspect of JavaScript, from simple data storage to complex application architecture.</p>"
        },
        "_id": "tutorials/javascript/objects.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/objects.md",
          "sourceFileName": "objects.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/objects"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-objects",
        "language": "javascript"
      },
      "documentHash": "1754563339765",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/operators.md": {
      "document": {
        "title": "JavaScript Operators",
        "slug": "javascript-operators",
        "order": 5,
        "description": "Understand the different operators in JavaScript for performing arithmetic, assignment, comparison, and logical operations.",
        "category": "JS Fundamentals",
        "body": {
          "raw": "\n## JavaScript Operators\n\nJavaScript uses operators to perform operations on values and variables.\n\n### Arithmetic Operators\nUsed to perform arithmetic between numeric values.\n- `+` Addition\n- `-` Subtraction\n- `*` Multiplication\n- `/` Division\n- `**` Exponentiation (ES2016)\n- `%` Modulus (Division Remainder)\n- `++` Increment\n- `--` Decrement\n\n```javascript\nlet x = 10;\nlet y = 4;\nconsole.log(x + y); // 14\nconsole.log(x % y); // 2\n```\n\n### Assignment Operators\nUsed to assign values to JavaScript variables.\n- `=` Assign\n- `+=` Add and assign\n- `-=` Subtract and assign\n- `*=` Multiply and assign\n- `/=` Divide and assign\n\n```javascript\nlet a = 10;\na += 5; // a is now 15\n```\n\n### Comparison Operators\nUsed in logical statements to determine equality or difference between variables or values.\n- `==` Equal to (value)\n- `===` Equal value and equal type (strict equality)\n- `!=` Not equal to (value)\n- `!==` Not equal value or not equal type\n- `>` Greater than\n- `<` Less than\n- `>=` Greater than or equal to\n- `<=` Less than or equal to\n- `?` Ternary operator\n\n```javascript\nlet age = 18;\nlet canVote = (age < 18) ? \"Too young\" : \"Old enough\";\nconsole.log(canVote); // \"Old enough\"\n```\n\n### Logical Operators\nUsed to determine the logic between variables or values.\n- `&&` Logical AND\n- `||` Logical OR\n- `!` Logical NOT\n\n```javascript\nlet isAdult = true;\nlet hasLicense = false;\n\nif (isAdult && hasLicense) {\n  console.log(\"Can drive.\");\n} else {\n  console.log(\"Cannot drive.\");\n}\n```\n\n### Type Operators\n- `typeof` Returns the type of a variable\n- `instanceof` Returns `true` if an object is an instance of an object type\n\n```javascript\nconsole.log(typeof \"John\"); // \"string\"\nconsole.log([1, 2] instanceof Array); // true\n```\n",
          "html": "<h2>JavaScript Operators</h2>\n<p>JavaScript uses operators to perform operations on values and variables.</p>\n<h3>Arithmetic Operators</h3>\n<p>Used to perform arithmetic between numeric values.</p>\n<ul>\n<li><code>+</code> Addition</li>\n<li><code>-</code> Subtraction</li>\n<li><code>*</code> Multiplication</li>\n<li><code>/</code> Division</li>\n<li><code>**</code> Exponentiation (ES2016)</li>\n<li><code>%</code> Modulus (Division Remainder)</li>\n<li><code>++</code> Increment</li>\n<li><code>--</code> Decrement</li>\n</ul>\n<pre><code class=\"language-javascript\">let x = 10;\nlet y = 4;\nconsole.log(x + y); // 14\nconsole.log(x % y); // 2\n</code></pre>\n<h3>Assignment Operators</h3>\n<p>Used to assign values to JavaScript variables.</p>\n<ul>\n<li><code>=</code> Assign</li>\n<li><code>+=</code> Add and assign</li>\n<li><code>-=</code> Subtract and assign</li>\n<li><code>*=</code> Multiply and assign</li>\n<li><code>/=</code> Divide and assign</li>\n</ul>\n<pre><code class=\"language-javascript\">let a = 10;\na += 5; // a is now 15\n</code></pre>\n<h3>Comparison Operators</h3>\n<p>Used in logical statements to determine equality or difference between variables or values.</p>\n<ul>\n<li><code>==</code> Equal to (value)</li>\n<li><code>===</code> Equal value and equal type (strict equality)</li>\n<li><code>!=</code> Not equal to (value)</li>\n<li><code>!==</code> Not equal value or not equal type</li>\n<li><code>></code> Greater than</li>\n<li><code>&#x3C;</code> Less than</li>\n<li><code>>=</code> Greater than or equal to</li>\n<li><code>&#x3C;=</code> Less than or equal to</li>\n<li><code>?</code> Ternary operator</li>\n</ul>\n<pre><code class=\"language-javascript\">let age = 18;\nlet canVote = (age &#x3C; 18) ? \"Too young\" : \"Old enough\";\nconsole.log(canVote); // \"Old enough\"\n</code></pre>\n<h3>Logical Operators</h3>\n<p>Used to determine the logic between variables or values.</p>\n<ul>\n<li><code>&#x26;&#x26;</code> Logical AND</li>\n<li><code>||</code> Logical OR</li>\n<li><code>!</code> Logical NOT</li>\n</ul>\n<pre><code class=\"language-javascript\">let isAdult = true;\nlet hasLicense = false;\n\nif (isAdult &#x26;&#x26; hasLicense) {\n  console.log(\"Can drive.\");\n} else {\n  console.log(\"Cannot drive.\");\n}\n</code></pre>\n<h3>Type Operators</h3>\n<ul>\n<li><code>typeof</code> Returns the type of a variable</li>\n<li><code>instanceof</code> Returns <code>true</code> if an object is an instance of an object type</li>\n</ul>\n<pre><code class=\"language-javascript\">console.log(typeof \"John\"); // \"string\"\nconsole.log([1, 2] instanceof Array); // true\n</code></pre>"
        },
        "_id": "tutorials/javascript/operators.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/operators.md",
          "sourceFileName": "operators.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/operators"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-operators",
        "language": "javascript"
      },
      "documentHash": "1753939310777",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/javascript/variables.md": {
      "document": {
        "title": "JavaScript Variables",
        "slug": "javascript-variables",
        "order": 3,
        "description": "Understand how to declare and use variables in JavaScript using var, let, and const, including scope and hoisting.",
        "category": "JS Variables and Data Types",
        "body": {
          "raw": "\n## Understanding JavaScript Variables\n\nIn JavaScript, variables are containers for storing data values. They are fundamental to any program, allowing you to store, retrieve, and manipulate data throughout your code. JavaScript provides three keywords to declare variables: `var`, `let`, and `const`.\n\n### `var`: The Original Variable Keyword\n\nThe `var` statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.\n\n- **Scope**: A variable declared with `var` is scoped to the nearest function block. If declared outside of any function, it is scoped globally.\n- **Hoisting**: `var` declarations are \"hoisted\" to the top of their scope. This means you can use a variable before it is declared, but its value will be `undefined`.\n\n```javascript\nconsole.log(myVar); // Output: undefined\nvar myVar = \"Hello\";\nconsole.log(myVar); // Output: \"Hello\"\n\nfunction myFunction() {\n  var functionScoped = \"I am inside the function\";\n  console.log(functionScoped);\n}\nmyFunction();\n// console.log(functionScoped); // This would cause a ReferenceError\n```\n\nBecause of its sometimes confusing behavior with hoisting and scope, `var` is generally not recommended in modern JavaScript.\n\n### `let`: Block-Scoped Variables\n\nIntroduced in ES6 (ECMAScript 2015), `let` provides block-scoping. A block is any code enclosed in curly braces `{}`, like in an `if` statement or a `for` loop.\n\n- **Scope**: A variable declared with `let` is only available within the block, statement, or expression in which it was declared.\n- **Hoisting**: `let` declarations are also hoisted, but they are not initialized. Accessing them before the declaration results in a `ReferenceError`. This is known as the \"Temporal Dead Zone\" (TDZ).\n\n```javascript\nlet count = 10;\nif (true) {\n  let count = 20; // This is a different 'count' variable, scoped to this block\n  console.log(count); // Output: 20\n}\nconsole.log(count); // Output: 10\n\n// console.log(myLet); // ReferenceError: Cannot access 'myLet' before initialization\nlet myLet = \"This is a let variable\";\n```\n\n### `const`: Block-Scoped Constants\n\nAlso introduced in ES6, `const` is used to declare constants. Like `let`, it is block-scoped.\n\n- **Scope**: `const` variables are block-scoped, just like `let`.\n- **Hoisting**: `const` variables are also hoisted and are in the TDZ until declaration.\n- **Immutability**: A `const` variable **cannot be reassigned** a new value. It must be initialized at the time of declaration.\n\n```javascript\nconst PI = 3.14159;\n// PI = 3.14; // This would throw a TypeError.\n\n// For objects and arrays, the variable reference is constant, but the contents can be changed.\nconst person = { name: \"Bob\" };\nperson.name = \"Charlie\"; // This is allowed.\n// person = { name: \"David\" }; // This would throw a TypeError.\n```\n\n## Comparison: `var` vs. `let` vs. `const`\n\n| Feature           | `var`                         | `let`                         | `const`                              |\n| ----------------- | ----------------------------- | ----------------------------- | ------------------------------------ |\n| **Scope**         | Function / Global             | Block                         | Block                                |\n| **Reassignable**  | Yes                           | Yes                           | No                                   |\n| **Redeclarable**  | Yes (in the same scope)       | No (in the same scope)        | No (in the same scope)               |\n| **Hoisting**      | Hoisted & initialized to `undefined` | Hoisted, but not initialized (TDZ) | Hoisted, but not initialized (TDZ) |\n| **Must Initialize**| No                           | No                            | Yes                                  |\n\n## Best Practices\n\n- Prefer `const` by default for all variables. This makes your code more predictable and prevents accidental reassignments.\n- Use `let` only when you know a variable's value needs to change.\n- Avoid using `var` in modern JavaScript to prevent issues with scope and hoisting.\n",
          "html": "<h2>Understanding JavaScript Variables</h2>\n<p>In JavaScript, variables are containers for storing data values. They are fundamental to any program, allowing you to store, retrieve, and manipulate data throughout your code. JavaScript provides three keywords to declare variables: <code>var</code>, <code>let</code>, and <code>const</code>.</p>\n<h3><code>var</code>: The Original Variable Keyword</h3>\n<p>The <code>var</code> statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value.</p>\n<ul>\n<li><strong>Scope</strong>: A variable declared with <code>var</code> is scoped to the nearest function block. If declared outside of any function, it is scoped globally.</li>\n<li><strong>Hoisting</strong>: <code>var</code> declarations are \"hoisted\" to the top of their scope. This means you can use a variable before it is declared, but its value will be <code>undefined</code>.</li>\n</ul>\n<pre><code class=\"language-javascript\">console.log(myVar); // Output: undefined\nvar myVar = \"Hello\";\nconsole.log(myVar); // Output: \"Hello\"\n\nfunction myFunction() {\n  var functionScoped = \"I am inside the function\";\n  console.log(functionScoped);\n}\nmyFunction();\n// console.log(functionScoped); // This would cause a ReferenceError\n</code></pre>\n<p>Because of its sometimes confusing behavior with hoisting and scope, <code>var</code> is generally not recommended in modern JavaScript.</p>\n<h3><code>let</code>: Block-Scoped Variables</h3>\n<p>Introduced in ES6 (ECMAScript 2015), <code>let</code> provides block-scoping. A block is any code enclosed in curly braces <code>{}</code>, like in an <code>if</code> statement or a <code>for</code> loop.</p>\n<ul>\n<li><strong>Scope</strong>: A variable declared with <code>let</code> is only available within the block, statement, or expression in which it was declared.</li>\n<li><strong>Hoisting</strong>: <code>let</code> declarations are also hoisted, but they are not initialized. Accessing them before the declaration results in a <code>ReferenceError</code>. This is known as the \"Temporal Dead Zone\" (TDZ).</li>\n</ul>\n<pre><code class=\"language-javascript\">let count = 10;\nif (true) {\n  let count = 20; // This is a different 'count' variable, scoped to this block\n  console.log(count); // Output: 20\n}\nconsole.log(count); // Output: 10\n\n// console.log(myLet); // ReferenceError: Cannot access 'myLet' before initialization\nlet myLet = \"This is a let variable\";\n</code></pre>\n<h3><code>const</code>: Block-Scoped Constants</h3>\n<p>Also introduced in ES6, <code>const</code> is used to declare constants. Like <code>let</code>, it is block-scoped.</p>\n<ul>\n<li><strong>Scope</strong>: <code>const</code> variables are block-scoped, just like <code>let</code>.</li>\n<li><strong>Hoisting</strong>: <code>const</code> variables are also hoisted and are in the TDZ until declaration.</li>\n<li><strong>Immutability</strong>: A <code>const</code> variable <strong>cannot be reassigned</strong> a new value. It must be initialized at the time of declaration.</li>\n</ul>\n<pre><code class=\"language-javascript\">const PI = 3.14159;\n// PI = 3.14; // This would throw a TypeError.\n\n// For objects and arrays, the variable reference is constant, but the contents can be changed.\nconst person = { name: \"Bob\" };\nperson.name = \"Charlie\"; // This is allowed.\n// person = { name: \"David\" }; // This would throw a TypeError.\n</code></pre>\n<h2>Comparison: <code>var</code> vs. <code>let</code> vs. <code>const</code></h2>\n<p>| Feature           | <code>var</code>                         | <code>let</code>                         | <code>const</code>                              |\n| ----------------- | ----------------------------- | ----------------------------- | ------------------------------------ |\n| <strong>Scope</strong>         | Function / Global             | Block                         | Block                                |\n| <strong>Reassignable</strong>  | Yes                           | Yes                           | No                                   |\n| <strong>Redeclarable</strong>  | Yes (in the same scope)       | No (in the same scope)        | No (in the same scope)               |\n| <strong>Hoisting</strong>      | Hoisted &#x26; initialized to <code>undefined</code> | Hoisted, but not initialized (TDZ) | Hoisted, but not initialized (TDZ) |\n| <strong>Must Initialize</strong>| No                           | No                            | Yes                                  |</p>\n<h2>Best Practices</h2>\n<ul>\n<li>Prefer <code>const</code> by default for all variables. This makes your code more predictable and prevents accidental reassignments.</li>\n<li>Use <code>let</code> only when you know a variable's value needs to change.</li>\n<li>Avoid using <code>var</code> in modern JavaScript to prevent issues with scope and hoisting.</li>\n</ul>"
        },
        "_id": "tutorials/javascript/variables.md",
        "_raw": {
          "sourceFilePath": "tutorials/javascript/variables.md",
          "sourceFileName": "variables.md",
          "sourceFileDir": "tutorials/javascript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/javascript/variables"
        },
        "type": "TutorialPost",
        "url": "/tutorial/javascript/javascript-variables",
        "language": "javascript"
      },
      "documentHash": "1754562226149",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/kotlin/introduction.md": {
      "document": {
        "title": "Introduction to Kotlin",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of Kotlin, a modern, concise, and safe programming language.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is Kotlin?\n\nKotlin is a cross-platform, statically typed, general-purpose programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library, but type inference allows its syntax to be more concise.\n",
          "html": "<h2>What is Kotlin?</h2>\n<p>Kotlin is a cross-platform, statically typed, general-purpose programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library, but type inference allows its syntax to be more concise.</p>"
        },
        "_id": "tutorials/kotlin/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/kotlin/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/kotlin",
          "contentType": "markdown",
          "flattenedPath": "tutorials/kotlin/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/kotlin/introduction",
        "language": "kotlin"
      },
      "documentHash": "1754562111330",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/matlab/introduction.md": {
      "document": {
        "title": "Introduction to MATLAB",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of MATLAB, a high-level language and interactive environment for numerical computation, visualization, and programming.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is MATLAB?\n\nMATLAB (matrix laboratory) is a proprietary multi-paradigm programming language and numerical computing environment developed by MathWorks. MATLAB allows matrix manipulations, plotting of functions and data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other languages.\n",
          "html": "<h2>What is MATLAB?</h2>\n<p>MATLAB (matrix laboratory) is a proprietary multi-paradigm programming language and numerical computing environment developed by MathWorks. MATLAB allows matrix manipulations, plotting of functions and data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other languages.</p>"
        },
        "_id": "tutorials/matlab/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/matlab/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/matlab",
          "contentType": "markdown",
          "flattenedPath": "tutorials/matlab/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/matlab/introduction",
        "language": "matlab"
      },
      "documentHash": "1754562111356",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/perl/introduction.md": {
      "document": {
        "title": "Introduction to Perl",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of Perl, a family of two high-level, general-purpose, interpreted, dynamic programming languages.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is Perl?\n\nPerl is a family of two high-level, general-purpose, interpreted, dynamic programming languages. \"Perl\" refers to Perl 5, but from 2000 to 2019 it also referred to its redesigned sister language, Raku (formerly known as Perl 6). Perl is particularly known for its strength in text processing and system administration tasks.\n",
          "html": "<h2>What is Perl?</h2>\n<p>Perl is a family of two high-level, general-purpose, interpreted, dynamic programming languages. \"Perl\" refers to Perl 5, but from 2000 to 2019 it also referred to its redesigned sister language, Raku (formerly known as Perl 6). Perl is particularly known for its strength in text processing and system administration tasks.</p>"
        },
        "_id": "tutorials/perl/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/perl/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/perl",
          "contentType": "markdown",
          "flattenedPath": "tutorials/perl/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/perl/introduction",
        "language": "perl"
      },
      "documentHash": "1754562111353",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/php/introduction.md": {
      "document": {
        "title": "Introduction to PHP",
        "slug": "introduction-to-php",
        "order": 1,
        "description": "An overview of PHP, a popular server-side scripting language.",
        "category": "Web Development",
        "body": {
          "raw": "\n## What is PHP?\n\nPHP (a recursive acronym for \"PHP: Hypertext Preprocessor\") is a widely-used, open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994.\n\n### Key Characteristics:\n\n- **Server-Side**: PHP code is executed on the server, generating HTML which is then sent to the client. The client receives the results of the script, but does not know the underlying code.\n- **Database Integration**: PHP has excellent support for a wide range of databases, most notably MySQL.\n- **Simplicity**: It has a relatively easy learning curve, especially for those with a background in C-style syntax.\n- **Community**: PHP has a large and active community, meaning there is a wealth of tutorials, libraries, and frameworks available.\n- **Frameworks**: Powerful frameworks like Laravel and Symfony have made PHP a modern and robust choice for building complex web applications.\n\nA simple PHP script looks like this:\n\n```php\n<!DOCTYPE html>\n<html>\n<body>\n\n    <h1>My first PHP page</h1>\n\n    <?php\n    echo \"Hello World!\";\n    ?>\n\n</body>\n</html>\n```\n\nPHP powers a significant portion of the web, including famous platforms like WordPress and Facebook.",
          "html": "<h2>What is PHP?</h2>\n<p>PHP (a recursive acronym for \"PHP: Hypertext Preprocessor\") is a widely-used, open source general-purpose scripting language that is especially suited for web development and can be embedded into HTML. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994.</p>\n<h3>Key Characteristics:</h3>\n<ul>\n<li><strong>Server-Side</strong>: PHP code is executed on the server, generating HTML which is then sent to the client. The client receives the results of the script, but does not know the underlying code.</li>\n<li><strong>Database Integration</strong>: PHP has excellent support for a wide range of databases, most notably MySQL.</li>\n<li><strong>Simplicity</strong>: It has a relatively easy learning curve, especially for those with a background in C-style syntax.</li>\n<li><strong>Community</strong>: PHP has a large and active community, meaning there is a wealth of tutorials, libraries, and frameworks available.</li>\n<li><strong>Frameworks</strong>: Powerful frameworks like Laravel and Symfony have made PHP a modern and robust choice for building complex web applications.</li>\n</ul>\n<p>A simple PHP script looks like this:</p>\n<pre><code class=\"language-php\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;body>\n\n    &#x3C;h1>My first PHP page&#x3C;/h1>\n\n    &#x3C;?php\n    echo \"Hello World!\";\n    ?>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>PHP powers a significant portion of the web, including famous platforms like WordPress and Facebook.</p>"
        },
        "_id": "tutorials/php/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/php/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/php",
          "contentType": "markdown",
          "flattenedPath": "tutorials/php/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/php/introduction-to-php",
        "language": "php"
      },
      "documentHash": "1754563588963",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/arrays.md": {
      "document": {
        "title": "Python Arrays",
        "slug": "arrays",
        "order": 16,
        "description": "Understand how to use the array module for type-constrained, efficient arrays.",
        "category": "Python Data Structures",
        "body": {
          "raw": "\n## Python Arrays\n\nThis tutorial covers the `array` module in Python, which provides a more memory-efficient way to store arrays of a single data type compared to lists.\n",
          "html": "<h2>Python Arrays</h2>\n<p>This tutorial covers the <code>array</code> module in Python, which provides a more memory-efficient way to store arrays of a single data type compared to lists.</p>"
        },
        "_id": "tutorials/python/arrays.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/arrays.md",
          "sourceFileName": "arrays.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/arrays"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/arrays",
        "language": "python"
      },
      "documentHash": "1754564326220",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/conditional-statements.md": {
      "document": {
        "title": "Conditional Statements in Python",
        "slug": "conditional-statements",
        "order": 7,
        "description": "Learn how to use if, elif, and else to control the flow of your program based on conditions.",
        "category": "Python Fundamentals",
        "body": {
          "raw": "\n## Conditional Statements in Python\n\nThis tutorial covers how to use conditional statements (if, else, elif) to control the flow of execution in your Python programs based on certain conditions.\n",
          "html": "<h2>Conditional Statements in Python</h2>\n<p>This tutorial covers how to use conditional statements (if, else, elif) to control the flow of execution in your Python programs based on certain conditions.</p>"
        },
        "_id": "tutorials/python/conditional-statements.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/conditional-statements.md",
          "sourceFileName": "conditional-statements.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/conditional-statements"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/conditional-statements",
        "language": "python"
      },
      "documentHash": "1754564326148",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/datatypes.md": {
      "document": {
        "title": "Data Types in Python",
        "slug": "datatypes",
        "order": 3,
        "description": "Explore the fundamental data types available in Python.",
        "category": "Fundamentals",
        "body": {
          "raw": "\n## Python Data Types\n\nPython has various built-in data types. Here are some fundamental ones:\n\n- **Text Type**: `str`\n- **Numeric Types**: `int`, `float`, `complex`\n- **Sequence Types**: `list`, `tuple`, `range`\n- **Mapping Type**: `dict`\n- **Set Types**: `set`, `frozenset`\n- **Boolean Type**: `bool`\n- **Binary Types**: `bytes`, `bytearray`, `memoryview`\n\n### Example of Data Types\n\n```python\nmy_string = \"Python is fun\"      # str\nmy_integer = 100                 # int\nmy_float = 3.14                  # float\nmy_list = [\"apple\", \"banana\"]    # list\nmy_dict = {\"name\": \"Alice\", \"age\": 30} # dict\nmy_boolean = True                # bool\n\nprint(type(my_string))\nprint(type(my_integer))\nprint(type(my_float))\n```\n\nThis tutorial explores fundamental Python data types.\n",
          "html": "<h2>Python Data Types</h2>\n<p>Python has various built-in data types. Here are some fundamental ones:</p>\n<ul>\n<li><strong>Text Type</strong>: <code>str</code></li>\n<li><strong>Numeric Types</strong>: <code>int</code>, <code>float</code>, <code>complex</code></li>\n<li><strong>Sequence Types</strong>: <code>list</code>, <code>tuple</code>, <code>range</code></li>\n<li><strong>Mapping Type</strong>: <code>dict</code></li>\n<li><strong>Set Types</strong>: <code>set</code>, <code>frozenset</code></li>\n<li><strong>Boolean Type</strong>: <code>bool</code></li>\n<li><strong>Binary Types</strong>: <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></li>\n</ul>\n<h3>Example of Data Types</h3>\n<pre><code class=\"language-python\">my_string = \"Python is fun\"      # str\nmy_integer = 100                 # int\nmy_float = 3.14                  # float\nmy_list = [\"apple\", \"banana\"]    # list\nmy_dict = {\"name\": \"Alice\", \"age\": 30} # dict\nmy_boolean = True                # bool\n\nprint(type(my_string))\nprint(type(my_integer))\nprint(type(my_float))\n</code></pre>\n<p>This tutorial explores fundamental Python data types.</p>"
        },
        "_id": "tutorials/python/datatypes.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/datatypes.md",
          "sourceFileName": "datatypes.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/datatypes"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/datatypes",
        "language": "python"
      },
      "documentHash": "1754564102140",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/dictionaries.md": {
      "document": {
        "title": "Dictionaries in Python",
        "slug": "dictionaries",
        "order": 14,
        "description": "Master the use of dictionaries for key-value pair data storage in Python.",
        "category": "Python Data Structures",
        "body": {
          "raw": "\n## Dictionaries in Python\n\nThis tutorial covers Python dictionaries, a powerful data structure for storing data in key-value pairs. Learn how to create, access, modify, and loop through dictionaries.\n",
          "html": "<h2>Dictionaries in Python</h2>\n<p>This tutorial covers Python dictionaries, a powerful data structure for storing data in key-value pairs. Learn how to create, access, modify, and loop through dictionaries.</p>"
        },
        "_id": "tutorials/python/dictionaries.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/dictionaries.md",
          "sourceFileName": "dictionaries.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/dictionaries"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/dictionaries",
        "language": "python"
      },
      "documentHash": "1754564326207",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/django-orm.md": {
      "document": {
        "title": "Django ORM - Inserting, Updating & Deleting Data",
        "slug": "django-orm",
        "order": 35,
        "description": "Learn how to interact with your database using the Django Object-Relational Mapper (ORM).",
        "category": "Web Development with Python",
        "body": {
          "raw": "\n## Django ORM\n\nThis tutorial focuses on the Django ORM, showing you how to create, retrieve, update, and delete database records using Python objects instead of writing raw SQL.\n",
          "html": "<h2>Django ORM</h2>\n<p>This tutorial focuses on the Django ORM, showing you how to create, retrieve, update, and delete database records using Python objects instead of writing raw SQL.</p>"
        },
        "_id": "tutorials/python/django-orm.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/django-orm.md",
          "sourceFileName": "django-orm.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/django-orm"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/django-orm",
        "language": "python"
      },
      "documentHash": "1754564326480",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/django-rest-api.md": {
      "document": {
        "title": "How to Create a basic API using Django Rest Framework ?",
        "slug": "django-rest-api",
        "order": 39,
        "description": "Learn the fundamentals of building powerful APIs with Django Rest Framework.",
        "category": "Web Development with Python",
        "body": {
          "raw": "\n## Create a basic API using Django Rest Framework\n\nThis tutorial shows you how to quickly build a REST API in a Django project using the Django Rest Framework, covering serializers, viewsets, and routers.\n",
          "html": "<h2>Create a basic API using Django Rest Framework</h2>\n<p>This tutorial shows you how to quickly build a REST API in a Django project using the Django Rest Framework, covering serializers, viewsets, and routers.</p>"
        },
        "_id": "tutorials/python/django-rest-api.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/django-rest-api.md",
          "sourceFileName": "django-rest-api.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/django-rest-api"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/django-rest-api",
        "language": "python"
      },
      "documentHash": "1754564326515",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/django-templates.md": {
      "document": {
        "title": "Django Templates",
        "slug": "django-templates",
        "order": 37,
        "description": "Understand the Django template language for creating dynamic web pages.",
        "category": "Web Development with Python",
        "body": {
          "raw": "\n## Django Templates\n\nThis tutorial explores the Django template system, teaching you how to use template tags and filters to display dynamic data and create reusable HTML components.\n",
          "html": "<h2>Django Templates</h2>\n<p>This tutorial explores the Django template system, teaching you how to use template tags and filters to display dynamic data and create reusable HTML components.</p>"
        },
        "_id": "tutorials/python/django-templates.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/django-templates.md",
          "sourceFileName": "django-templates.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/django-templates"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/django-templates",
        "language": "python"
      },
      "documentHash": "1754564326481",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/django-tutorial.md": {
      "document": {
        "title": "Django Tutorial | Learn Django Framework",
        "slug": "django-tutorial",
        "order": 34,
        "description": "A comprehensive guide to building web applications with the Django framework.",
        "category": "Web Development with Python",
        "body": {
          "raw": "\n## Django Tutorial\n\nThis tutorial introduces the Django framework, a high-level Python web framework that encourages rapid development and clean, pragmatic design.\n",
          "html": "<h2>Django Tutorial</h2>\n<p>This tutorial introduces the Django framework, a high-level Python web framework that encourages rapid development and clean, pragmatic design.</p>"
        },
        "_id": "tutorials/python/django-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/django-tutorial.md",
          "sourceFileName": "django-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/django-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/django-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326475",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/exception-handling.md": {
      "document": {
        "title": "Python Exception Handling",
        "slug": "exception-handling",
        "order": 19,
        "description": "Learn how to handle errors and exceptions gracefully using try, except, else, and finally.",
        "category": "Advanced Python",
        "body": {
          "raw": "\n## Python Exception Handling\n\nThis tutorial explains how to manage errors and exceptions in Python using `try...except` blocks, ensuring your programs are robust and can handle unexpected situations.\n",
          "html": "<h2>Python Exception Handling</h2>\n<p>This tutorial explains how to manage errors and exceptions in Python using <code>try...except</code> blocks, ensuring your programs are robust and can handle unexpected situations.</p>"
        },
        "_id": "tutorials/python/exception-handling.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/exception-handling.md",
          "sourceFileName": "exception-handling.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/exception-handling"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/exception-handling",
        "language": "python"
      },
      "documentHash": "1754564326289",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/f-strings.md": {
      "document": {
        "title": "Mastering F-Strings in Python",
        "slug": "python-f-strings",
        "order": 3,
        "description": "Learn how to use f-strings for powerful and readable string formatting in Python.",
        "category": "Fundamentals",
        "body": {
          "raw": "\n## What are F-Strings?\n\nIntroduced in Python 3.6, f-strings (formatted string literals) provide a concise and convenient way to embed expressions inside string literals for formatting. They are prefixed with an 'f' or 'F' and allow you to embed Python expressions directly inside `{}` braces.\n\n## Basic Usage\n\nThe syntax is simple. Just place an `f` before the opening quote of your string, and then you can place any valid Python expression inside curly braces `{}`.\n\n```python\nname = \"Alice\"\nage = 30\ngreeting = f\"Hello, my name is {name} and I am {age} years old.\"\nprint(greeting)\n# Output: Hello, my name is Alice and I am 30 years old.\n```\n\n## Expressions Inside F-Strings\n\nYou can put any valid Python expression inside the braces, including function calls, arithmetic operations, and more.\n\n```python\n# Arithmetic operation\nprint(f\"Five plus ten is {5 + 10}.\")\n# Output: Five plus ten is 15.\n\n# Function call\ndef get_name():\n    return \"Bob\"\n\nprint(f\"His name is {get_name()}.\")\n# Output: His name is Bob.\n\n# Accessing dictionary values\nperson = {\"name\": \"Charlie\", \"age\": 25}\nprint(f\"{person['name']} is {person['age']} years old.\")\n# Output: Charlie is 25 years old.\n```\n\n## Formatting Specifiers\n\nF-strings also support format specifiers, which follow a colon `:` inside the braces. This allows for fine-grained control over the output.\n\n### Formatting Numbers\nYou can control decimal precision, padding, and alignment.\n\n```python\npi = 3.14159265\n\n# Format to 2 decimal places\nprint(f\"The value of pi is approximately {pi:.2f}.\")\n# Output: The value of pi is approximately 3.14.\n\n# Add padding\nnumber = 42\nprint(f\"The number is {number:05}.\") # Pad with leading zeros to a width of 5\n# Output: The number is 00042.\n```\n\n### Formatting Dates\n\nYou can format `datetime` objects easily.\n\n```python\nimport datetime\ntoday = datetime.datetime.now()\n\nprint(f\"Today is {today:%Y-%m-%d}.\")\n# Output: Today is 2024-07-10. (Will vary based on current date)\n```\n\nF-strings are the modern, preferred way to format strings in Python due to their readability and performance.\n",
          "html": "<h2>What are F-Strings?</h2>\n<p>Introduced in Python 3.6, f-strings (formatted string literals) provide a concise and convenient way to embed expressions inside string literals for formatting. They are prefixed with an 'f' or 'F' and allow you to embed Python expressions directly inside <code>{}</code> braces.</p>\n<h2>Basic Usage</h2>\n<p>The syntax is simple. Just place an <code>f</code> before the opening quote of your string, and then you can place any valid Python expression inside curly braces <code>{}</code>.</p>\n<pre><code class=\"language-python\">name = \"Alice\"\nage = 30\ngreeting = f\"Hello, my name is {name} and I am {age} years old.\"\nprint(greeting)\n# Output: Hello, my name is Alice and I am 30 years old.\n</code></pre>\n<h2>Expressions Inside F-Strings</h2>\n<p>You can put any valid Python expression inside the braces, including function calls, arithmetic operations, and more.</p>\n<pre><code class=\"language-python\"># Arithmetic operation\nprint(f\"Five plus ten is {5 + 10}.\")\n# Output: Five plus ten is 15.\n\n# Function call\ndef get_name():\n    return \"Bob\"\n\nprint(f\"His name is {get_name()}.\")\n# Output: His name is Bob.\n\n# Accessing dictionary values\nperson = {\"name\": \"Charlie\", \"age\": 25}\nprint(f\"{person['name']} is {person['age']} years old.\")\n# Output: Charlie is 25 years old.\n</code></pre>\n<h2>Formatting Specifiers</h2>\n<p>F-strings also support format specifiers, which follow a colon <code>:</code> inside the braces. This allows for fine-grained control over the output.</p>\n<h3>Formatting Numbers</h3>\n<p>You can control decimal precision, padding, and alignment.</p>\n<pre><code class=\"language-python\">pi = 3.14159265\n\n# Format to 2 decimal places\nprint(f\"The value of pi is approximately {pi:.2f}.\")\n# Output: The value of pi is approximately 3.14.\n\n# Add padding\nnumber = 42\nprint(f\"The number is {number:05}.\") # Pad with leading zeros to a width of 5\n# Output: The number is 00042.\n</code></pre>\n<h3>Formatting Dates</h3>\n<p>You can format <code>datetime</code> objects easily.</p>\n<pre><code class=\"language-python\">import datetime\ntoday = datetime.datetime.now()\n\nprint(f\"Today is {today:%Y-%m-%d}.\")\n# Output: Today is 2024-07-10. (Will vary based on current date)\n</code></pre>\n<p>F-strings are the modern, preferred way to format strings in Python due to their readability and performance.</p>"
        },
        "_id": "tutorials/python/f-strings.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/f-strings.md",
          "sourceFileName": "f-strings.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/f-strings"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/python-f-strings",
        "language": "python"
      },
      "documentHash": "1753978179822",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/file-handling.md": {
      "document": {
        "title": "File Handling in Python",
        "slug": "file-handling",
        "order": 20,
        "description": "Learn how to read from and write to files using Python.",
        "category": "Advanced Python",
        "body": {
          "raw": "\n## File Handling in Python\n\nThis tutorial covers the essentials of file handling in Python, including opening files in different modes, reading content, writing data, and using context managers.\n",
          "html": "<h2>File Handling in Python</h2>\n<p>This tutorial covers the essentials of file handling in Python, including opening files in different modes, reading content, writing data, and using context managers.</p>"
        },
        "_id": "tutorials/python/file-handling.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/file-handling.md",
          "sourceFileName": "file-handling.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/file-handling"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/file-handling",
        "language": "python"
      },
      "documentHash": "1754564326304",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/flask-rest-api.md": {
      "document": {
        "title": "Python | Build a REST API using Flask",
        "slug": "flask-rest-api",
        "order": 38,
        "description": "A guide to building a simple RESTful API using the Flask framework.",
        "category": "Web Development with Python",
        "body": {
          "raw": "\n## Build a REST API using Flask\n\nThis tutorial walks you through the process of creating a REST API with Python and Flask, covering how to define endpoints and handle JSON data.\n",
          "html": "<h2>Build a REST API using Flask</h2>\n<p>This tutorial walks you through the process of creating a REST API with Python and Flask, covering how to define endpoints and handle JSON data.</p>"
        },
        "_id": "tutorials/python/flask-rest-api.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/flask-rest-api.md",
          "sourceFileName": "flask-rest-api.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/flask-rest-api"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/flask-rest-api",
        "language": "python"
      },
      "documentHash": "1754564326481",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/flask-tutorial.md": {
      "document": {
        "title": "Flask Tutorial",
        "slug": "flask-tutorial",
        "order": 33,
        "description": "Learn to build web applications with Flask, a lightweight Python web framework.",
        "category": "Web Development with Python",
        "body": {
          "raw": "\n## Flask Tutorial\n\nThis tutorial provides a step-by-step guide to getting started with Flask, a micro web framework for Python, covering routing, templates, and request handling.\n",
          "html": "<h2>Flask Tutorial</h2>\n<p>This tutorial provides a step-by-step guide to getting started with Flask, a micro web framework for Python, covering routing, templates, and request handling.</p>"
        },
        "_id": "tutorials/python/flask-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/flask-tutorial.md",
          "sourceFileName": "flask-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/flask-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/flask-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326438",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/functions.md": {
      "document": {
        "title": "Functions in Python",
        "slug": "functions",
        "order": 5,
        "description": "Understand how to define and use functions in Python for reusable code.",
        "category": "Functions",
        "body": {
          "raw": "\n## Defining and Using Functions\n\nA function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. A function can return data as a result.\n\n### Creating a Function\n\nIn Python a function is defined using the `def` keyword:\n\n```python\ndef my_function():\n  print(\"Hello from a function\")\n\nmy_function() # Calling the function\n```\n\n### Parameters and Arguments\n\nInformation can be passed into functions as arguments.\n\n```python\ndef greet(name):\n  print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n```\n\nThis tutorial explains Python functions in detail.\n",
          "html": "<h2>Defining and Using Functions</h2>\n<p>A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. A function can return data as a result.</p>\n<h3>Creating a Function</h3>\n<p>In Python a function is defined using the <code>def</code> keyword:</p>\n<pre><code class=\"language-python\">def my_function():\n  print(\"Hello from a function\")\n\nmy_function() # Calling the function\n</code></pre>\n<h3>Parameters and Arguments</h3>\n<p>Information can be passed into functions as arguments.</p>\n<pre><code class=\"language-python\">def greet(name):\n  print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<p>This tutorial explains Python functions in detail.</p>"
        },
        "_id": "tutorials/python/functions.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/functions.md",
          "sourceFileName": "functions.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/functions"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/functions",
        "language": "python"
      },
      "documentHash": "1753978179852",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/gui-libraries.md": {
      "document": {
        "title": "List of Python GUI Library and Packages",
        "slug": "gui-libraries",
        "order": 24,
        "description": "An overview of popular libraries for creating Graphical User Interfaces (GUIs) in Python.",
        "category": "Python DSA Libraries",
        "body": {
          "raw": "\n## Python GUI Libraries\n\nThis tutorial provides an overview of various libraries and packages available for building desktop applications with Graphical User Interfaces (GUIs) in Python, such as Tkinter, PyQt, and Kivy.\n",
          "html": "<h2>Python GUI Libraries</h2>\n<p>This tutorial provides an overview of various libraries and packages available for building desktop applications with Graphical User Interfaces (GUIs) in Python, such as Tkinter, PyQt, and Kivy.</p>"
        },
        "_id": "tutorials/python/gui-libraries.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/gui-libraries.md",
          "sourceFileName": "gui-libraries.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/gui-libraries"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/gui-libraries",
        "language": "python"
      },
      "documentHash": "1754564326366",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/introduction.md": {
      "document": {
        "title": "Introduction to Python",
        "slug": "introduction-to-python",
        "order": 1,
        "description": "A brief overview of Python, its history, and why it's a popular choice for developers.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is Python?\n\nPython is a high-level, interpreted programming language known for its readability and versatility. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. This focus on clarity makes it an excellent language for both beginners and seasoned developers.\n\nIts name is a tribute to the British comedy group Monty Python.\n\n## Key Features\n\n- **Easy to Learn and Use**: Python has a simple, clean syntax that is easy to pick up, making it ideal for newcomers to programming.\n- **Interpreted Language**: Code is executed line by line, which simplifies debugging and allows for rapid prototyping.\n- **Cross-Platform**: Python runs on various operating systems like Windows, macOS, and Linux without requiring code changes.\n- **Extensive Standard Library**: Comes with a large collection of modules and functions for many tasks, often called \"batteries included\". This means you can accomplish a lot without needing to install third-party libraries.\n- **Dynamically Typed**: Variable types are checked at runtime, offering flexibility during development. You don't need to declare the type of a variable.\n- **Object-Oriented**: Python supports object-oriented programming, allowing you to model real-world problems using classes and objects.\n- **Strong Community Support**: A massive and active global community means you can find help, tutorials, and libraries for almost any problem.\n\n## Common Uses\n\nPython is a \"general-purpose\" language, meaning it's used in many different fields:\n\n- **Web Development**: Frameworks like Django and Flask are used to build powerful backend services for web applications.\n- **Data Science and Machine Learning**: With libraries like NumPy, Pandas, Scikit-learn, and TensorFlow, Python is the leading language for data analysis, visualization, and building AI models.\n- **Automation and Scripting**: Python is excellent for automating repetitive tasks, such as organizing files, sending emails, or scraping websites.\n- **Software Testing**: It's often used to write automated tests to ensure software quality.\n- **Game Development**: Libraries like Pygame provide a framework for creating simple 2D games.\n- **Desktop Applications**: You can build cross-platform desktop GUIs with toolkits like Tkinter or PyQt.\n\nThis tutorial series will guide you through the basics of Python programming, from fundamental concepts to more advanced topics. Let's get started!\n",
          "html": "<h2>What is Python?</h2>\n<p>Python is a high-level, interpreted programming language known for its readability and versatility. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. This focus on clarity makes it an excellent language for both beginners and seasoned developers.</p>\n<p>Its name is a tribute to the British comedy group Monty Python.</p>\n<h2>Key Features</h2>\n<ul>\n<li><strong>Easy to Learn and Use</strong>: Python has a simple, clean syntax that is easy to pick up, making it ideal for newcomers to programming.</li>\n<li><strong>Interpreted Language</strong>: Code is executed line by line, which simplifies debugging and allows for rapid prototyping.</li>\n<li><strong>Cross-Platform</strong>: Python runs on various operating systems like Windows, macOS, and Linux without requiring code changes.</li>\n<li><strong>Extensive Standard Library</strong>: Comes with a large collection of modules and functions for many tasks, often called \"batteries included\". This means you can accomplish a lot without needing to install third-party libraries.</li>\n<li><strong>Dynamically Typed</strong>: Variable types are checked at runtime, offering flexibility during development. You don't need to declare the type of a variable.</li>\n<li><strong>Object-Oriented</strong>: Python supports object-oriented programming, allowing you to model real-world problems using classes and objects.</li>\n<li><strong>Strong Community Support</strong>: A massive and active global community means you can find help, tutorials, and libraries for almost any problem.</li>\n</ul>\n<h2>Common Uses</h2>\n<p>Python is a \"general-purpose\" language, meaning it's used in many different fields:</p>\n<ul>\n<li><strong>Web Development</strong>: Frameworks like Django and Flask are used to build powerful backend services for web applications.</li>\n<li><strong>Data Science and Machine Learning</strong>: With libraries like NumPy, Pandas, Scikit-learn, and TensorFlow, Python is the leading language for data analysis, visualization, and building AI models.</li>\n<li><strong>Automation and Scripting</strong>: Python is excellent for automating repetitive tasks, such as organizing files, sending emails, or scraping websites.</li>\n<li><strong>Software Testing</strong>: It's often used to write automated tests to ensure software quality.</li>\n<li><strong>Game Development</strong>: Libraries like Pygame provide a framework for creating simple 2D games.</li>\n<li><strong>Desktop Applications</strong>: You can build cross-platform desktop GUIs with toolkits like Tkinter or PyQt.</li>\n</ul>\n<p>This tutorial series will guide you through the basics of Python programming, from fundamental concepts to more advanced topics. Let's get started!</p>"
        },
        "_id": "tutorials/python/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/introduction-to-python",
        "language": "python"
      },
      "documentHash": "1754564532683",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/jinja2-templating-flask.md": {
      "document": {
        "title": "Templating With Jinja2 in Flask",
        "slug": "jinja2-templating-flask",
        "order": 36,
        "description": "Learn how to use the Jinja2 template engine to create dynamic HTML pages in Flask.",
        "category": "Web Development with Python",
        "body": {
          "raw": "\n## Templating With Jinja2 in Flask\n\nThis tutorial covers the Jinja2 template engine, which is used by Flask to render dynamic HTML templates with variables, loops, and conditional statements.\n",
          "html": "<h2>Templating With Jinja2 in Flask</h2>\n<p>This tutorial covers the Jinja2 template engine, which is used by Flask to render dynamic HTML templates with variables, loops, and conditional statements.</p>"
        },
        "_id": "tutorials/python/jinja2-templating-flask.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/jinja2-templating-flask.md",
          "sourceFileName": "jinja2-templating-flask.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/jinja2-templating-flask"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/jinja2-templating-flask",
        "language": "python"
      },
      "documentHash": "1754564326480",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/keywords.md": {
      "document": {
        "title": "Python Keywords",
        "slug": "keywords",
        "order": 5,
        "description": "A reference for all the reserved keywords in the Python language.",
        "category": "Python Fundamentals",
        "body": {
          "raw": "\n## Python Keywords\n\nThis tutorial provides a list and explanation of the reserved keywords in Python that have special meanings and cannot be used as variable or function names.\n",
          "html": "<h2>Python Keywords</h2>\n<p>This tutorial provides a list and explanation of the reserved keywords in Python that have special meanings and cannot be used as variable or function names.</p>"
        },
        "_id": "tutorials/python/keywords.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/keywords.md",
          "sourceFileName": "keywords.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/keywords"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/keywords",
        "language": "python"
      },
      "documentHash": "1754564326041",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/lambda-functions.md": {
      "document": {
        "title": "Python Lambda Functions",
        "slug": "lambda-functions",
        "order": 10,
        "description": "Learn how to use anonymous (lambda) functions for short, one-line operations.",
        "category": "Python Fundamentals",
        "body": {
          "raw": "\n## Python Lambda Functions\n\nThis tutorial introduces lambda functions, which are small, anonymous functions defined with the `lambda` keyword. They are useful for short-term operations where a full function definition is not necessary.\n",
          "html": "<h2>Python Lambda Functions</h2>\n<p>This tutorial introduces lambda functions, which are small, anonymous functions defined with the <code>lambda</code> keyword. They are useful for short-term operations where a full function definition is not necessary.</p>"
        },
        "_id": "tutorials/python/lambda-functions.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/lambda-functions.md",
          "sourceFileName": "lambda-functions.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/lambda-functions"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/lambda-functions",
        "language": "python"
      },
      "documentHash": "1754564326174",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/list-comprehension.md": {
      "document": {
        "title": "List Comprehension in Python",
        "slug": "list-comprehension",
        "order": 17,
        "description": "A concise and elegant way to create lists in Python.",
        "category": "Python Data Structures",
        "body": {
          "raw": "\n## List Comprehension in Python\n\nThis tutorial teaches you how to use list comprehensions to create lists in a more readable and Pythonic way, providing a compact alternative to using `for` loops.\n",
          "html": "<h2>List Comprehension in Python</h2>\n<p>This tutorial teaches you how to use list comprehensions to create lists in a more readable and Pythonic way, providing a compact alternative to using <code>for</code> loops.</p>"
        },
        "_id": "tutorials/python/list-comprehension.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/list-comprehension.md",
          "sourceFileName": "list-comprehension.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/list-comprehension"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/list-comprehension",
        "language": "python"
      },
      "documentHash": "1754564326252",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/lists.md": {
      "document": {
        "title": "Python Lists",
        "slug": "lists",
        "order": 12,
        "description": "Learn how to use lists, one of the most versatile data structures in Python.",
        "category": "Python Data Structures",
        "body": {
          "raw": "\n## Python Lists\n\nThis tutorial provides a comprehensive guide to Python lists, covering creation, indexing, slicing, and methods for adding, removing, and modifying elements.\n",
          "html": "<h2>Python Lists</h2>\n<p>This tutorial provides a comprehensive guide to Python lists, covering creation, indexing, slicing, and methods for adding, removing, and modifying elements.</p>"
        },
        "_id": "tutorials/python/lists.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/lists.md",
          "sourceFileName": "lists.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/lists"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/lists",
        "language": "python"
      },
      "documentHash": "1754564326197",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/loops.md": {
      "document": {
        "title": "Loops in Python",
        "slug": "loops",
        "order": 4,
        "description": "Learn how to use for and while loops for iteration in Python.",
        "category": "Control Flow",
        "body": {
          "raw": "\n## Iterating with Loops in Python\n\nLoops are used in programming to repeat a specific block of code.\n\n### For Loops\n\nA for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).\n\n```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n  print(fruit)\n```\n\n### While Loops\n\nWith the while loop we can execute a set of statements as long as a condition is true.\n\n```python\ni = 1\nwhile i < 6:\n  print(i)\n  i += 1\n```\n\nThis tutorial covers for and while loops.\n",
          "html": "<h2>Iterating with Loops in Python</h2>\n<p>Loops are used in programming to repeat a specific block of code.</p>\n<h3>For Loops</h3>\n<p>A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).</p>\n<pre><code class=\"language-python\">fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n  print(fruit)\n</code></pre>\n<h3>While Loops</h3>\n<p>With the while loop we can execute a set of statements as long as a condition is true.</p>\n<pre><code class=\"language-python\">i = 1\nwhile i &#x3C; 6:\n  print(i)\n  i += 1\n</code></pre>\n<p>This tutorial covers for and while loops.</p>"
        },
        "_id": "tutorials/python/loops.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/loops.md",
          "sourceFileName": "loops.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/loops"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/loops",
        "language": "python"
      },
      "documentHash": "1753978179894",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/matplotlib-tutorial.md": {
      "document": {
        "title": "Matplotlib Tutorial",
        "slug": "matplotlib-tutorial",
        "order": 27,
        "description": "Create static, animated, and interactive visualizations in Python with Matplotlib.",
        "category": "Data Science with Python",
        "body": {
          "raw": "\n## Matplotlib Tutorial\n\nThis tutorial introduces Matplotlib, a comprehensive library for creating a wide variety of static, animated, and interactive plots and visualizations in Python.\n",
          "html": "<h2>Matplotlib Tutorial</h2>\n<p>This tutorial introduces Matplotlib, a comprehensive library for creating a wide variety of static, animated, and interactive plots and visualizations in Python.</p>"
        },
        "_id": "tutorials/python/matplotlib-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/matplotlib-tutorial.md",
          "sourceFileName": "matplotlib-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/matplotlib-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/matplotlib-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326390",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/modules.md": {
      "document": {
        "title": "Python Modules",
        "slug": "modules",
        "order": 23,
        "description": "Understand how to create and use modules to organize your Python code.",
        "category": "Python Packages",
        "body": {
          "raw": "\n## Python Modules\n\nThis tutorial explains what Python modules are, how to create your own, and how to use the `import` statement to bring functionality from one module into another.\n",
          "html": "<h2>Python Modules</h2>\n<p>This tutorial explains what Python modules are, how to create your own, and how to use the <code>import</code> statement to bring functionality from one module into another.</p>"
        },
        "_id": "tutorials/python/modules.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/modules.md",
          "sourceFileName": "modules.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/modules"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/modules",
        "language": "python"
      },
      "documentHash": "1754564326362",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/mongodb-tutorial.md": {
      "document": {
        "title": "Python MongoDB Tutorial",
        "slug": "mongodb-tutorial",
        "order": 21,
        "description": "Learn how to connect to and interact with a MongoDB database using Python.",
        "category": "Python Database Tutorial",
        "body": {
          "raw": "\n## Python MongoDB Tutorial\n\nThis tutorial provides a guide on using Python with MongoDB, covering how to perform CRUD (Create, Read, Update, Delete) operations with the `pymongo` library.\n",
          "html": "<h2>Python MongoDB Tutorial</h2>\n<p>This tutorial provides a guide on using Python with MongoDB, covering how to perform CRUD (Create, Read, Update, Delete) operations with the <code>pymongo</code> library.</p>"
        },
        "_id": "tutorials/python/mongodb-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/mongodb-tutorial.md",
          "sourceFileName": "mongodb-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/mongodb-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/mongodb-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326307",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/mysql-tutorial.md": {
      "document": {
        "title": "Python MySQL",
        "slug": "mysql-tutorial",
        "order": 22,
        "description": "Learn to connect Python applications to a MySQL database.",
        "category": "Python Database Tutorial",
        "body": {
          "raw": "\n## Python MySQL\n\nThis tutorial walks you through connecting to a MySQL database with Python, executing SQL queries, and fetching results using popular libraries like `mysql-connector-python`.\n",
          "html": "<h2>Python MySQL</h2>\n<p>This tutorial walks you through connecting to a MySQL database with Python, executing SQL queries, and fetching results using popular libraries like <code>mysql-connector-python</code>.</p>"
        },
        "_id": "tutorials/python/mysql-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/mysql-tutorial.md",
          "sourceFileName": "mysql-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/mysql-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/mysql-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326340",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/numpy-tutorial.md": {
      "document": {
        "title": "NumPy Tutorial - Python Library",
        "slug": "numpy-tutorial",
        "order": 25,
        "description": "A beginner's guide to NumPy for numerical computing in Python.",
        "category": "Data Science with Python",
        "body": {
          "raw": "\n## NumPy Tutorial\n\nThis tutorial introduces NumPy, the fundamental package for numerical computation in Python. Learn about NumPy arrays, vectorization, and powerful mathematical functions.\n",
          "html": "<h2>NumPy Tutorial</h2>\n<p>This tutorial introduces NumPy, the fundamental package for numerical computation in Python. Learn about NumPy arrays, vectorization, and powerful mathematical functions.</p>"
        },
        "_id": "tutorials/python/numpy-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/numpy-tutorial.md",
          "sourceFileName": "numpy-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/numpy-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/numpy-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326381",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/oop-concepts.md": {
      "document": {
        "title": "Python OOPs Concepts",
        "slug": "oop-concepts",
        "order": 18,
        "description": "An introduction to Object-Oriented Programming (OOP) in Python.",
        "category": "Advanced Python",
        "body": {
          "raw": "\n## Python OOPs Concepts\n\nThis tutorial introduces the core concepts of Object-Oriented Programming (OOP) in Python, including classes, objects, inheritance, encapsulation, and polymorphism.\n",
          "html": "<h2>Python OOPs Concepts</h2>\n<p>This tutorial introduces the core concepts of Object-Oriented Programming (OOP) in Python, including classes, objects, inheritance, encapsulation, and polymorphism.</p>"
        },
        "_id": "tutorials/python/oop-concepts.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/oop-concepts.md",
          "sourceFileName": "oop-concepts.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/oop-concepts"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/oop-concepts",
        "language": "python"
      },
      "documentHash": "1754564326260",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/operators.md": {
      "document": {
        "title": "Python Operators",
        "slug": "operators",
        "order": 4,
        "description": "Understand the various operators in Python for arithmetic, comparison, and logical operations.",
        "category": "Python Fundamentals",
        "body": {
          "raw": "\n## Python Operators\n\nThis tutorial explains the different types of operators in Python, including arithmetic, assignment, comparison, and logical operators, which are used to perform operations on variables and values.\n",
          "html": "<h2>Python Operators</h2>\n<p>This tutorial explains the different types of operators in Python, including arithmetic, assignment, comparison, and logical operators, which are used to perform operations on variables and values.</p>"
        },
        "_id": "tutorials/python/operators.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/operators.md",
          "sourceFileName": "operators.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/operators"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/operators",
        "language": "python"
      },
      "documentHash": "1754564325973",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/pandas-tutorial.md": {
      "document": {
        "title": "Pandas Tutorial",
        "slug": "pandas-tutorial",
        "order": 26,
        "description": "Learn the basics of data analysis and manipulation with the Pandas library.",
        "category": "Data Science with Python",
        "body": {
          "raw": "\n## Pandas Tutorial\n\nThis tutorial covers Pandas, a powerful library for data analysis in Python. Learn how to work with DataFrames and Series to clean, transform, and analyze data.\n",
          "html": "<h2>Pandas Tutorial</h2>\n<p>This tutorial covers Pandas, a powerful library for data analysis in Python. Learn how to work with DataFrames and Series to clean, transform, and analyze data.</p>"
        },
        "_id": "tutorials/python/pandas-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/pandas-tutorial.md",
          "sourceFileName": "pandas-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/pandas-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/pandas-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326385",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/python-decorators.md": {
      "document": {
        "title": "Understanding Python Decorators",
        "slug": "python-decorators",
        "order": 6,
        "description": "A practical guide to understanding and using decorators in Python.",
        "category": "Functions",
        "body": {
          "raw": "\n## What are Decorators?\n\nIn Python, a decorator is a design pattern that allows you to add new functionality to an existing object (like a function or method) without modifying its structure. Decorators are a form of metaprogramming, where a part of the program tries to modify another part of the program at compile time. They are often used for logging, access control, instrumentation, and more.\n\n## Basic Decorator Syntax\n\nA decorator is typically a function that takes another function as an argument (the decorated function), adds some functionality, and then returns another function.\n\n```python\ndef my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"Something is happening before the function is called.\")\n        result = func(*args, **kwargs)\n        print(\"Something is happening after the function is called.\")\n        return result\n    return wrapper\n\n@my_decorator\ndef say_hello(name):\n    print(f\"Hello, {name}!\")\n\nsay_hello(\"World\")\n```\n\nThis will output:\n```\nSomething is happening before the function is called.\nHello, World!\nSomething is happening after the function is called.\n```\n\n## Using `functools.wraps`\n\nWhen you use decorators, you are essentially replacing the original function with the wrapper function. This can obscure the original function's metadata (like its name, docstring, etc.). The `functools.wraps` decorator can be used to preserve this metadata.\n\n```python\nimport functools\n\ndef my_better_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Wrapper executing pre-call actions.\")\n        value = func(*args, **kwargs)\n        print(\"Wrapper executing post-call actions.\")\n        return value\n    return wrapper\n\n@my_better_decorator\ndef greet(name):\n    \"\"\"Greets a person.\"\"\"\n    return f\"Greetings, {name}!\"\n\nprint(greet(\"Pythonista\"))\nprint(greet.__name__) # Output: greet (thanks to @functools.wraps)\nprint(greet.__doc__)  # Output: Greets a person. (thanks to @functools.wraps)\n```\n\nDecorators are a very useful tool in Python for writing cleaner and more modular code.\n",
          "html": "<h2>What are Decorators?</h2>\n<p>In Python, a decorator is a design pattern that allows you to add new functionality to an existing object (like a function or method) without modifying its structure. Decorators are a form of metaprogramming, where a part of the program tries to modify another part of the program at compile time. They are often used for logging, access control, instrumentation, and more.</p>\n<h2>Basic Decorator Syntax</h2>\n<p>A decorator is typically a function that takes another function as an argument (the decorated function), adds some functionality, and then returns another function.</p>\n<pre><code class=\"language-python\">def my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"Something is happening before the function is called.\")\n        result = func(*args, **kwargs)\n        print(\"Something is happening after the function is called.\")\n        return result\n    return wrapper\n\n@my_decorator\ndef say_hello(name):\n    print(f\"Hello, {name}!\")\n\nsay_hello(\"World\")\n</code></pre>\n<p>This will output:</p>\n<pre><code>Something is happening before the function is called.\nHello, World!\nSomething is happening after the function is called.\n</code></pre>\n<h2>Using <code>functools.wraps</code></h2>\n<p>When you use decorators, you are essentially replacing the original function with the wrapper function. This can obscure the original function's metadata (like its name, docstring, etc.). The <code>functools.wraps</code> decorator can be used to preserve this metadata.</p>\n<pre><code class=\"language-python\">import functools\n\ndef my_better_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Wrapper executing pre-call actions.\")\n        value = func(*args, **kwargs)\n        print(\"Wrapper executing post-call actions.\")\n        return value\n    return wrapper\n\n@my_better_decorator\ndef greet(name):\n    \"\"\"Greets a person.\"\"\"\n    return f\"Greetings, {name}!\"\n\nprint(greet(\"Pythonista\"))\nprint(greet.__name__) # Output: greet (thanks to @functools.wraps)\nprint(greet.__doc__)  # Output: Greets a person. (thanks to @functools.wraps)\n</code></pre>\n<p>Decorators are a very useful tool in Python for writing cleaner and more modular code.</p>"
        },
        "_id": "tutorials/python/python-decorators.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/python-decorators.md",
          "sourceFileName": "python-decorators.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/python-decorators"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/python-decorators",
        "language": "python"
      },
      "documentHash": "1753978179903",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/pytorch-tutorial.md": {
      "document": {
        "title": "PyTorch Tutorial",
        "slug": "pytorch-tutorial",
        "order": 32,
        "description": "Learn the fundamentals of deep learning with PyTorch.",
        "category": "Data Science with Python",
        "body": {
          "raw": "\n## PyTorch Tutorial\n\nThis tutorial introduces PyTorch, an open-source machine learning library known for its flexibility and ease of use in building deep learning models.\n",
          "html": "<h2>PyTorch Tutorial</h2>\n<p>This tutorial introduces PyTorch, an open-source machine learning library known for its flexibility and ease of use in building deep learning models.</p>"
        },
        "_id": "tutorials/python/pytorch-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/pytorch-tutorial.md",
          "sourceFileName": "pytorch-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/pytorch-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/pytorch-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326433",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/recursion.md": {
      "document": {
        "title": "Recursion in Python",
        "slug": "recursion",
        "order": 9,
        "description": "Understand the concept of recursion and how to write recursive functions in Python.",
        "category": "Python Fundamentals",
        "body": {
          "raw": "\n## Recursion in Python\n\nThis tutorial explains recursion, a programming technique where a function calls itself to solve a problem. We will cover the base case, the recursive step, and provide examples.\n",
          "html": "<h2>Recursion in Python</h2>\n<p>This tutorial explains recursion, a programming technique where a function calls itself to solve a problem. We will cover the base case, the recursive step, and provide examples.</p>"
        },
        "_id": "tutorials/python/recursion.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/recursion.md",
          "sourceFileName": "recursion.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/recursion"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/recursion",
        "language": "python"
      },
      "documentHash": "1754564326161",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/scikit-learn-tutorial.md": {
      "document": {
        "title": "Learning Model Building in Scikit-learn",
        "slug": "scikit-learn-tutorial",
        "order": 30,
        "description": "An introduction to building machine learning models with Scikit-learn.",
        "category": "Data Science with Python",
        "body": {
          "raw": "\n## Scikit-learn Tutorial\n\nThis tutorial introduces Scikit-learn, one of the most popular machine learning libraries in Python. Learn how to implement common ML algorithms for classification, regression, and clustering.\n",
          "html": "<h2>Scikit-learn Tutorial</h2>\n<p>This tutorial introduces Scikit-learn, one of the most popular machine learning libraries in Python. Learn how to implement common ML algorithms for classification, regression, and clustering.</p>"
        },
        "_id": "tutorials/python/scikit-learn-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/scikit-learn-tutorial.md",
          "sourceFileName": "scikit-learn-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/scikit-learn-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/scikit-learn-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326411",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/seaborn-tutorial.md": {
      "document": {
        "title": "Python Seaborn Tutorial",
        "slug": "seaborn-tutorial",
        "order": 28,
        "description": "Learn to create beautiful and informative statistical graphics with Seaborn.",
        "category": "Data Science with Python",
        "body": {
          "raw": "\n## Python Seaborn Tutorial\n\nThis tutorial explores Seaborn, a Python data visualization library based on Matplotlib that provides a high-level interface for drawing attractive and informative statistical graphics.\n",
          "html": "<h2>Python Seaborn Tutorial</h2>\n<p>This tutorial explores Seaborn, a Python data visualization library based on Matplotlib that provides a high-level interface for drawing attractive and informative statistical graphics.</p>"
        },
        "_id": "tutorials/python/seaborn-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/seaborn-tutorial.md",
          "sourceFileName": "seaborn-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/seaborn-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/seaborn-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326397",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/sets.md": {
      "document": {
        "title": "Python Sets",
        "slug": "sets",
        "order": 15,
        "description": "Learn about sets for storing unique, unordered elements and performing mathematical set operations.",
        "category": "Python Data Structures",
        "body": {
          "raw": "\n## Python Sets\n\nThis tutorial explores Python sets, an unordered collection of unique items. Learn how to create sets and perform operations like union, intersection, and difference.\n",
          "html": "<h2>Python Sets</h2>\n<p>This tutorial explores Python sets, an unordered collection of unique items. Learn how to create sets and perform operations like union, intersection, and difference.</p>"
        },
        "_id": "tutorials/python/sets.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/sets.md",
          "sourceFileName": "sets.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/sets"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/sets",
        "language": "python"
      },
      "documentHash": "1754564326213",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/statsmodel-tutorial.md": {
      "document": {
        "title": "StatsModel Library - Tutorial",
        "slug": "statsmodel-tutorial",
        "order": 29,
        "description": "A guide to statistical modeling and testing using the StatsModel library.",
        "category": "Data Science with Python",
        "body": {
          "raw": "\n## StatsModel Library Tutorial\n\nThis tutorial covers the StatsModel library, which provides classes and functions for the estimation of many different statistical models, as well as for conducting statistical tests and data exploration.\n",
          "html": "<h2>StatsModel Library Tutorial</h2>\n<p>This tutorial covers the StatsModel library, which provides classes and functions for the estimation of many different statistical models, as well as for conducting statistical tests and data exploration.</p>"
        },
        "_id": "tutorials/python/statsmodel-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/statsmodel-tutorial.md",
          "sourceFileName": "statsmodel-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/statsmodel-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/statsmodel-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326404",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/strings.md": {
      "document": {
        "title": "Python String",
        "slug": "strings",
        "order": 11,
        "description": "A deep dive into creating, manipulating, and formatting strings in Python.",
        "category": "Python Data Structures",
        "body": {
          "raw": "\n## Python String\n\nThis tutorial covers everything you need to know about working with strings in Python, including slicing, methods, formatting, and common operations.\n",
          "html": "<h2>Python String</h2>\n<p>This tutorial covers everything you need to know about working with strings in Python, including slicing, methods, formatting, and common operations.</p>"
        },
        "_id": "tutorials/python/strings.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/strings.md",
          "sourceFileName": "strings.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/strings"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/strings",
        "language": "python"
      },
      "documentHash": "1754564326187",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/tensorflow-tutorial.md": {
      "document": {
        "title": "TensorFlow Tutorial",
        "slug": "tensorflow-tutorial",
        "order": 31,
        "description": "A beginner's guide to building and training models with TensorFlow.",
        "category": "Data Science with Python",
        "body": {
          "raw": "\n## TensorFlow Tutorial\n\nThis tutorial provides an introduction to TensorFlow, an end-to-end open-source platform for machine learning, focusing on building and training neural networks.\n",
          "html": "<h2>TensorFlow Tutorial</h2>\n<p>This tutorial provides an introduction to TensorFlow, an end-to-end open-source platform for machine learning, focusing on building and training neural networks.</p>"
        },
        "_id": "tutorials/python/tensorflow-tutorial.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/tensorflow-tutorial.md",
          "sourceFileName": "tensorflow-tutorial.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/tensorflow-tutorial"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/tensorflow-tutorial",
        "language": "python"
      },
      "documentHash": "1754564326413",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/tuples.md": {
      "document": {
        "title": "Python Tuples",
        "slug": "tuples",
        "order": 13,
        "description": "Understand immutable sequences using tuples in Python.",
        "category": "Python Data Structures",
        "body": {
          "raw": "\n## Python Tuples\n\nThis tutorial explains tuples, an immutable data structure in Python. Learn when and why to use tuples over lists, and how to perform common operations.\n",
          "html": "<h2>Python Tuples</h2>\n<p>This tutorial explains tuples, an immutable data structure in Python. Learn when and why to use tuples over lists, and how to perform common operations.</p>"
        },
        "_id": "tutorials/python/tuples.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/tuples.md",
          "sourceFileName": "tuples.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/tuples"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/tuples",
        "language": "python"
      },
      "documentHash": "1754564326198",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/variables-and-data-types.md": {
      "document": {
        "title": "Python Variables and Data Types",
        "slug": "python-variables-data-types",
        "order": 2,
        "description": "Learn about variables, naming conventions, and fundamental data types in Python.",
        "category": "Fundamentals",
        "body": {
          "raw": "\n## Variables\n\nIn Python, variables are used to store data values. A variable is created the moment you first assign a value to it. Python has no command for declaring a variable in the way languages like C++ or Java do.\n\n```python\nx = 5       # x is an integer\ny = \"Hello\" # y is a string\nprint(x)\nprint(y)\n```\n\n### Naming Variables (Identifiers)\n\n- A variable name must start with a letter (a-z, A-Z) or an underscore character (`_`).\n- It cannot start with a number.\n- It can only contain alpha-numeric characters and underscores (A-z, 0-9, and `_`).\n- Variable names are case-sensitive (`age`, `Age` and `AGE` are three different variables).\n\n## Data Types\n\nPython has various built-in data types. Here are some of the most fundamental ones:\n\n- **Text Type**: `str`\n- **Numeric Types**: `int`, `float`, `complex`\n- **Sequence Types**: `list`, `tuple`, `range`\n- **Mapping Type**: `dict`\n- **Set Types**: `set`, `frozenset`\n- **Boolean Type**: `bool`\n- **Binary Types**: `bytes`, `bytearray`, `memoryview`\n\nYou can get the data type of any object by using the `type()` function:\n\n```python\nmy_string = \"Python is fun\"\nprint(type(my_string))  # <class 'str'>\n```\n\n### Numeric Types\n\n- **`int`**: Integer, for whole numbers. e.g., `100`, `-5`\n- **`float`**: Floating Point Number, for numbers with a decimal point. e.g., `3.14`, `-0.01`\n- **`complex`**: For complex numbers. e.g., `1 + 2j`\n\n### Text Type\n\n- **`str`**: String, for textual data. Enclosed in single (`'`) or double (`\"`) quotes.\n\n### Sequence Types\n\n- **`list`**: An ordered and changeable collection. Allows duplicate members. e.g., `[\"apple\", \"banana\"]`\n- **`tuple`**: An ordered and unchangeable collection. Allows duplicate members. e.g., `(\"apple\", \"banana\")`\n- **`range`**: A sequence of numbers, often used for looping.\n\n### Mapping Type\n\n- **`dict`**: A collection of key-value pairs. Unordered, changeable, and indexed. No duplicate keys. e.g., `{\"name\": \"Alice\", \"age\": 30}`\n\n### Set Types\n\n- **`set`**: An unordered, unchangeable*, and unindexed collection. No duplicate members. e.g., `{\"apple\", \"banana\"}`\n- **`frozenset`**: An immutable version of a set.\n\n*\\*Set items are unchangeable, but you can add or remove items.*\n\n### Boolean Type\n\n- **`bool`**: Represents one of two values: `True` or `False`.\n\nUnderstanding variables and data types is the first crucial step in writing any Python program.\n",
          "html": "<h2>Variables</h2>\n<p>In Python, variables are used to store data values. A variable is created the moment you first assign a value to it. Python has no command for declaring a variable in the way languages like C++ or Java do.</p>\n<pre><code class=\"language-python\">x = 5       # x is an integer\ny = \"Hello\" # y is a string\nprint(x)\nprint(y)\n</code></pre>\n<h3>Naming Variables (Identifiers)</h3>\n<ul>\n<li>A variable name must start with a letter (a-z, A-Z) or an underscore character (<code>_</code>).</li>\n<li>It cannot start with a number.</li>\n<li>It can only contain alpha-numeric characters and underscores (A-z, 0-9, and <code>_</code>).</li>\n<li>Variable names are case-sensitive (<code>age</code>, <code>Age</code> and <code>AGE</code> are three different variables).</li>\n</ul>\n<h2>Data Types</h2>\n<p>Python has various built-in data types. Here are some of the most fundamental ones:</p>\n<ul>\n<li><strong>Text Type</strong>: <code>str</code></li>\n<li><strong>Numeric Types</strong>: <code>int</code>, <code>float</code>, <code>complex</code></li>\n<li><strong>Sequence Types</strong>: <code>list</code>, <code>tuple</code>, <code>range</code></li>\n<li><strong>Mapping Type</strong>: <code>dict</code></li>\n<li><strong>Set Types</strong>: <code>set</code>, <code>frozenset</code></li>\n<li><strong>Boolean Type</strong>: <code>bool</code></li>\n<li><strong>Binary Types</strong>: <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></li>\n</ul>\n<p>You can get the data type of any object by using the <code>type()</code> function:</p>\n<pre><code class=\"language-python\">my_string = \"Python is fun\"\nprint(type(my_string))  # &#x3C;class 'str'>\n</code></pre>\n<h3>Numeric Types</h3>\n<ul>\n<li><strong><code>int</code></strong>: Integer, for whole numbers. e.g., <code>100</code>, <code>-5</code></li>\n<li><strong><code>float</code></strong>: Floating Point Number, for numbers with a decimal point. e.g., <code>3.14</code>, <code>-0.01</code></li>\n<li><strong><code>complex</code></strong>: For complex numbers. e.g., <code>1 + 2j</code></li>\n</ul>\n<h3>Text Type</h3>\n<ul>\n<li><strong><code>str</code></strong>: String, for textual data. Enclosed in single (<code>'</code>) or double (<code>\"</code>) quotes.</li>\n</ul>\n<h3>Sequence Types</h3>\n<ul>\n<li><strong><code>list</code></strong>: An ordered and changeable collection. Allows duplicate members. e.g., <code>[\"apple\", \"banana\"]</code></li>\n<li><strong><code>tuple</code></strong>: An ordered and unchangeable collection. Allows duplicate members. e.g., <code>(\"apple\", \"banana\")</code></li>\n<li><strong><code>range</code></strong>: A sequence of numbers, often used for looping.</li>\n</ul>\n<h3>Mapping Type</h3>\n<ul>\n<li><strong><code>dict</code></strong>: A collection of key-value pairs. Unordered, changeable, and indexed. No duplicate keys. e.g., <code>{\"name\": \"Alice\", \"age\": 30}</code></li>\n</ul>\n<h3>Set Types</h3>\n<ul>\n<li><strong><code>set</code></strong>: An unordered, unchangeable*, and unindexed collection. No duplicate members. e.g., <code>{\"apple\", \"banana\"}</code></li>\n<li><strong><code>frozenset</code></strong>: An immutable version of a set.</li>\n</ul>\n<p><em>*Set items are unchangeable, but you can add or remove items.</em></p>\n<h3>Boolean Type</h3>\n<ul>\n<li><strong><code>bool</code></strong>: Represents one of two values: <code>True</code> or <code>False</code>.</li>\n</ul>\n<p>Understanding variables and data types is the first crucial step in writing any Python program.</p>"
        },
        "_id": "tutorials/python/variables-and-data-types.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/variables-and-data-types.md",
          "sourceFileName": "variables-and-data-types.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/variables-and-data-types"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/python-variables-data-types",
        "language": "python"
      },
      "documentHash": "1754675092938",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/python/variables.md": {
      "document": {
        "title": "Variables in Python",
        "slug": "variables",
        "order": 2,
        "description": "Learn about variables, naming conventions, and assignment in Python.",
        "category": "Fundamentals",
        "body": {
          "raw": "\n## Understanding Variables in Python\n\nIn Python, variables are used to store data values. Python has no command for declaring a variable; a variable is created the moment you first assign a value to it.\n\n```python\nx = 5       # x is of type int\ny = \"Hello\" # y is of type str\nprint(x)\nprint(y)\n```\n\n### Naming Variables\n\n- A variable name must start with a letter or the underscore character.\n- A variable name cannot start with a number.\n- A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ).\n- Variable names are case-sensitive (age, Age and AGE are three different variables).\n\nThis tutorial covers Python variables in more detail.\n",
          "html": "<h2>Understanding Variables in Python</h2>\n<p>In Python, variables are used to store data values. Python has no command for declaring a variable; a variable is created the moment you first assign a value to it.</p>\n<pre><code class=\"language-python\">x = 5       # x is of type int\ny = \"Hello\" # y is of type str\nprint(x)\nprint(y)\n</code></pre>\n<h3>Naming Variables</h3>\n<ul>\n<li>A variable name must start with a letter or the underscore character.</li>\n<li>A variable name cannot start with a number.</li>\n<li>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ).</li>\n<li>Variable names are case-sensitive (age, Age and AGE are three different variables).</li>\n</ul>\n<p>This tutorial covers Python variables in more detail.</p>"
        },
        "_id": "tutorials/python/variables.md",
        "_raw": {
          "sourceFilePath": "tutorials/python/variables.md",
          "sourceFileName": "variables.md",
          "sourceFileDir": "tutorials/python",
          "contentType": "markdown",
          "flattenedPath": "tutorials/python/variables"
        },
        "type": "TutorialPost",
        "url": "/tutorial/python/variables",
        "language": "python"
      },
      "documentHash": "1754564102120",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/r/introduction.md": {
      "document": {
        "title": "Introduction to R",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of R, a language and environment for statistical computing and graphics.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is R?\n\nR is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing. The R language is widely used among statisticians and data miners for developing statistical software and data analysis.\n",
          "html": "<h2>What is R?</h2>\n<p>R is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing. The R language is widely used among statisticians and data miners for developing statistical software and data analysis.</p>"
        },
        "_id": "tutorials/r/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/r/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/r",
          "contentType": "markdown",
          "flattenedPath": "tutorials/r/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/r/introduction",
        "language": "r"
      },
      "documentHash": "1754562111329",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/ruby/introduction.md": {
      "document": {
        "title": "Introduction to Ruby",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of Ruby, a dynamic, open-source programming language with a focus on simplicity and productivity.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is Ruby?\n\nRuby is an interpreted, high-level, general-purpose programming language. It was designed and developed in the mid-1990s by Yukihiro \"Matz\" Matsumoto in Japan. Ruby is dynamically typed and uses garbage collection and just-in-time compilation. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming.\n",
          "html": "<h2>What is Ruby?</h2>\n<p>Ruby is an interpreted, high-level, general-purpose programming language. It was designed and developed in the mid-1990s by Yukihiro \"Matz\" Matsumoto in Japan. Ruby is dynamically typed and uses garbage collection and just-in-time compilation. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming.</p>"
        },
        "_id": "tutorials/ruby/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/ruby/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/ruby",
          "contentType": "markdown",
          "flattenedPath": "tutorials/ruby/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/ruby/introduction",
        "language": "ruby"
      },
      "documentHash": "1754561237477",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/rust/introduction.md": {
      "document": {
        "title": "Introduction to Rust",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of Rust, a language empowering everyone to build reliable and efficient software.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is Rust?\n\nRust is a multi-paradigm, high-level, general-purpose programming language that emphasizes performance, type safety, and concurrency. It enforces memory safety—meaning that all references point to valid memory—without needing a garbage collector or reference counting present in other memory-safe languages.\n",
          "html": "<h2>What is Rust?</h2>\n<p>Rust is a multi-paradigm, high-level, general-purpose programming language that emphasizes performance, type safety, and concurrency. It enforces memory safety—meaning that all references point to valid memory—without needing a garbage collector or reference counting present in other memory-safe languages.</p>"
        },
        "_id": "tutorials/rust/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/rust/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/rust",
          "contentType": "markdown",
          "flattenedPath": "tutorials/rust/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/rust/introduction",
        "language": "rust"
      },
      "documentHash": "1754562111337",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/scala/introduction.md": {
      "document": {
        "title": "Introduction to Scala",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of Scala, a strong statically typed general-purpose programming language that supports both object-oriented and functional programming.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is Scala?\n\nScala is a high-level language that combines object-oriented and functional programming in one concise language. Scala's static types help avoid bugs in complex applications, and its JVM and JavaScript runtimes let you build high-performance systems with easy access to huge ecosystems of libraries.\n",
          "html": "<h2>What is Scala?</h2>\n<p>Scala is a high-level language that combines object-oriented and functional programming in one concise language. Scala's static types help avoid bugs in complex applications, and its JVM and JavaScript runtimes let you build high-performance systems with easy access to huge ecosystems of libraries.</p>"
        },
        "_id": "tutorials/scala/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/scala/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/scala",
          "contentType": "markdown",
          "flattenedPath": "tutorials/scala/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/scala/introduction",
        "language": "scala"
      },
      "documentHash": "1754562111342",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/shell/introduction.md": {
      "document": {
        "title": "Introduction to Shell Scripting",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of Shell Scripting for automating command-line tasks on Unix-like operating systems.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is Shell Scripting?\n\nA shell script is a computer program designed to be run by a Unix shell, a command-line interpreter. The various dialects of shell scripts are considered to be scripting languages. Typical operations performed by shell scripts include file manipulation, program execution, and printing text. A script which sets up the environment, runs the program, and does any necessary cleanup, logging, etc. is called a wrapper.\n",
          "html": "<h2>What is Shell Scripting?</h2>\n<p>A shell script is a computer program designed to be run by a Unix shell, a command-line interpreter. The various dialects of shell scripts are considered to be scripting languages. Typical operations performed by shell scripts include file manipulation, program execution, and printing text. A script which sets up the environment, runs the program, and does any necessary cleanup, logging, etc. is called a wrapper.</p>"
        },
        "_id": "tutorials/shell/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/shell/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/shell",
          "contentType": "markdown",
          "flattenedPath": "tutorials/shell/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/shell/introduction",
        "language": "shell"
      },
      "documentHash": "1754562111361",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/sql/introduction.md": {
      "document": {
        "title": "Introduction to SQL",
        "slug": "introduction-to-sql",
        "order": 1,
        "description": "A brief overview of SQL and its role in managing relational databases.",
        "category": "Databases",
        "body": {
          "raw": "\n## What is SQL?\n\nSQL (Structured Query Language) is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS). It is a standard language for accessing and manipulating databases.\n\n### What can SQL do?\n\n- SQL can execute queries against a database\n- SQL can retrieve data from a database\n- SQL can insert records in a database\n- SQL can update records in a database\n- SQL can delete records from a database\n- SQL can create new databases\n- SQL can create new tables in a database\n- SQL can create stored procedures in a database\n- SQL can create views in a database\n- SQL can set permissions on tables, procedures, and views\n\n### Example Query\n\nHere is an example of a simple SQL query to select all records from a \"Customers\" table:\n\n```sql\nSELECT * FROM Customers;\n```\n\nTo select only customers from a specific country, you could use a `WHERE` clause:\n\n```sql\nSELECT * FROM Customers\nWHERE Country = 'Germany';\n```\n\nSQL is an essential skill for data analysts, backend developers, and anyone involved in managing large-scale data. Different database systems have their own dialect of SQL (e.g., T-SQL for Microsoft SQL Server, PL/SQL for Oracle), but the core commands are largely standardized.",
          "html": "<h2>What is SQL?</h2>\n<p>SQL (Structured Query Language) is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS). It is a standard language for accessing and manipulating databases.</p>\n<h3>What can SQL do?</h3>\n<ul>\n<li>SQL can execute queries against a database</li>\n<li>SQL can retrieve data from a database</li>\n<li>SQL can insert records in a database</li>\n<li>SQL can update records in a database</li>\n<li>SQL can delete records from a database</li>\n<li>SQL can create new databases</li>\n<li>SQL can create new tables in a database</li>\n<li>SQL can create stored procedures in a database</li>\n<li>SQL can create views in a database</li>\n<li>SQL can set permissions on tables, procedures, and views</li>\n</ul>\n<h3>Example Query</h3>\n<p>Here is an example of a simple SQL query to select all records from a \"Customers\" table:</p>\n<pre><code class=\"language-sql\">SELECT * FROM Customers;\n</code></pre>\n<p>To select only customers from a specific country, you could use a <code>WHERE</code> clause:</p>\n<pre><code class=\"language-sql\">SELECT * FROM Customers\nWHERE Country = 'Germany';\n</code></pre>\n<p>SQL is an essential skill for data analysts, backend developers, and anyone involved in managing large-scale data. Different database systems have their own dialect of SQL (e.g., T-SQL for Microsoft SQL Server, PL/SQL for Oracle), but the core commands are largely standardized.</p>"
        },
        "_id": "tutorials/sql/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/sql/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/sql",
          "contentType": "markdown",
          "flattenedPath": "tutorials/sql/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/sql/introduction-to-sql",
        "language": "sql"
      },
      "documentHash": "1754563588964",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/swift/introduction.md": {
      "document": {
        "title": "Introduction to Swift",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of Swift, the powerful and intuitive programming language for macOS, iOS, watchOS, and tvOS.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is Swift?\n\nSwift is a general-purpose, multi-paradigm, compiled programming language developed by Apple Inc. and the open-source community. First released in 2014, Swift was developed as a replacement for Apple's earlier programming language Objective-C, as Objective-C had been largely unchanged since the early 1980s and lacked modern language features.\n",
          "html": "<h2>What is Swift?</h2>\n<p>Swift is a general-purpose, multi-paradigm, compiled programming language developed by Apple Inc. and the open-source community. First released in 2014, Swift was developed as a replacement for Apple's earlier programming language Objective-C, as Objective-C had been largely unchanged since the early 1980s and lacked modern language features.</p>"
        },
        "_id": "tutorials/swift/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/swift/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/swift",
          "contentType": "markdown",
          "flattenedPath": "tutorials/swift/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/swift/introduction",
        "language": "swift"
      },
      "documentHash": "1754562111327",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/typescript/introduction.md": {
      "document": {
        "title": "Introduction to TypeScript",
        "slug": "introduction-to-typescript",
        "order": 1,
        "description": "An introduction to TypeScript and its relationship with JavaScript.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is TypeScript?\n\nTypeScript is a free and open-source high-level programming language developed by Microsoft that adds static typing with optional type annotations to JavaScript. It is designed for the development of large applications and transpiles to JavaScript.\n\n### Why use TypeScript?\n\nJavaScript is a dynamically typed language. This means you don't have to specify the type of a variable, which offers flexibility but can lead to bugs in large-scale applications. TypeScript solves this problem by adding types to JavaScript.\n\n- **Static Typing**: Catch errors during development, before the code is run. This leads to more robust code.\n- **Better Tooling**: Types allow for better autocompletion, navigation, and refactoring in code editors like VS Code.\n- **Readability**: Explicit types can make the code easier to read and understand.\n- **Modern JavaScript Features**: TypeScript lets you use the latest features of JavaScript, even if they aren't supported by all browsers yet, by compiling them down to an older version.\n\n### TypeScript Example\n\nHere is a simple example in TypeScript:\n\n```typescript\nfunction greet(person: string, date: Date) {\n  console.log(`Hello ${person}, today is ${date.toDateString()}!`);\n}\n\ngreet(\"Brendan\", new Date());\n```\n\nIf you were to call `greet(\"Brendan\", \"2024-07-10\")`, TypeScript would give you an error because you are passing a string instead of a `Date` object. Plain JavaScript would only fail at runtime.\n\nBecause TypeScript is a superset of JavaScript, any valid JavaScript code is also valid TypeScript code. This makes it easy to adopt TypeScript in existing JavaScript projects.",
          "html": "<h2>What is TypeScript?</h2>\n<p>TypeScript is a free and open-source high-level programming language developed by Microsoft that adds static typing with optional type annotations to JavaScript. It is designed for the development of large applications and transpiles to JavaScript.</p>\n<h3>Why use TypeScript?</h3>\n<p>JavaScript is a dynamically typed language. This means you don't have to specify the type of a variable, which offers flexibility but can lead to bugs in large-scale applications. TypeScript solves this problem by adding types to JavaScript.</p>\n<ul>\n<li><strong>Static Typing</strong>: Catch errors during development, before the code is run. This leads to more robust code.</li>\n<li><strong>Better Tooling</strong>: Types allow for better autocompletion, navigation, and refactoring in code editors like VS Code.</li>\n<li><strong>Readability</strong>: Explicit types can make the code easier to read and understand.</li>\n<li><strong>Modern JavaScript Features</strong>: TypeScript lets you use the latest features of JavaScript, even if they aren't supported by all browsers yet, by compiling them down to an older version.</li>\n</ul>\n<h3>TypeScript Example</h3>\n<p>Here is a simple example in TypeScript:</p>\n<pre><code class=\"language-typescript\">function greet(person: string, date: Date) {\n  console.log(`Hello ${person}, today is ${date.toDateString()}!`);\n}\n\ngreet(\"Brendan\", new Date());\n</code></pre>\n<p>If you were to call <code>greet(\"Brendan\", \"2024-07-10\")</code>, TypeScript would give you an error because you are passing a string instead of a <code>Date</code> object. Plain JavaScript would only fail at runtime.</p>\n<p>Because TypeScript is a superset of JavaScript, any valid JavaScript code is also valid TypeScript code. This makes it easy to adopt TypeScript in existing JavaScript projects.</p>"
        },
        "_id": "tutorials/typescript/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/typescript/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/typescript",
          "contentType": "markdown",
          "flattenedPath": "tutorials/typescript/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/typescript/introduction-to-typescript",
        "language": "typescript"
      },
      "documentHash": "1754563588970",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    },
    "tutorials/vba/introduction.md": {
      "document": {
        "title": "Introduction to VBA",
        "slug": "introduction",
        "order": 1,
        "description": "An overview of VBA (Visual Basic for Applications), a programming language to automate tasks in Microsoft Office applications.",
        "category": "Getting Started",
        "body": {
          "raw": "\n## What is VBA?\n\nVisual Basic for Applications (VBA) is an implementation of Microsoft's event-driven programming language Visual Basic 6, which was discontinued in 2008, and its associated integrated development environment (IDE). VBA is built into most Microsoft Office applications and is used to automate repetitive tasks, create custom forms, and add new functionality.\n",
          "html": "<h2>What is VBA?</h2>\n<p>Visual Basic for Applications (VBA) is an implementation of Microsoft's event-driven programming language Visual Basic 6, which was discontinued in 2008, and its associated integrated development environment (IDE). VBA is built into most Microsoft Office applications and is used to automate repetitive tasks, create custom forms, and add new functionality.</p>"
        },
        "_id": "tutorials/vba/introduction.md",
        "_raw": {
          "sourceFilePath": "tutorials/vba/introduction.md",
          "sourceFileName": "introduction.md",
          "sourceFileDir": "tutorials/vba",
          "contentType": "markdown",
          "flattenedPath": "tutorials/vba/introduction"
        },
        "type": "TutorialPost",
        "url": "/tutorial/vba/introduction",
        "language": "vba"
      },
      "documentHash": "1754562111357",
      "hasWarnings": false,
      "documentTypeName": "TutorialPost"
    }
  }
}
