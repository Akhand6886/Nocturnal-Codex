{
  "title": "Java Hello World",
  "slug": "hello-world-in-java",
  "order": 2,
  "description": "Learn to write, compile, and run your first 'Hello, World!' program in Java.",
  "category": "Java Basics",
  "body": {
    "raw": "\n## Your First Java Program\n\nThe \"Hello, World!\" program is the traditional first step for learning a new language. It's a simple program that outputs `Hello, World!` to the console.\n\n### The Code\n\nIn Java, all code must reside inside a class. Here is the basic structure:\n\n```java\n// The file must be named HelloWorld.java\npublic class HelloWorld {\n    // This is the main method, the entry point of any Java application.\n    public static void main(String[] args) {\n        // This line prints the text to the console.\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n### Breaking Down the Code\n\n- **`public class HelloWorld`**: This declares a class named `HelloWorld`, which is `public`, meaning it's accessible by any other class. The class name **must** match the filename (`HelloWorld.java`).\n- **`public static void main(String[] args)`**: This is the main method.\n    - `public`: It can be called from anywhere.\n    - `static`: It can be run without creating an instance of the `HelloWorld` class.\n    - `void`: It does not return any value.\n    - `main`: This is the name of the method. The JVM looks for this specific method to start the program.\n    - `(String[] args)`: This accepts command-line arguments as an array of strings.\n- **`System.out.println(\"Hello, World!\");`**: This is the statement that does the printing.\n    - `System`: A final class from the `java.lang` package.\n    - `out`: A static member of the `System` class, which is an instance of `PrintStream`.\n    - `println()`: A method of the `PrintStream` class that prints the argument passed to it, followed by a new line.\n\n### How to Compile and Run\n\n1.  Save the code in a file named `HelloWorld.java`.\n2.  Open a terminal or command prompt.\n3.  Navigate to the directory where you saved the file.\n4.  **Compile the code**: Use the Java compiler (`javac`).\n    ```bash\n    javac HelloWorld.java\n    ```\n    This will create a `HelloWorld.class` file containing the Java bytecode.\n5.  **Run the program**: Use the Java Virtual Machine (`java`).\n    ```bash\n    java HelloWorld\n    ```\n    You should see the output: `Hello, World!`\n",
    "html": "<h2>Your First Java Program</h2>\n<p>The \"Hello, World!\" program is the traditional first step for learning a new language. It's a simple program that outputs <code>Hello, World!</code> to the console.</p>\n<h3>The Code</h3>\n<p>In Java, all code must reside inside a class. Here is the basic structure:</p>\n<pre><code class=\"language-java\">// The file must be named HelloWorld.java\npublic class HelloWorld {\n    // This is the main method, the entry point of any Java application.\n    public static void main(String[] args) {\n        // This line prints the text to the console.\n        System.out.println(\"Hello, World!\");\n    }\n}\n</code></pre>\n<h3>Breaking Down the Code</h3>\n<ul>\n<li><strong><code>public class HelloWorld</code></strong>: This declares a class named <code>HelloWorld</code>, which is <code>public</code>, meaning it's accessible by any other class. The class name <strong>must</strong> match the filename (<code>HelloWorld.java</code>).</li>\n<li><strong><code>public static void main(String[] args)</code></strong>: This is the main method.\n<ul>\n<li><code>public</code>: It can be called from anywhere.</li>\n<li><code>static</code>: It can be run without creating an instance of the <code>HelloWorld</code> class.</li>\n<li><code>void</code>: It does not return any value.</li>\n<li><code>main</code>: This is the name of the method. The JVM looks for this specific method to start the program.</li>\n<li><code>(String[] args)</code>: This accepts command-line arguments as an array of strings.</li>\n</ul>\n</li>\n<li><strong><code>System.out.println(\"Hello, World!\");</code></strong>: This is the statement that does the printing.\n<ul>\n<li><code>System</code>: A final class from the <code>java.lang</code> package.</li>\n<li><code>out</code>: A static member of the <code>System</code> class, which is an instance of <code>PrintStream</code>.</li>\n<li><code>println()</code>: A method of the <code>PrintStream</code> class that prints the argument passed to it, followed by a new line.</li>\n</ul>\n</li>\n</ul>\n<h3>How to Compile and Run</h3>\n<ol>\n<li>Save the code in a file named <code>HelloWorld.java</code>.</li>\n<li>Open a terminal or command prompt.</li>\n<li>Navigate to the directory where you saved the file.</li>\n<li><strong>Compile the code</strong>: Use the Java compiler (<code>javac</code>).\n<pre><code class=\"language-bash\">javac HelloWorld.java\n</code></pre>\nThis will create a <code>HelloWorld.class</code> file containing the Java bytecode.</li>\n<li><strong>Run the program</strong>: Use the Java Virtual Machine (<code>java</code>).\n<pre><code class=\"language-bash\">java HelloWorld\n</code></pre>\nYou should see the output: <code>Hello, World!</code></li>\n</ol>"
  },
  "_id": "tutorials/java/hello-world.md",
  "_raw": {
    "sourceFilePath": "tutorials/java/hello-world.md",
    "sourceFileName": "hello-world.md",
    "sourceFileDir": "tutorials/java",
    "contentType": "markdown",
    "flattenedPath": "tutorials/java/hello-world"
  },
  "type": "TutorialPost",
  "url": "/tutorial/java/hello-world-in-java",
  "language": "java"
}