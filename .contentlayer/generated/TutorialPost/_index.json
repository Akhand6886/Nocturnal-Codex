[
  {
    "title": "Introduction to C",
    "slug": "introduction-to-c",
    "order": 1,
    "description": "A brief overview of the C programming language, its history, and its significance.",
    "category": "Getting Started",
    "body": {
      "raw": "\n## What is C?\n\nC is a general-purpose, procedural computer programming language supporting structured programming, lexical variable scope, and recursion, with a static type system. By design, C provides constructs that map efficiently to typical machine instructions. It has found lasting use in applications previously coded in assembly language.\n",
      "html": "<h2>What is C?</h2>\n<p>C is a general-purpose, procedural computer programming language supporting structured programming, lexical variable scope, and recursion, with a static type system. By design, C provides constructs that map efficiently to typical machine instructions. It has found lasting use in applications previously coded in assembly language.</p>"
    },
    "_id": "tutorials/c/introduction.md",
    "_raw": {
      "sourceFilePath": "tutorials/c/introduction.md",
      "sourceFileName": "introduction.md",
      "sourceFileDir": "tutorials/c",
      "contentType": "markdown",
      "flattenedPath": "tutorials/c/introduction"
    },
    "type": "TutorialPost",
    "url": "/tutorial/c/introduction-to-c",
    "language": "c"
  },
  {
    "title": "Introduction to C++",
    "slug": "introduction-to-cplusplus",
    "order": 1,
    "description": "A brief overview of the C++ programming language, its features, and its applications.",
    "category": "Getting Started",
    "body": {
      "raw": "\n## What is C++?\n\nC++ is a high-level, general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or \"C with Classes\". The language has expanded significantly over time, and modern C++ now has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation.\n",
      "html": "<h2>What is C++?</h2>\n<p>C++ is a high-level, general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or \"C with Classes\". The language has expanded significantly over time, and modern C++ now has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation.</p>"
    },
    "_id": "tutorials/cplusplus/introduction.md",
    "_raw": {
      "sourceFilePath": "tutorials/cplusplus/introduction.md",
      "sourceFileName": "introduction.md",
      "sourceFileDir": "tutorials/cplusplus",
      "contentType": "markdown",
      "flattenedPath": "tutorials/cplusplus/introduction"
    },
    "type": "TutorialPost",
    "url": "/tutorial/cplusplus/introduction-to-cplusplus",
    "language": "cplusplus"
  },
  {
    "title": "Introduction to C#",
    "slug": "introduction-to-csharp",
    "order": 1,
    "description": "A brief overview of the C# programming language, its features, and its use in the .NET ecosystem.",
    "category": "Getting Started",
    "body": {
      "raw": "\n## What is C#?\n\nC# (pronounced \"C sharp\") is a modern, object-oriented, and type-safe programming language. C# enables developers to build many types of secure and robust applications that run in the .NET ecosystem. C# has its roots in the C family of languages and will be immediately familiar to C, C++, Java, and JavaScript programmers.\n",
      "html": "<h2>What is C#?</h2>\n<p>C# (pronounced \"C sharp\") is a modern, object-oriented, and type-safe programming language. C# enables developers to build many types of secure and robust applications that run in the .NET ecosystem. C# has its roots in the C family of languages and will be immediately familiar to C, C++, Java, and JavaScript programmers.</p>"
    },
    "_id": "tutorials/csharp/introduction.md",
    "_raw": {
      "sourceFilePath": "tutorials/csharp/introduction.md",
      "sourceFileName": "introduction.md",
      "sourceFileDir": "tutorials/csharp",
      "contentType": "markdown",
      "flattenedPath": "tutorials/csharp/introduction"
    },
    "type": "TutorialPost",
    "url": "/tutorial/csharp/introduction-to-csharp",
    "language": "csharp"
  },
  {
    "title": "Introduction to CSS",
    "slug": "introduction-to-css",
    "order": 1,
    "description": "An overview of Cascading Style Sheets (CSS) and its role in styling web pages.",
    "category": "Web Development",
    "body": {
      "raw": "\n## What is CSS?\n\nCascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript.\n",
      "html": "<h2>What is CSS?</h2>\n<p>Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript.</p>"
    },
    "_id": "tutorials/css/introduction.md",
    "_raw": {
      "sourceFilePath": "tutorials/css/introduction.md",
      "sourceFileName": "introduction.md",
      "sourceFileDir": "tutorials/css",
      "contentType": "markdown",
      "flattenedPath": "tutorials/css/introduction"
    },
    "type": "TutorialPost",
    "url": "/tutorial/css/introduction-to-css",
    "language": "css"
  },
  {
    "title": "Introduction to HTML",
    "slug": "introduction-to-html",
    "order": 1,
    "description": "Learn the basics of HTML, the standard markup language for documents designed to be displayed in a web browser.",
    "category": "Web Development",
    "body": {
      "raw": "\n## What is HTML?\n\nThe HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript.\n",
      "html": "<h2>What is HTML?</h2>\n<p>The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript.</p>"
    },
    "_id": "tutorials/html/introduction.md",
    "_raw": {
      "sourceFilePath": "tutorials/html/introduction.md",
      "sourceFileName": "introduction.md",
      "sourceFileDir": "tutorials/html",
      "contentType": "markdown",
      "flattenedPath": "tutorials/html/introduction"
    },
    "type": "TutorialPost",
    "url": "/tutorial/html/introduction-to-html",
    "language": "html"
  },
  {
    "title": "Java Control Flow",
    "slug": "java-control-flow",
    "order": 5,
    "description": "Learn how to control the flow of execution in Java using conditional statements and loops.",
    "category": "Java Fundamentals",
    "body": {
      "raw": "\n## Control Flow in Java\n\nControl flow statements are what allow a program to make decisions and repeat actions.\n\n### Conditional Statements (`if`, `else if`, `else`)\n\nThese statements allow your program to execute certain blocks of code based on a boolean condition.\n\n```java\nint score = 85;\n\nif (score >= 90) {\n    System.out.println(\"Grade: A\");\n} else if (score >= 80) {\n    System.out.println(\"Grade: B\"); // This will be printed\n} else if (score >= 70) {\n    System.out.println(\"Grade: C\");\n} else {\n    System.out.println(\"Grade: F\");\n}\n```\n\n### The `switch` Statement\n\nA `switch` statement can be a cleaner alternative to a long chain of `if-else if` statements when you are checking a single variable against multiple values.\n\n```java\nint day = 4;\nString dayString;\nswitch (day) {\n    case 1:  dayString = \"Monday\";\n             break;\n    case 2:  dayString = \"Tuesday\";\n             break;\n    case 3:  dayString = \"Wednesday\";\n             break;\n    case 4:  dayString = \"Thursday\";\n             break;\n    // ... other cases\n    default: dayString = \"Invalid day\";\n             break;\n}\nSystem.out.println(dayString); // Output: Thursday\n```\n\n### Loops\n\nLoops are used to execute a block of code repeatedly.\n\n#### The `for` Loop\n\nA `for` loop is ideal when you know how many times you want to iterate.\n\n```java\n// Prints numbers from 0 to 4\nfor (int i = 0; i < 5; i++) {\n    System.out.println(\"Iteration: \" + i);\n}\n```\n\n#### The `while` Loop\n\nA `while` loop continues as long as a condition is true.\n\n```java\nint count = 0;\nwhile (count < 3) {\n    System.out.println(\"Count is \" + count);\n    count++;\n}\n```\n\n#### The `do-while` Loop\n\nA `do-while` loop is similar to a `while` loop, but it guarantees that the block of code is executed at least once.\n\n```java\nint i = 5;\ndo {\n    System.out.println(\"This will print once, even though i is not less than 5.\");\n    i++;\n} while (i < 5);\n```\n",
      "html": "<h2>Control Flow in Java</h2>\n<p>Control flow statements are what allow a program to make decisions and repeat actions.</p>\n<h3>Conditional Statements (<code>if</code>, <code>else if</code>, <code>else</code>)</h3>\n<p>These statements allow your program to execute certain blocks of code based on a boolean condition.</p>\n<pre><code class=\"language-java\">int score = 85;\n\nif (score >= 90) {\n    System.out.println(\"Grade: A\");\n} else if (score >= 80) {\n    System.out.println(\"Grade: B\"); // This will be printed\n} else if (score >= 70) {\n    System.out.println(\"Grade: C\");\n} else {\n    System.out.println(\"Grade: F\");\n}\n</code></pre>\n<h3>The <code>switch</code> Statement</h3>\n<p>A <code>switch</code> statement can be a cleaner alternative to a long chain of <code>if-else if</code> statements when you are checking a single variable against multiple values.</p>\n<pre><code class=\"language-java\">int day = 4;\nString dayString;\nswitch (day) {\n    case 1:  dayString = \"Monday\";\n             break;\n    case 2:  dayString = \"Tuesday\";\n             break;\n    case 3:  dayString = \"Wednesday\";\n             break;\n    case 4:  dayString = \"Thursday\";\n             break;\n    // ... other cases\n    default: dayString = \"Invalid day\";\n             break;\n}\nSystem.out.println(dayString); // Output: Thursday\n</code></pre>\n<h3>Loops</h3>\n<p>Loops are used to execute a block of code repeatedly.</p>\n<h4>The <code>for</code> Loop</h4>\n<p>A <code>for</code> loop is ideal when you know how many times you want to iterate.</p>\n<pre><code class=\"language-java\">// Prints numbers from 0 to 4\nfor (int i = 0; i &#x3C; 5; i++) {\n    System.out.println(\"Iteration: \" + i);\n}\n</code></pre>\n<h4>The <code>while</code> Loop</h4>\n<p>A <code>while</code> loop continues as long as a condition is true.</p>\n<pre><code class=\"language-java\">int count = 0;\nwhile (count &#x3C; 3) {\n    System.out.println(\"Count is \" + count);\n    count++;\n}\n</code></pre>\n<h4>The <code>do-while</code> Loop</h4>\n<p>A <code>do-while</code> loop is similar to a <code>while</code> loop, but it guarantees that the block of code is executed at least once.</p>\n<pre><code class=\"language-java\">int i = 5;\ndo {\n    System.out.println(\"This will print once, even though i is not less than 5.\");\n    i++;\n} while (i &#x3C; 5);\n</code></pre>"
    },
    "_id": "tutorials/java/control-flow.md",
    "_raw": {
      "sourceFilePath": "tutorials/java/control-flow.md",
      "sourceFileName": "control-flow.md",
      "sourceFileDir": "tutorials/java",
      "contentType": "markdown",
      "flattenedPath": "tutorials/java/control-flow"
    },
    "type": "TutorialPost",
    "url": "/tutorial/java/java-control-flow",
    "language": "java"
  },
  {
    "title": "Java Hello World",
    "slug": "hello-world-in-java",
    "order": 2,
    "description": "Learn to write, compile, and run your first 'Hello, World!' program in Java.",
    "category": "Java Basics",
    "body": {
      "raw": "\n## Your First Java Program\n\nThe \"Hello, World!\" program is the traditional first step for learning a new language. It's a simple program that outputs `Hello, World!` to the console.\n\n### The Code\n\nIn Java, all code must reside inside a class. Here is the basic structure:\n\n```java\n// The file must be named HelloWorld.java\npublic class HelloWorld {\n    // This is the main method, the entry point of any Java application.\n    public static void main(String[] args) {\n        // This line prints the text to the console.\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n### Breaking Down the Code\n\n- **`public class HelloWorld`**: This declares a class named `HelloWorld`, which is `public`, meaning it's accessible by any other class. The class name **must** match the filename (`HelloWorld.java`).\n- **`public static void main(String[] args)`**: This is the main method.\n    - `public`: It can be called from anywhere.\n    - `static`: It can be run without creating an instance of the `HelloWorld` class.\n    - `void`: It does not return any value.\n    - `main`: This is the name of the method. The JVM looks for this specific method to start the program.\n    - `(String[] args)`: This accepts command-line arguments as an array of strings.\n- **`System.out.println(\"Hello, World!\");`**: This is the statement that does the printing.\n    - `System`: A final class from the `java.lang` package.\n    - `out`: A static member of the `System` class, which is an instance of `PrintStream`.\n    - `println()`: A method of the `PrintStream` class that prints the argument passed to it, followed by a new line.\n\n### How to Compile and Run\n\n1.  Save the code in a file named `HelloWorld.java`.\n2.  Open a terminal or command prompt.\n3.  Navigate to the directory where you saved the file.\n4.  **Compile the code**: Use the Java compiler (`javac`).\n    ```bash\n    javac HelloWorld.java\n    ```\n    This will create a `HelloWorld.class` file containing the Java bytecode.\n5.  **Run the program**: Use the Java Virtual Machine (`java`).\n    ```bash\n    java HelloWorld\n    ```\n    You should see the output: `Hello, World!`\n",
      "html": "<h2>Your First Java Program</h2>\n<p>The \"Hello, World!\" program is the traditional first step for learning a new language. It's a simple program that outputs <code>Hello, World!</code> to the console.</p>\n<h3>The Code</h3>\n<p>In Java, all code must reside inside a class. Here is the basic structure:</p>\n<pre><code class=\"language-java\">// The file must be named HelloWorld.java\npublic class HelloWorld {\n    // This is the main method, the entry point of any Java application.\n    public static void main(String[] args) {\n        // This line prints the text to the console.\n        System.out.println(\"Hello, World!\");\n    }\n}\n</code></pre>\n<h3>Breaking Down the Code</h3>\n<ul>\n<li><strong><code>public class HelloWorld</code></strong>: This declares a class named <code>HelloWorld</code>, which is <code>public</code>, meaning it's accessible by any other class. The class name <strong>must</strong> match the filename (<code>HelloWorld.java</code>).</li>\n<li><strong><code>public static void main(String[] args)</code></strong>: This is the main method.\n<ul>\n<li><code>public</code>: It can be called from anywhere.</li>\n<li><code>static</code>: It can be run without creating an instance of the <code>HelloWorld</code> class.</li>\n<li><code>void</code>: It does not return any value.</li>\n<li><code>main</code>: This is the name of the method. The JVM looks for this specific method to start the program.</li>\n<li><code>(String[] args)</code>: This accepts command-line arguments as an array of strings.</li>\n</ul>\n</li>\n<li><strong><code>System.out.println(\"Hello, World!\");</code></strong>: This is the statement that does the printing.\n<ul>\n<li><code>System</code>: A final class from the <code>java.lang</code> package.</li>\n<li><code>out</code>: A static member of the <code>System</code> class, which is an instance of <code>PrintStream</code>.</li>\n<li><code>println()</code>: A method of the <code>PrintStream</code> class that prints the argument passed to it, followed by a new line.</li>\n</ul>\n</li>\n</ul>\n<h3>How to Compile and Run</h3>\n<ol>\n<li>Save the code in a file named <code>HelloWorld.java</code>.</li>\n<li>Open a terminal or command prompt.</li>\n<li>Navigate to the directory where you saved the file.</li>\n<li><strong>Compile the code</strong>: Use the Java compiler (<code>javac</code>).\n<pre><code class=\"language-bash\">javac HelloWorld.java\n</code></pre>\nThis will create a <code>HelloWorld.class</code> file containing the Java bytecode.</li>\n<li><strong>Run the program</strong>: Use the Java Virtual Machine (<code>java</code>).\n<pre><code class=\"language-bash\">java HelloWorld\n</code></pre>\nYou should see the output: <code>Hello, World!</code></li>\n</ol>"
    },
    "_id": "tutorials/java/hello-world.md",
    "_raw": {
      "sourceFilePath": "tutorials/java/hello-world.md",
      "sourceFileName": "hello-world.md",
      "sourceFileDir": "tutorials/java",
      "contentType": "markdown",
      "flattenedPath": "tutorials/java/hello-world"
    },
    "type": "TutorialPost",
    "url": "/tutorial/java/hello-world-in-java",
    "language": "java"
  },
  {
    "title": "Introduction to Java",
    "slug": "introduction-to-java",
    "order": 1,
    "description": "Get an overview of the Java programming language, its history, features, and why it remains one of the most popular languages in the world.",
    "category": "Java Basics",
    "body": {
      "raw": "\n## What is Java?\n\nJava is a high-level, class-based, object-oriented programming language developed by Sun Microsystems (now owned by Oracle) and first released in 1995. It is designed to have as few implementation dependencies as possible, allowing developers to \"write once, run anywhere\" (WORA). This means that compiled Java code can run on all platforms that support Java without the need for recompilation.\n\n## Key Features of Java\n\n-   **Platform Independent**: Thanks to the Java Virtual Machine (JVM), Java bytecode can run on any device, making it highly portable.\n-   **Object-Oriented**: Java is fundamentally object-oriented, which helps in building modular and reusable code.\n-   **Robust and Secure**: It emphasizes early checking for possible errors and has built-in security features, including a Security Manager.\n-   **Automatic Memory Management**: Java automatically manages memory through a process called garbage collection.\n-   **Multithreaded**: Java has built-in support for multithreading, which allows for the concurrent execution of multiple parts of a program.\n-   **Rich Standard Library**: Java provides a large standard library with classes and methods for common tasks like I/O, networking, and data structures.\n\nThis tutorial series will guide you through the fundamentals of Java programming.\n",
      "html": "<h2>What is Java?</h2>\n<p>Java is a high-level, class-based, object-oriented programming language developed by Sun Microsystems (now owned by Oracle) and first released in 1995. It is designed to have as few implementation dependencies as possible, allowing developers to \"write once, run anywhere\" (WORA). This means that compiled Java code can run on all platforms that support Java without the need for recompilation.</p>\n<h2>Key Features of Java</h2>\n<ul>\n<li><strong>Platform Independent</strong>: Thanks to the Java Virtual Machine (JVM), Java bytecode can run on any device, making it highly portable.</li>\n<li><strong>Object-Oriented</strong>: Java is fundamentally object-oriented, which helps in building modular and reusable code.</li>\n<li><strong>Robust and Secure</strong>: It emphasizes early checking for possible errors and has built-in security features, including a Security Manager.</li>\n<li><strong>Automatic Memory Management</strong>: Java automatically manages memory through a process called garbage collection.</li>\n<li><strong>Multithreaded</strong>: Java has built-in support for multithreading, which allows for the concurrent execution of multiple parts of a program.</li>\n<li><strong>Rich Standard Library</strong>: Java provides a large standard library with classes and methods for common tasks like I/O, networking, and data structures.</li>\n</ul>\n<p>This tutorial series will guide you through the fundamentals of Java programming.</p>"
    },
    "_id": "tutorials/java/introduction.md",
    "_raw": {
      "sourceFilePath": "tutorials/java/introduction.md",
      "sourceFileName": "introduction.md",
      "sourceFileDir": "tutorials/java",
      "contentType": "markdown",
      "flattenedPath": "tutorials/java/introduction"
    },
    "type": "TutorialPost",
    "url": "/tutorial/java/introduction-to-java",
    "language": "java"
  },
  {
    "title": "Java Operators",
    "slug": "java-operators",
    "order": 4,
    "description": "Understand the various operators in Java for performing arithmetic, assignment, comparison, and logical operations.",
    "category": "Java Fundamentals",
    "body": {
      "raw": "\n## Operators in Java\n\nOperators are special symbols that perform specific operations on one, two, or three operands, and then return a result.\n\n### 1. Arithmetic Operators\nUsed to perform common mathematical operations.\n- `+` Addition\n- `-` Subtraction\n- `*` Multiplication\n- `/` Division\n- `%` Modulus (returns the remainder of a division)\n- `++` Increment (increases a value by 1)\n- `--` Decrement (decreases a value by 1)\n\n```java\nint x = 10;\nint y = 3;\nSystem.out.println(x + y); // 13\nSystem.out.println(x % y); // 1\nx++; // x is now 11\n```\n\n### 2. Assignment Operators\nUsed to assign values to variables.\n- `=` Assign\n- `+=` (e.g., `x += 3` is same as `x = x + 3`)\n- `-=`\n- `*=`\n- `/=`\n- `%=`\n\n### 3. Comparison Operators\nUsed to compare two values. The result is a boolean (`true` or `false`).\n- `==` Equal to\n- `!=` Not equal to\n- `>` Greater than\n- `<` Less than\n- `>=` Greater than or equal to\n- `<=` Less than or equal to\n\n```java\nint a = 5;\nint b = 7;\nSystem.out.println(a == b); // false\nSystem.out.println(a < b);  // true\n```\n\n### 4. Logical Operators\nUsed to determine the logic between variables or values.\n- `&&` Logical AND (returns `true` if both statements are true)\n- `||` Logical OR (returns `true` if one of the statements is true)\n- `!` Logical NOT (reverses the result, returns `false` if the result is true)\n\n```java\nint age = 25;\nboolean hasLicense = true;\nif (age >= 18 && hasLicense) {\n    System.out.println(\"Can drive.\");\n}\n```\n",
      "html": "<h2>Operators in Java</h2>\n<p>Operators are special symbols that perform specific operations on one, two, or three operands, and then return a result.</p>\n<h3>1. Arithmetic Operators</h3>\n<p>Used to perform common mathematical operations.</p>\n<ul>\n<li><code>+</code> Addition</li>\n<li><code>-</code> Subtraction</li>\n<li><code>*</code> Multiplication</li>\n<li><code>/</code> Division</li>\n<li><code>%</code> Modulus (returns the remainder of a division)</li>\n<li><code>++</code> Increment (increases a value by 1)</li>\n<li><code>--</code> Decrement (decreases a value by 1)</li>\n</ul>\n<pre><code class=\"language-java\">int x = 10;\nint y = 3;\nSystem.out.println(x + y); // 13\nSystem.out.println(x % y); // 1\nx++; // x is now 11\n</code></pre>\n<h3>2. Assignment Operators</h3>\n<p>Used to assign values to variables.</p>\n<ul>\n<li><code>=</code> Assign</li>\n<li><code>+=</code> (e.g., <code>x += 3</code> is same as <code>x = x + 3</code>)</li>\n<li><code>-=</code></li>\n<li><code>*=</code></li>\n<li><code>/=</code></li>\n<li><code>%=</code></li>\n</ul>\n<h3>3. Comparison Operators</h3>\n<p>Used to compare two values. The result is a boolean (<code>true</code> or <code>false</code>).</p>\n<ul>\n<li><code>==</code> Equal to</li>\n<li><code>!=</code> Not equal to</li>\n<li><code>></code> Greater than</li>\n<li><code>&#x3C;</code> Less than</li>\n<li><code>>=</code> Greater than or equal to</li>\n<li><code>&#x3C;=</code> Less than or equal to</li>\n</ul>\n<pre><code class=\"language-java\">int a = 5;\nint b = 7;\nSystem.out.println(a == b); // false\nSystem.out.println(a &#x3C; b);  // true\n</code></pre>\n<h3>4. Logical Operators</h3>\n<p>Used to determine the logic between variables or values.</p>\n<ul>\n<li><code>&#x26;&#x26;</code> Logical AND (returns <code>true</code> if both statements are true)</li>\n<li><code>||</code> Logical OR (returns <code>true</code> if one of the statements is true)</li>\n<li><code>!</code> Logical NOT (reverses the result, returns <code>false</code> if the result is true)</li>\n</ul>\n<pre><code class=\"language-java\">int age = 25;\nboolean hasLicense = true;\nif (age >= 18 &#x26;&#x26; hasLicense) {\n    System.out.println(\"Can drive.\");\n}\n</code></pre>"
    },
    "_id": "tutorials/java/operators.md",
    "_raw": {
      "sourceFilePath": "tutorials/java/operators.md",
      "sourceFileName": "operators.md",
      "sourceFileDir": "tutorials/java",
      "contentType": "markdown",
      "flattenedPath": "tutorials/java/operators"
    },
    "type": "TutorialPost",
    "url": "/tutorial/java/java-operators",
    "language": "java"
  },
  {
    "title": "Java Variables and Data Types",
    "slug": "java-variables-data-types",
    "order": 3,
    "description": "Learn about declaring variables and the fundamental data types in Java.",
    "category": "Java Fundamentals",
    "body": {
      "raw": "\n## Variables in Java\n\nA variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.\n\nIn Java, all variables must be declared before they can be used.\n\n```java\n// SYNTAX: type variableName = value;\nint myNumber = 5;\nString greeting = \"Hello\";\nboolean isActive = true;\n```\n\n## Data Types\n\nData types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:\n\n### 1. Primitive Data Types\n\nPrimitive data types are predefined by the language and named by a keyword. There are 8 primitive types:\n\n- **`byte`**: 1 byte, stores whole numbers from -128 to 127\n- **`short`**: 2 bytes, stores whole numbers from -32,768 to 32,767\n- **`int`**: 4 bytes, stores whole numbers from -2,147,483,648 to 2,147,483,647 (most common for integers)\n- **`long`**: 8 bytes, stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\n- **`float`**: 4 bytes, stores fractional numbers. Sufficient for storing 6 to 7 decimal digits\n- **`double`**: 8 bytes, stores fractional numbers. Sufficient for storing 15 decimal digits (most common for floating-point numbers)\n- **`boolean`**: 1 bit, stores `true` or `false` values\n- **`char`**: 2 bytes, stores a single character/letter or ASCII values.\n\n```java\nint myInt = 10000;\nfloat myFloat = 5.75f; // Note the 'f' suffix\nchar myLetter = 'D';\nboolean myBool = true;\n```\n\n### 2. Non-Primitive Data Types (Reference Types)\n\nNon-primitive types are created by the programmer and are not defined by Java (except for `String`). They are also known as reference types because they refer to objects.\n\n- **Classes**, **Interfaces**, **Arrays**, and **Strings** are examples of non-primitive types.\n\nThe main difference between primitive and non-primitive types is that primitive types are stored directly in memory where the variable is allocated, whereas non-primitive types store a reference (or address) to the memory location where the object is actually stored.\n",
      "html": "<h2>Variables in Java</h2>\n<p>A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.</p>\n<p>In Java, all variables must be declared before they can be used.</p>\n<pre><code class=\"language-java\">// SYNTAX: type variableName = value;\nint myNumber = 5;\nString greeting = \"Hello\";\nboolean isActive = true;\n</code></pre>\n<h2>Data Types</h2>\n<p>Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:</p>\n<h3>1. Primitive Data Types</h3>\n<p>Primitive data types are predefined by the language and named by a keyword. There are 8 primitive types:</p>\n<ul>\n<li><strong><code>byte</code></strong>: 1 byte, stores whole numbers from -128 to 127</li>\n<li><strong><code>short</code></strong>: 2 bytes, stores whole numbers from -32,768 to 32,767</li>\n<li><strong><code>int</code></strong>: 4 bytes, stores whole numbers from -2,147,483,648 to 2,147,483,647 (most common for integers)</li>\n<li><strong><code>long</code></strong>: 8 bytes, stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</li>\n<li><strong><code>float</code></strong>: 4 bytes, stores fractional numbers. Sufficient for storing 6 to 7 decimal digits</li>\n<li><strong><code>double</code></strong>: 8 bytes, stores fractional numbers. Sufficient for storing 15 decimal digits (most common for floating-point numbers)</li>\n<li><strong><code>boolean</code></strong>: 1 bit, stores <code>true</code> or <code>false</code> values</li>\n<li><strong><code>char</code></strong>: 2 bytes, stores a single character/letter or ASCII values.</li>\n</ul>\n<pre><code class=\"language-java\">int myInt = 10000;\nfloat myFloat = 5.75f; // Note the 'f' suffix\nchar myLetter = 'D';\nboolean myBool = true;\n</code></pre>\n<h3>2. Non-Primitive Data Types (Reference Types)</h3>\n<p>Non-primitive types are created by the programmer and are not defined by Java (except for <code>String</code>). They are also known as reference types because they refer to objects.</p>\n<ul>\n<li><strong>Classes</strong>, <strong>Interfaces</strong>, <strong>Arrays</strong>, and <strong>Strings</strong> are examples of non-primitive types.</li>\n</ul>\n<p>The main difference between primitive and non-primitive types is that primitive types are stored directly in memory where the variable is allocated, whereas non-primitive types store a reference (or address) to the memory location where the object is actually stored.</p>"
    },
    "_id": "tutorials/java/variables-and-data-types.md",
    "_raw": {
      "sourceFilePath": "tutorials/java/variables-and-data-types.md",
      "sourceFileName": "variables-and-data-types.md",
      "sourceFileDir": "tutorials/java",
      "contentType": "markdown",
      "flattenedPath": "tutorials/java/variables-and-data-types"
    },
    "type": "TutorialPost",
    "url": "/tutorial/java/java-variables-data-types",
    "language": "java"
  },
  {
    "title": "JavaScript Data Types",
    "slug": "javascript-data-types",
    "order": 4,
    "description": "Explore the different data types available in JavaScript, both primitive and non-primitive.",
    "category": "JS Variables and Data Types",
    "body": {
      "raw": "\n## JavaScript Data Types\n\nJavaScript variables can hold different data types. JavaScript is a dynamically typed language, which means you don't need to specify the type of a variable when you declare it.\n\n### Primitive Data Types\nPrimitive data types are immutable (they cannot be changed).\n\n1.  **String**: Represents textual data.\n    ```javascript\n    let name = \"Alice\";\n    ```\n2.  **Number**: Represents numeric values, including integers and floating-point numbers.\n    ```javascript\n    let age = 30;\n    let price = 19.99;\n    ```\n3.  **BigInt**: Represents integers with arbitrary precision.\n    ```javascript\n    const veryLargeNumber = 9007199254740991n;\n    ```\n4.  **Boolean**: Represents `true` or `false`.\n    ```javascript\n    let isActive = true;\n    ```\n5.  **Undefined**: A variable that has been declared but not assigned a value has the value `undefined`.\n    ```javascript\n    let status; // status is undefined\n    ```\n6.  **Null**: Represents the intentional absence of any object value.\n    ```javascript\n    let user = null;\n    ```\n7.  **Symbol**: A unique and immutable primitive value, often used as object property keys.\n    ```javascript\n    const id = Symbol('id');\n    ```\n\n### Non-Primitive Data Type (Object)\nThe `object` data type can store collections of data.\n\n- **Object**: A collection of key-value pairs.\n  ```javascript\n  const person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 50\n  };\n  ```\n- **Array**: A special type of object for storing ordered collections.\n  ```javascript\n  const colors = [\"red\", \"green\", \"blue\"];\n  ```\n- **Function**: A block of code designed to perform a particular task.\n  ```javascript\n  function greet() {\n    return \"Hello!\";\n  }\n  ```\n",
      "html": "<h2>JavaScript Data Types</h2>\n<p>JavaScript variables can hold different data types. JavaScript is a dynamically typed language, which means you don't need to specify the type of a variable when you declare it.</p>\n<h3>Primitive Data Types</h3>\n<p>Primitive data types are immutable (they cannot be changed).</p>\n<ol>\n<li><strong>String</strong>: Represents textual data.\n<pre><code class=\"language-javascript\">let name = \"Alice\";\n</code></pre>\n</li>\n<li><strong>Number</strong>: Represents numeric values, including integers and floating-point numbers.\n<pre><code class=\"language-javascript\">let age = 30;\nlet price = 19.99;\n</code></pre>\n</li>\n<li><strong>BigInt</strong>: Represents integers with arbitrary precision.\n<pre><code class=\"language-javascript\">const veryLargeNumber = 9007199254740991n;\n</code></pre>\n</li>\n<li><strong>Boolean</strong>: Represents <code>true</code> or <code>false</code>.\n<pre><code class=\"language-javascript\">let isActive = true;\n</code></pre>\n</li>\n<li><strong>Undefined</strong>: A variable that has been declared but not assigned a value has the value <code>undefined</code>.\n<pre><code class=\"language-javascript\">let status; // status is undefined\n</code></pre>\n</li>\n<li><strong>Null</strong>: Represents the intentional absence of any object value.\n<pre><code class=\"language-javascript\">let user = null;\n</code></pre>\n</li>\n<li><strong>Symbol</strong>: A unique and immutable primitive value, often used as object property keys.\n<pre><code class=\"language-javascript\">const id = Symbol('id');\n</code></pre>\n</li>\n</ol>\n<h3>Non-Primitive Data Type (Object)</h3>\n<p>The <code>object</code> data type can store collections of data.</p>\n<ul>\n<li><strong>Object</strong>: A collection of key-value pairs.\n<pre><code class=\"language-javascript\">const person = {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  age: 50\n};\n</code></pre>\n</li>\n<li><strong>Array</strong>: A special type of object for storing ordered collections.\n<pre><code class=\"language-javascript\">const colors = [\"red\", \"green\", \"blue\"];\n</code></pre>\n</li>\n<li><strong>Function</strong>: A block of code designed to perform a particular task.\n<pre><code class=\"language-javascript\">function greet() {\n  return \"Hello!\";\n}\n</code></pre>\n</li>\n</ul>"
    },
    "_id": "tutorials/javascript/data-types.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/data-types.md",
      "sourceFileName": "data-types.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/data-types"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/javascript-data-types",
    "language": "javascript"
  },
  {
    "title": "Features of JavaScript",
    "slug": "features-of-javascript",
    "order": 2,
    "description": "An overview of the core features that make JavaScript a powerful and popular language for web development.",
    "category": "JavaScript Basics",
    "body": {
      "raw": "\n## What is JavaScript?\n\nJavaScript is a programming language that lets developers create interactive web pages. It's a high-level, interpreted language that is a cornerstone technology of the World Wide Web, alongside HTML and CSS.\n\nJavaScript is one of the most popular programming languages, which includes several features when it comes to web development. Some of the features are lightweight, dynamic, functional, and interpreted.\n\nLet's discuss some important features of JavaScript:\n\n1.  **Lightweight Scripting Language**: JavaScript is lightweight because it is designed for client-side execution in the browser. This makes it fast and efficient for enhancing user interfaces.\n2.  **Dynamic Typing**: Variables in JavaScript are not tied to a specific type. You can reassign variables to different types at any time.\n3.  **Functional Style**: JavaScript supports functional programming paradigms, treating functions as first-class citizens. You can pass functions as arguments, return them from other functions, and assign them to variables.\n4.  **Platform Independent**: JavaScript can run on any platform with a web browser, be it Windows, macOS, or Linux.\n5.  **Prototype-based Language**: JavaScript uses prototypes for inheritance instead of classes (though ES6 introduced class syntax as syntactic sugar over prototypes).\n6.  **Interpreted Language**: JavaScript code is interpreted line-by-line by the browser's engine, which means you don't need a compilation step.\n7.  **Single-Threaded**: JavaScript has a single-threaded execution model, which means it processes one task at a time. Asynchronous operations are handled by the event loop.\n8.  **Async Processing**: With features like Promises and async/await, JavaScript can handle asynchronous operations like API calls without blocking the main thread.\n9.  **Web Workers**: Allows for running scripts in background threads, enabling long-running tasks without freezing the UI.\n10. **Client-side Validation**: JavaScript is widely used to validate user input on the client-side before sending data to the server.\n11. **Backend Development**: With Node.js, JavaScript can be used to build full-stack applications.\n12. **More Control in Browser**: JavaScript gives developers extensive control over the browser and its Document Object Model (DOM).\n",
      "html": "<h2>What is JavaScript?</h2>\n<p>JavaScript is a programming language that lets developers create interactive web pages. It's a high-level, interpreted language that is a cornerstone technology of the World Wide Web, alongside HTML and CSS.</p>\n<p>JavaScript is one of the most popular programming languages, which includes several features when it comes to web development. Some of the features are lightweight, dynamic, functional, and interpreted.</p>\n<p>Let's discuss some important features of JavaScript:</p>\n<ol>\n<li><strong>Lightweight Scripting Language</strong>: JavaScript is lightweight because it is designed for client-side execution in the browser. This makes it fast and efficient for enhancing user interfaces.</li>\n<li><strong>Dynamic Typing</strong>: Variables in JavaScript are not tied to a specific type. You can reassign variables to different types at any time.</li>\n<li><strong>Functional Style</strong>: JavaScript supports functional programming paradigms, treating functions as first-class citizens. You can pass functions as arguments, return them from other functions, and assign them to variables.</li>\n<li><strong>Platform Independent</strong>: JavaScript can run on any platform with a web browser, be it Windows, macOS, or Linux.</li>\n<li><strong>Prototype-based Language</strong>: JavaScript uses prototypes for inheritance instead of classes (though ES6 introduced class syntax as syntactic sugar over prototypes).</li>\n<li><strong>Interpreted Language</strong>: JavaScript code is interpreted line-by-line by the browser's engine, which means you don't need a compilation step.</li>\n<li><strong>Single-Threaded</strong>: JavaScript has a single-threaded execution model, which means it processes one task at a time. Asynchronous operations are handled by the event loop.</li>\n<li><strong>Async Processing</strong>: With features like Promises and async/await, JavaScript can handle asynchronous operations like API calls without blocking the main thread.</li>\n<li><strong>Web Workers</strong>: Allows for running scripts in background threads, enabling long-running tasks without freezing the UI.</li>\n<li><strong>Client-side Validation</strong>: JavaScript is widely used to validate user input on the client-side before sending data to the server.</li>\n<li><strong>Backend Development</strong>: With Node.js, JavaScript can be used to build full-stack applications.</li>\n<li><strong>More Control in Browser</strong>: JavaScript gives developers extensive control over the browser and its Document Object Model (DOM).</li>\n</ol>"
    },
    "_id": "tutorials/javascript/features-of-javascript.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/features-of-javascript.md",
      "sourceFileName": "features-of-javascript.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/features-of-javascript"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/features-of-javascript",
    "language": "javascript"
  },
  {
    "title": "JavaScript Functions",
    "slug": "javascript-functions",
    "order": 6,
    "description": "Learn how to define and use functions to create reusable blocks of code in JavaScript.",
    "category": "JS Functions",
    "body": {
      "raw": "\n## JavaScript Functions\n\nA JavaScript function is a block of code designed to perform a particular task. A function is executed when \"something\" invokes it (calls it).\n\n### Function Declarations\nThis is the most common way to define a function.\n\n```javascript\nfunction greet(name) {\n  return \"Hello, \" + name + \"!\";\n}\n\nconsole.log(greet(\"World\")); // Output: Hello, World!\n```\n\n### Function Expressions\nA function can also be defined as an expression, which can be stored in a variable.\n\n```javascript\nconst farewell = function(name) {\n  return \"Goodbye, \" + name + \"!\";\n};\n\nconsole.log(farewell(\"World\")); // Output: Goodbye, World!\n```\n\n### Arrow Functions (ES6)\nArrow functions provide a more concise syntax for writing function expressions.\n\n```javascript\nconst add = (a, b) => {\n  return a + b;\n};\n\n// For single-expression functions, you can omit the braces and return keyword\nconst subtract = (a, b) => a - b;\n\nconsole.log(add(5, 3));       // Output: 8\nconsole.log(subtract(10, 4)); // Output: 6\n```\n\n### Parameters and Arguments\n- **Parameters** are the names listed in the function definition.\n- **Arguments** are the real values passed to the function when it is invoked.\n\n### Return Value\nThe `return` statement stops the execution of a function and returns a value. If `return` is omitted, the function returns `undefined`.\n",
      "html": "<h2>JavaScript Functions</h2>\n<p>A JavaScript function is a block of code designed to perform a particular task. A function is executed when \"something\" invokes it (calls it).</p>\n<h3>Function Declarations</h3>\n<p>This is the most common way to define a function.</p>\n<pre><code class=\"language-javascript\">function greet(name) {\n  return \"Hello, \" + name + \"!\";\n}\n\nconsole.log(greet(\"World\")); // Output: Hello, World!\n</code></pre>\n<h3>Function Expressions</h3>\n<p>A function can also be defined as an expression, which can be stored in a variable.</p>\n<pre><code class=\"language-javascript\">const farewell = function(name) {\n  return \"Goodbye, \" + name + \"!\";\n};\n\nconsole.log(farewell(\"World\")); // Output: Goodbye, World!\n</code></pre>\n<h3>Arrow Functions (ES6)</h3>\n<p>Arrow functions provide a more concise syntax for writing function expressions.</p>\n<pre><code class=\"language-javascript\">const add = (a, b) => {\n  return a + b;\n};\n\n// For single-expression functions, you can omit the braces and return keyword\nconst subtract = (a, b) => a - b;\n\nconsole.log(add(5, 3));       // Output: 8\nconsole.log(subtract(10, 4)); // Output: 6\n</code></pre>\n<h3>Parameters and Arguments</h3>\n<ul>\n<li><strong>Parameters</strong> are the names listed in the function definition.</li>\n<li><strong>Arguments</strong> are the real values passed to the function when it is invoked.</li>\n</ul>\n<h3>Return Value</h3>\n<p>The <code>return</code> statement stops the execution of a function and returns a value. If <code>return</code> is omitted, the function returns <code>undefined</code>.</p>"
    },
    "_id": "tutorials/javascript/functions.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/functions.md",
      "sourceFileName": "functions.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/functions"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/javascript-functions",
    "language": "javascript"
  },
  {
    "title": "Hello World Program in JavaScript",
    "slug": "hello-world-in-javascript",
    "order": 3,
    "description": "Learn how to write your first 'Hello, World!' program in JavaScript.",
    "category": "JavaScript Basics",
    "body": {
      "raw": "\n## Hello World in JavaScript\n\nThe \"Hello, World!\" program is a classic first step in learning any new programming language. It's a simple program that outputs `Hello, World!` to the screen.\n\n### Using `console.log()`\n\nThe most common way to display output for debugging or learning purposes in JavaScript is using the `console.log()` method. This will print the output to the web console in your browser's developer tools.\n\n```javascript\n// This line prints \"Hello, World!\" to the console.\nconsole.log(\"Hello, World!\");\n```\n\n### Displaying in an Alert Box\n\nYou can also use the `alert()` function to display the message in a pop-up alert box in the browser.\n\n```javascript\n// This will create a pop-up with the message.\nalert(\"Hello, World!\");\n```\n\n### Writing Directly to the HTML Document\n\nAnother method, though less common for modern applications, is to write directly into the HTML document using `document.write()`.\n\n```javascript\n// This will write \"Hello, World!\" directly into the HTML body.\ndocument.write(\"Hello, World!\");\n```\n\nThis is the foundational step to start your journey with JavaScript development.\n",
      "html": "<h2>Hello World in JavaScript</h2>\n<p>The \"Hello, World!\" program is a classic first step in learning any new programming language. It's a simple program that outputs <code>Hello, World!</code> to the screen.</p>\n<h3>Using <code>console.log()</code></h3>\n<p>The most common way to display output for debugging or learning purposes in JavaScript is using the <code>console.log()</code> method. This will print the output to the web console in your browser's developer tools.</p>\n<pre><code class=\"language-javascript\">// This line prints \"Hello, World!\" to the console.\nconsole.log(\"Hello, World!\");\n</code></pre>\n<h3>Displaying in an Alert Box</h3>\n<p>You can also use the <code>alert()</code> function to display the message in a pop-up alert box in the browser.</p>\n<pre><code class=\"language-javascript\">// This will create a pop-up with the message.\nalert(\"Hello, World!\");\n</code></pre>\n<h3>Writing Directly to the HTML Document</h3>\n<p>Another method, though less common for modern applications, is to write directly into the HTML document using <code>document.write()</code>.</p>\n<pre><code class=\"language-javascript\">// This will write \"Hello, World!\" directly into the HTML body.\ndocument.write(\"Hello, World!\");\n</code></pre>\n<p>This is the foundational step to start your journey with JavaScript development.</p>"
    },
    "_id": "tutorials/javascript/hello-world.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/hello-world.md",
      "sourceFileName": "hello-world.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/hello-world"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/hello-world-in-javascript",
    "language": "javascript"
  },
  {
    "title": "JavaScript - Enabling",
    "slug": "javascript-enabling",
    "order": 4,
    "description": "How to ensure JavaScript is enabled in your web browser.",
    "category": "JavaScript Basics",
    "body": {
      "raw": "\n## Enabling JavaScript in Your Browser\n\nJavaScript is a standard technology of the web and is enabled by default in all modern web browsers. If for some reason JavaScript has been disabled, your web browsing experience will be significantly limited, as most modern websites rely heavily on it for interactivity.\n\n### Why You Need JavaScript Enabled\n-   **Interactive Forms**: Validating input, showing/hiding fields, and submitting data without a full page reload.\n-   **Dynamic Content**: Loading new content (like blog posts or social media feeds) without refreshing the page.\n-   **Animations & Effects**: Creating smooth transitions, pop-up modals, and other visual effects.\n-   **User Experience**: Powering features like interactive maps, drag-and-drop interfaces, and single-page applications (SPAs).\n\n### How to Check and Enable JavaScript\n\nAll major browsers have JavaScript enabled by default. If you suspect it's disabled, you can check your browser's settings.\n\n#### Google Chrome\n1.  Go to `Settings`.\n2.  Click on `Privacy and security`.\n3.  Go to `Site settings`.\n4.  Under `Content`, click on `JavaScript`.\n5.  Make sure `Sites can use Javascript` is selected.\n\n#### Mozilla Firefox\n1.  Type `about:config` in the address bar and press Enter.\n2.  Accept the warning message.\n3.  Search for `javascript.enabled`.\n4.  Ensure that the value is `true`. If it's `false`, double-click it to toggle it to `true`.\n\n#### Microsoft Edge\n1.  Go to `Settings`.\n2.  Click on `Cookies and site permissions`.\n3.  Scroll down and click on `JavaScript`.\n4.  Make sure the `Allowed (recommended)` toggle is turned on.\n\nIf you are a developer, you don't need to do anything to \"enable\" JavaScript for your users beyond writing the code itself. The user's browser is responsible for executing it. The `<script>` tag in an HTML file tells the browser where to find and run the JavaScript code.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My Page</title>\n</head>\n<body>\n\n    <h1>My Web Page</h1>\n\n    <!-- The browser will execute the code in this script file -->\n    <script src=\"my_script.js\"></script>\n\n</body>\n</html>\n```\n",
      "html": "<h2>Enabling JavaScript in Your Browser</h2>\n<p>JavaScript is a standard technology of the web and is enabled by default in all modern web browsers. If for some reason JavaScript has been disabled, your web browsing experience will be significantly limited, as most modern websites rely heavily on it for interactivity.</p>\n<h3>Why You Need JavaScript Enabled</h3>\n<ul>\n<li><strong>Interactive Forms</strong>: Validating input, showing/hiding fields, and submitting data without a full page reload.</li>\n<li><strong>Dynamic Content</strong>: Loading new content (like blog posts or social media feeds) without refreshing the page.</li>\n<li><strong>Animations &#x26; Effects</strong>: Creating smooth transitions, pop-up modals, and other visual effects.</li>\n<li><strong>User Experience</strong>: Powering features like interactive maps, drag-and-drop interfaces, and single-page applications (SPAs).</li>\n</ul>\n<h3>How to Check and Enable JavaScript</h3>\n<p>All major browsers have JavaScript enabled by default. If you suspect it's disabled, you can check your browser's settings.</p>\n<h4>Google Chrome</h4>\n<ol>\n<li>Go to <code>Settings</code>.</li>\n<li>Click on <code>Privacy and security</code>.</li>\n<li>Go to <code>Site settings</code>.</li>\n<li>Under <code>Content</code>, click on <code>JavaScript</code>.</li>\n<li>Make sure <code>Sites can use Javascript</code> is selected.</li>\n</ol>\n<h4>Mozilla Firefox</h4>\n<ol>\n<li>Type <code>about:config</code> in the address bar and press Enter.</li>\n<li>Accept the warning message.</li>\n<li>Search for <code>javascript.enabled</code>.</li>\n<li>Ensure that the value is <code>true</code>. If it's <code>false</code>, double-click it to toggle it to <code>true</code>.</li>\n</ol>\n<h4>Microsoft Edge</h4>\n<ol>\n<li>Go to <code>Settings</code>.</li>\n<li>Click on <code>Cookies and site permissions</code>.</li>\n<li>Scroll down and click on <code>JavaScript</code>.</li>\n<li>Make sure the <code>Allowed (recommended)</code> toggle is turned on.</li>\n</ol>\n<p>If you are a developer, you don't need to do anything to \"enable\" JavaScript for your users beyond writing the code itself. The user's browser is responsible for executing it. The <code>&#x3C;script></code> tag in an HTML file tells the browser where to find and run the JavaScript code.</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;title>My Page&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n    &#x3C;h1>My Web Page&#x3C;/h1>\n\n    &#x3C;!-- The browser will execute the code in this script file -->\n    &#x3C;script src=\"my_script.js\">&#x3C;/script>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>"
    },
    "_id": "tutorials/javascript/javascript-enabling.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/javascript-enabling.md",
      "sourceFileName": "javascript-enabling.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/javascript-enabling"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/javascript-enabling",
    "language": "javascript"
  },
  {
    "title": "JavaScript - Overview",
    "slug": "javascript-overview",
    "order": 2,
    "description": "A high-level overview of JavaScript, its history, and its role in modern web development.",
    "category": "JavaScript Basics",
    "body": {
      "raw": "\n## What is JavaScript?\n\nJavaScript is a high-level, interpreted programming language that is a cornerstone technology of the World Wide Web, alongside HTML and CSS. While it was initially created to make web pages interactive, it has since evolved into a versatile language used for both front-end (client-side) and back-end (server-side) development.\n\n### The \"Big Three\" of Web Development\n-   **HTML (HyperText Markup Language)**: Provides the basic structure and content of web pages. Think of it as the skeleton.\n-   **CSS (Cascading Style Sheets)**: Used to control the presentation, formatting, and layout of the content. Think of it as the clothing and appearance.\n-   **JavaScript**: Used to control the behavior of the web page, creating dynamic and interactive experiences. Think of it as the brain and nervous system.\n\n### How JavaScript Works\nJavaScript code is embedded in or included from HTML pages and is executed by the JavaScript engine in the user's web browser. This client-side execution allows for immediate feedback and manipulation of the page content without needing to communicate with a server for every action.\n\n### Beyond the Browser: Node.js\nIn 2009, the creation of **Node.js** allowed JavaScript to be run outside of the browser, on servers. This opened the door for full-stack development using a single language, greatly expanding JavaScript's use cases to include:\n-   Building web servers and APIs.\n-   Creating command-line tools.\n-   Developing desktop applications.\n-   Powering IoT devices.\n\nJavaScript is an essential skill for any modern web developer and serves as the foundation for countless frameworks, libraries, and tools that power the web today.\n",
      "html": "<h2>What is JavaScript?</h2>\n<p>JavaScript is a high-level, interpreted programming language that is a cornerstone technology of the World Wide Web, alongside HTML and CSS. While it was initially created to make web pages interactive, it has since evolved into a versatile language used for both front-end (client-side) and back-end (server-side) development.</p>\n<h3>The \"Big Three\" of Web Development</h3>\n<ul>\n<li><strong>HTML (HyperText Markup Language)</strong>: Provides the basic structure and content of web pages. Think of it as the skeleton.</li>\n<li><strong>CSS (Cascading Style Sheets)</strong>: Used to control the presentation, formatting, and layout of the content. Think of it as the clothing and appearance.</li>\n<li><strong>JavaScript</strong>: Used to control the behavior of the web page, creating dynamic and interactive experiences. Think of it as the brain and nervous system.</li>\n</ul>\n<h3>How JavaScript Works</h3>\n<p>JavaScript code is embedded in or included from HTML pages and is executed by the JavaScript engine in the user's web browser. This client-side execution allows for immediate feedback and manipulation of the page content without needing to communicate with a server for every action.</p>\n<h3>Beyond the Browser: Node.js</h3>\n<p>In 2009, the creation of <strong>Node.js</strong> allowed JavaScript to be run outside of the browser, on servers. This opened the door for full-stack development using a single language, greatly expanding JavaScript's use cases to include:</p>\n<ul>\n<li>Building web servers and APIs.</li>\n<li>Creating command-line tools.</li>\n<li>Developing desktop applications.</li>\n<li>Powering IoT devices.</li>\n</ul>\n<p>JavaScript is an essential skill for any modern web developer and serves as the foundation for countless frameworks, libraries, and tools that power the web today.</p>"
    },
    "_id": "tutorials/javascript/javascript-overview.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/javascript-overview.md",
      "sourceFileName": "javascript-overview.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/javascript-overview"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/javascript-overview",
    "language": "javascript"
  },
  {
    "title": "JavaScript - Placement",
    "slug": "javascript-placement",
    "order": 6,
    "description": "Learn where to place your JavaScript code within an HTML document for optimal performance and behavior.",
    "category": "JavaScript Basics",
    "body": {
      "raw": "\n## Where to Place JavaScript Code\n\nYou can place JavaScript code within an HTML document using the `<script>` tag. There are three main ways to include JavaScript, and the placement can affect your page's performance and behavior.\n\n### 1. Internal JavaScript (in the `<head>`)\n\nYou can place your JavaScript code directly inside the `<head>` section of your HTML file.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>JS in Head</title>\n    <script>\n        function sayHello() {\n            alert('Hello, World!');\n        }\n    </script>\n</head>\n<body>\n    <button onclick=\"sayHello()\">Click Me</button>\n</body>\n</html>\n```\n**Behavior**: The browser will parse and execute the JavaScript code before it starts rendering the body of the page. This can be problematic if your script is large, as it will block the page from displaying until the script is fully loaded and executed. This placement is generally discouraged for scripts that are not critical to the initial page paint.\n\n### 2. Internal JavaScript (in the `<body>`)\n\nPlacing scripts at the end of the `<body>` section is a common practice.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>JS in Body</title>\n</head>\n<body>\n\n    <h1>My Web Page</h1>\n    <p id=\"demo\"></p>\n\n    <script>\n        document.getElementById(\"demo\").innerHTML = \"Hello from JavaScript!\";\n    </script>\n\n</body>\n</html>\n```\n**Behavior**: The browser renders the HTML content first and then executes the JavaScript. This improves the perceived page load speed because users can see the page content before the scripts have finished running. It also ensures that all HTML elements are available in the DOM when the script tries to access them.\n\n### 3. External JavaScript (Recommended)\n\nThe best practice is to place your JavaScript in a separate `.js` file and link to it. This keeps your HTML clean and allows the browser to cache the script file.\n\n**`my_script.js`**:\n```javascript\nfunction changeText() {\n    document.getElementById(\"header\").innerHTML = \"Welcome to External JS!\";\n}\n```\n\n**`index.html`**:\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>External JS</title>\n</head>\n<body>\n\n    <h1 id=\"header\">Hello!</h1>\n    <button onclick=\"changeText()\">Change Text</button>\n\n    <!-- Linking the external script at the end of the body -->\n    <script src=\"my_script.js\"></script>\n\n</body>\n</html>\n```\n**Placement**: Like internal scripts, external scripts can be linked in the `<head>` or `<body>`. For best performance, it is almost always recommended to link them just before the closing `</body>` tag.\n\n#### Using `async` and `defer`\nWhen linking external scripts in the `<head>`, you can use the `async` and `defer` attributes to control how they are loaded and executed, preventing them from blocking page rendering.\n-   `<script defer src=\"script.js\">`: The script is downloaded in parallel with page parsing and executed after the parser has completed. Scripts with `defer` execute in the order they appear in the HTML.\n-   `<script async src=\"script.js\">`: The script is downloaded in parallel and executed as soon as it's available, which can be before the HTML parsing is complete. This can block rendering and the order of execution is not guaranteed.\n",
      "html": "<h2>Where to Place JavaScript Code</h2>\n<p>You can place JavaScript code within an HTML document using the <code>&#x3C;script></code> tag. There are three main ways to include JavaScript, and the placement can affect your page's performance and behavior.</p>\n<h3>1. Internal JavaScript (in the <code>&#x3C;head></code>)</h3>\n<p>You can place your JavaScript code directly inside the <code>&#x3C;head></code> section of your HTML file.</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;title>JS in Head&#x3C;/title>\n    &#x3C;script>\n        function sayHello() {\n            alert('Hello, World!');\n        }\n    &#x3C;/script>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;button onclick=\"sayHello()\">Click Me&#x3C;/button>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><strong>Behavior</strong>: The browser will parse and execute the JavaScript code before it starts rendering the body of the page. This can be problematic if your script is large, as it will block the page from displaying until the script is fully loaded and executed. This placement is generally discouraged for scripts that are not critical to the initial page paint.</p>\n<h3>2. Internal JavaScript (in the <code>&#x3C;body></code>)</h3>\n<p>Placing scripts at the end of the <code>&#x3C;body></code> section is a common practice.</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;title>JS in Body&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n    &#x3C;h1>My Web Page&#x3C;/h1>\n    &#x3C;p id=\"demo\">&#x3C;/p>\n\n    &#x3C;script>\n        document.getElementById(\"demo\").innerHTML = \"Hello from JavaScript!\";\n    &#x3C;/script>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><strong>Behavior</strong>: The browser renders the HTML content first and then executes the JavaScript. This improves the perceived page load speed because users can see the page content before the scripts have finished running. It also ensures that all HTML elements are available in the DOM when the script tries to access them.</p>\n<h3>3. External JavaScript (Recommended)</h3>\n<p>The best practice is to place your JavaScript in a separate <code>.js</code> file and link to it. This keeps your HTML clean and allows the browser to cache the script file.</p>\n<p><strong><code>my_script.js</code></strong>:</p>\n<pre><code class=\"language-javascript\">function changeText() {\n    document.getElementById(\"header\").innerHTML = \"Welcome to External JS!\";\n}\n</code></pre>\n<p><strong><code>index.html</code></strong>:</p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html>\n&#x3C;head>\n    &#x3C;title>External JS&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n\n    &#x3C;h1 id=\"header\">Hello!&#x3C;/h1>\n    &#x3C;button onclick=\"changeText()\">Change Text&#x3C;/button>\n\n    &#x3C;!-- Linking the external script at the end of the body -->\n    &#x3C;script src=\"my_script.js\">&#x3C;/script>\n\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p><strong>Placement</strong>: Like internal scripts, external scripts can be linked in the <code>&#x3C;head></code> or <code>&#x3C;body></code>. For best performance, it is almost always recommended to link them just before the closing <code>&#x3C;/body></code> tag.</p>\n<h4>Using <code>async</code> and <code>defer</code></h4>\n<p>When linking external scripts in the <code>&#x3C;head></code>, you can use the <code>async</code> and <code>defer</code> attributes to control how they are loaded and executed, preventing them from blocking page rendering.</p>\n<ul>\n<li><code>&#x3C;script defer src=\"script.js\"></code>: The script is downloaded in parallel with page parsing and executed after the parser has completed. Scripts with <code>defer</code> execute in the order they appear in the HTML.</li>\n<li><code>&#x3C;script async src=\"script.js\"></code>: The script is downloaded in parallel and executed as soon as it's available, which can be before the HTML parsing is complete. This can block rendering and the order of execution is not guaranteed.</li>\n</ul>"
    },
    "_id": "tutorials/javascript/javascript-placement.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/javascript-placement.md",
      "sourceFileName": "javascript-placement.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/javascript-placement"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/javascript-placement",
    "language": "javascript"
  },
  {
    "title": "JavaScript - Syntax",
    "slug": "javascript-syntax",
    "order": 7,
    "description": "Understand the basic syntax rules of JavaScript programming.",
    "category": "JavaScript Basics",
    "body": {
      "raw": "\n## JavaScript Syntax\n\nJavaScript syntax is the set of rules that define a correctly structured JavaScript program.\n\n### Basic Rules\n\n- **Case-Sensitive**: JavaScript is case-sensitive. `myVariable` and `myvariable` are two different variables.\n- **Semicolons**: Semicolons (`;`) are used to separate statements. They are often optional due to Automatic Semicolon Insertion (ASI), but it's a good practice to use them to avoid ambiguity.\n- **Whitespace**: JavaScript ignores extra spaces. You can add white space to your script to make it more readable.\n\n### Literals\nLiterals are fixed values in a program's source code.\n\n- **Numbers**: Can be integers or floating-point numbers. `100`, `3.14`.\n- **Strings**: Can be enclosed in single (`'`) or double (`\"`) quotes. `'Hello'`, `\"World\"`.\n- **Booleans**: `true` or `false`.\n- **Objects**: `{ key: 'value' }`.\n- **Arrays**: `[1, 2, 3]`.\n\n### Variables\nVariables are containers for storing data values. In JavaScript, you can use `var`, `let`, or `const`.\n\n```javascript\nlet x;       // Declare a variable\nx = 5;       // Assign a value\nlet y = 10;  // Declare and assign\nconst PI = 3.14; // Declare a constant\n```\n\n### Operators\nJavaScript uses arithmetic operators (`+`, `-`, `*`, `/`), assignment operators (`=`), and comparison operators (`==`, `>`).\n\n```javascript\nlet sum = 5 + 10; // 15\n```\n\n### Comments\nComments are used to explain code and are ignored by the interpreter.\n\n```javascript\n// This is a single-line comment\n\n/*\nThis is a\nmulti-line comment.\n*/\n```\n\nUnderstanding these basic syntax rules is the first step to writing JavaScript code.\n",
      "html": "<h2>JavaScript Syntax</h2>\n<p>JavaScript syntax is the set of rules that define a correctly structured JavaScript program.</p>\n<h3>Basic Rules</h3>\n<ul>\n<li><strong>Case-Sensitive</strong>: JavaScript is case-sensitive. <code>myVariable</code> and <code>myvariable</code> are two different variables.</li>\n<li><strong>Semicolons</strong>: Semicolons (<code>;</code>) are used to separate statements. They are often optional due to Automatic Semicolon Insertion (ASI), but it's a good practice to use them to avoid ambiguity.</li>\n<li><strong>Whitespace</strong>: JavaScript ignores extra spaces. You can add white space to your script to make it more readable.</li>\n</ul>\n<h3>Literals</h3>\n<p>Literals are fixed values in a program's source code.</p>\n<ul>\n<li><strong>Numbers</strong>: Can be integers or floating-point numbers. <code>100</code>, <code>3.14</code>.</li>\n<li><strong>Strings</strong>: Can be enclosed in single (<code>'</code>) or double (<code>\"</code>) quotes. <code>'Hello'</code>, <code>\"World\"</code>.</li>\n<li><strong>Booleans</strong>: <code>true</code> or <code>false</code>.</li>\n<li><strong>Objects</strong>: <code>{ key: 'value' }</code>.</li>\n<li><strong>Arrays</strong>: <code>[1, 2, 3]</code>.</li>\n</ul>\n<h3>Variables</h3>\n<p>Variables are containers for storing data values. In JavaScript, you can use <code>var</code>, <code>let</code>, or <code>const</code>.</p>\n<pre><code class=\"language-javascript\">let x;       // Declare a variable\nx = 5;       // Assign a value\nlet y = 10;  // Declare and assign\nconst PI = 3.14; // Declare a constant\n</code></pre>\n<h3>Operators</h3>\n<p>JavaScript uses arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), assignment operators (<code>=</code>), and comparison operators (<code>==</code>, <code>></code>).</p>\n<pre><code class=\"language-javascript\">let sum = 5 + 10; // 15\n</code></pre>\n<h3>Comments</h3>\n<p>Comments are used to explain code and are ignored by the interpreter.</p>\n<pre><code class=\"language-javascript\">// This is a single-line comment\n\n/*\nThis is a\nmulti-line comment.\n*/\n</code></pre>\n<p>Understanding these basic syntax rules is the first step to writing JavaScript code.</p>"
    },
    "_id": "tutorials/javascript/javascript-syntax.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/javascript-syntax.md",
      "sourceFileName": "javascript-syntax.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/javascript-syntax"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/javascript-syntax",
    "language": "javascript"
  },
  {
    "title": "JavaScript - let Statement",
    "slug": "let-statement",
    "order": 12,
    "description": "Learn how to use the let keyword to declare block-scoped variables in JavaScript.",
    "category": "JavaScript Basics",
    "body": {
      "raw": "\n## What is JavaScript let statement?\nThe JavaScript let statement is used to declare a variable. With the let statement, we can declare a variable that is block-scoped. This mean a variable declared with let is only accessible within the block of code in which it is defined.\n\nThe let keyword was introduced in the ES6 (2015) version of JavaScript. It is an alternative to the var keyword.\n\nThe main reason behind introducing the let keyword is to improve the scoping behaviors of variables and the safety of the code.\n\n## Variable Declaration with let statement\nFollowing is the syntax to declare a variable with let statement −\n\n```javascript\nlet var_name = value\n```\nLet's have a look at some examples for variable declaration with let.\n\n```javascript\nlet name = \"John\";\nlet age = 35;\nlet x = true;\n```\nUsing let statement we can declare a variable of any datatypes, e.g., numeric, string, boolean, etc.\n\n## JavaScript Block Scope vs. Function Scope\nThe scope of the variable declared with the let keyword is a block-scope. It means if you define the variable with the let keyword in the specific block, you can access the variable inside that particular block only, and if you try to access the variable outside the block, it raises an error like 'variable is not defined'.\n\n```javascript\n{\n   let x = \"John\";\n}\n//here x can't be accessed\n```\nThe var keyword has a function scope, meaning if you define the variable using the var keyword in any function block, you can access it throughout the function.\n\n```javascript\nfunction foo(){\n   if (true){\n      let x = 5\n      var y = 10\n   }\n   // here x can't be accessed while y is accessible\n}\n```\nSometimes, we require to define the variable with the same name in different blocks of one function. Conflicts may occur with the variable value if they use the var keyword.\n\n### Example\nIn the example below, we have defined the variable x using the let keyword and variable y using the var keyword. Also, we have assigned 10 and 20 values to both variables, respectively.\n\nWe defined the test() function, redeclared the x and y variables inside it, and initialized them with 50 and 100 values, respectively. We print variable values inside the function, and it prints the 50 and 100 as it gives first preference to the local variables over global variables.\n\n```html\n<html>\n<head>\n   <title> Variable declaration with let keyword </title>\n</head>\n<body>\n   <script>\n      let x = 10;\n\t  var y = 20;\n\t  function test() {\n\t     let x = 50;\n\t     var y = 100;\n\t     document.write(\"x = \" + x + \", y = \" + y + \"<br/>\");\n\t  }\n\t  test();\n   </script>\n</body>\n</html>\n```\n\n### Example\nIn the example below, we initialized the bool variable with a 'true' value. After that, we declared the variables x and y using the let and var keywords in the 'if' block.\n\nWe print the value of the x and y variable inside the 'if' block. We can't access the 'x' variable outside the 'if' block as it has blocked scope, but we can access variable y outside the 'if' block and inside the function block as it has function scope.\n\n```html\n<html>\n<head>\n   <title> Variable declaration with let keyword </title>\n</head>\n<body>\n   <script>\n      function test() {\n\t     let bool = true;\n\t\t if (bool) {\n\t\t    let x = 30;\n\n\t\t    var y = 40;\n\t\t    document.write(\"x = \" + x + \", y = \" + y + \"<br/>\");\n\t\t }\n\t\t // x can't be accessible here\n\t\t document.write(\"y = \" + y + \"<br/>\");\n\t\t}\n      test();\n   </script>\n</body>\n</html>\n```\nIn this way, the let keyword is used to improve the scoping behaviors of the code.\n\n## Redeclaring Variables in JavaScript\nYou can't redeclare the variables declared with the let keyword in the same block. However, you can declare the variables with the same name into the different blocks with the same function.\n\n### Example\nIn the example below, you can observe that variables declared with the let keyword cant be redeclared in the same block, but variables declared with the var keyword can be redeclared in the same block.\n\nThe code prints the value of the newly declared variable in the output.\n\n```html\n<html>\n<head>\n   <title> Variable redeclaring </title>\n</head>\n<body>\n   <script>\n      function test() {\n\t     if (1) {\n\t        let m = 70;\n\t\t\t// let m = 80; // redeclaration with let keyword is not\tpossible\n\t\t\tvar n = 80;\n\t\t\tvar n = 90; // redeclaration with var keyword is possible\n\t\t\tdocument.write(\"m = \" + m + \", n = \" + n);\n\t\t }\n\t  }\n      test();\n   </script>\n</body>\n</html>\n```\n\n## Variable Hoisting\nThe hoisting behaviors of JavaScript move the declaration of the variables at the top of the code. The let keyword doesn't support hoisting, but the var keyword supports the hosting.\n\n### Example\nIn the example below, you can see that we can initialize and print the value of the variable n before its declaration as it is declared using the var keyword.\n\n```html\n<html>\n<head>\n   <title> Variable hoisting </title>\n</head>\n<body>\n   <script>\n      function test() {\n         // Hoisiting is not supported by let keyword\n         // m = 100;\n         // document.write(\"m = \" + m + \"<br/>\");\n         // let m;\n         n = 50;\n         document.write(\"n = \" + n + \"<br/>\");\n         var n;\n      }\n      test();\n   </script>\n</body>\n</html>\n```\n\nYou can uncomment the code using the let keyword and check the error in the web console, as it doesn't support hoisting.\n",
      "html": "<h2>What is JavaScript let statement?</h2>\n<p>The JavaScript let statement is used to declare a variable. With the let statement, we can declare a variable that is block-scoped. This mean a variable declared with let is only accessible within the block of code in which it is defined.</p>\n<p>The let keyword was introduced in the ES6 (2015) version of JavaScript. It is an alternative to the var keyword.</p>\n<p>The main reason behind introducing the let keyword is to improve the scoping behaviors of variables and the safety of the code.</p>\n<h2>Variable Declaration with let statement</h2>\n<p>Following is the syntax to declare a variable with let statement −</p>\n<pre><code class=\"language-javascript\">let var_name = value\n</code></pre>\n<p>Let's have a look at some examples for variable declaration with let.</p>\n<pre><code class=\"language-javascript\">let name = \"John\";\nlet age = 35;\nlet x = true;\n</code></pre>\n<p>Using let statement we can declare a variable of any datatypes, e.g., numeric, string, boolean, etc.</p>\n<h2>JavaScript Block Scope vs. Function Scope</h2>\n<p>The scope of the variable declared with the let keyword is a block-scope. It means if you define the variable with the let keyword in the specific block, you can access the variable inside that particular block only, and if you try to access the variable outside the block, it raises an error like 'variable is not defined'.</p>\n<pre><code class=\"language-javascript\">{\n   let x = \"John\";\n}\n//here x can't be accessed\n</code></pre>\n<p>The var keyword has a function scope, meaning if you define the variable using the var keyword in any function block, you can access it throughout the function.</p>\n<pre><code class=\"language-javascript\">function foo(){\n   if (true){\n      let x = 5\n      var y = 10\n   }\n   // here x can't be accessed while y is accessible\n}\n</code></pre>\n<p>Sometimes, we require to define the variable with the same name in different blocks of one function. Conflicts may occur with the variable value if they use the var keyword.</p>\n<h3>Example</h3>\n<p>In the example below, we have defined the variable x using the let keyword and variable y using the var keyword. Also, we have assigned 10 and 20 values to both variables, respectively.</p>\n<p>We defined the test() function, redeclared the x and y variables inside it, and initialized them with 50 and 100 values, respectively. We print variable values inside the function, and it prints the 50 and 100 as it gives first preference to the local variables over global variables.</p>\n<pre><code class=\"language-html\">&#x3C;html>\n&#x3C;head>\n   &#x3C;title> Variable declaration with let keyword &#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n   &#x3C;script>\n      let x = 10;\n\t  var y = 20;\n\t  function test() {\n\t     let x = 50;\n\t     var y = 100;\n\t     document.write(\"x = \" + x + \", y = \" + y + \"&#x3C;br/>\");\n\t  }\n\t  test();\n   &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h3>Example</h3>\n<p>In the example below, we initialized the bool variable with a 'true' value. After that, we declared the variables x and y using the let and var keywords in the 'if' block.</p>\n<p>We print the value of the x and y variable inside the 'if' block. We can't access the 'x' variable outside the 'if' block as it has blocked scope, but we can access variable y outside the 'if' block and inside the function block as it has function scope.</p>\n<pre><code class=\"language-html\">&#x3C;html>\n&#x3C;head>\n   &#x3C;title> Variable declaration with let keyword &#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n   &#x3C;script>\n      function test() {\n\t     let bool = true;\n\t\t if (bool) {\n\t\t    let x = 30;\n\n\t\t    var y = 40;\n\t\t    document.write(\"x = \" + x + \", y = \" + y + \"&#x3C;br/>\");\n\t\t }\n\t\t // x can't be accessible here\n\t\t document.write(\"y = \" + y + \"&#x3C;br/>\");\n\t\t}\n      test();\n   &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>In this way, the let keyword is used to improve the scoping behaviors of the code.</p>\n<h2>Redeclaring Variables in JavaScript</h2>\n<p>You can't redeclare the variables declared with the let keyword in the same block. However, you can declare the variables with the same name into the different blocks with the same function.</p>\n<h3>Example</h3>\n<p>In the example below, you can observe that variables declared with the let keyword cant be redeclared in the same block, but variables declared with the var keyword can be redeclared in the same block.</p>\n<p>The code prints the value of the newly declared variable in the output.</p>\n<pre><code class=\"language-html\">&#x3C;html>\n&#x3C;head>\n   &#x3C;title> Variable redeclaring &#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n   &#x3C;script>\n      function test() {\n\t     if (1) {\n\t        let m = 70;\n\t\t\t// let m = 80; // redeclaration with let keyword is not\tpossible\n\t\t\tvar n = 80;\n\t\t\tvar n = 90; // redeclaration with var keyword is possible\n\t\t\tdocument.write(\"m = \" + m + \", n = \" + n);\n\t\t }\n\t  }\n      test();\n   &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h2>Variable Hoisting</h2>\n<p>The hoisting behaviors of JavaScript move the declaration of the variables at the top of the code. The let keyword doesn't support hoisting, but the var keyword supports the hosting.</p>\n<h3>Example</h3>\n<p>In the example below, you can see that we can initialize and print the value of the variable n before its declaration as it is declared using the var keyword.</p>\n<pre><code class=\"language-html\">&#x3C;html>\n&#x3C;head>\n   &#x3C;title> Variable hoisting &#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n   &#x3C;script>\n      function test() {\n         // Hoisiting is not supported by let keyword\n         // m = 100;\n         // document.write(\"m = \" + m + \"&#x3C;br/>\");\n         // let m;\n         n = 50;\n         document.write(\"n = \" + n + \"&#x3C;br/>\");\n         var n;\n      }\n      test();\n   &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>You can uncomment the code using the let keyword and check the error in the web console, as it doesn't support hoisting.</p>"
    },
    "_id": "tutorials/javascript/let-statement.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/let-statement.md",
      "sourceFileName": "let-statement.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/let-statement"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/let-statement",
    "language": "javascript"
  },
  {
    "title": "JavaScript Loops",
    "slug": "javascript-loops",
    "order": 5,
    "description": "Learn how to repeat actions using different types of loops in JavaScript.",
    "category": "JS Control Flow",
    "body": {
      "raw": "\n## JavaScript Loops\n\nLoops are handy if you want to run the same code over and over again, each time with a different value.\n\n### The `for` Loop\nThe `for` loop is often the tool you'll use when you want to iterate over a block of code a certain number of times.\n\n```javascript\nfor (let i = 0; i < 5; i++) {\n  console.log(\"The number is \" + i);\n}\n// This will print numbers 0 through 4.\n```\n\n### The `for...in` Loop\nThe `for...in` statement iterates over the properties of an object.\n\n```javascript\nconst person = {fname:\"John\", lname:\"Doe\", age:25};\n\nfor (let key in person) {\n  console.log(key + \": \" + person[key]);\n}\n// Prints:\n// fname: John\n// lname: Doe\n// age: 25\n```\n\n### The `for...of` Loop\nThe `for...of` statement iterates over the values of an iterable object (like an Array, String, Map, etc.).\n\n```javascript\nconst colors = [\"red\", \"green\", \"blue\"];\n\nfor (let color of colors) {\n  console.log(color);\n}\n// Prints:\n// red\n// green\n// blue\n```\n\n### The `while` Loop\nThe `while` loop loops through a block of code as long as a specified condition is true.\n\n```javascript\nlet i = 0;\nwhile (i < 5) {\n  console.log(\"The number is \" + i);\n  i++;\n}\n```\n\n### The `do...while` Loop\nThe `do...while` loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\n\n```javascript\nlet i = 0;\ndo {\n  console.log(\"The number is \" + i);\n  i++;\n}\nwhile (i < 5);\n```\n",
      "html": "<h2>JavaScript Loops</h2>\n<p>Loops are handy if you want to run the same code over and over again, each time with a different value.</p>\n<h3>The <code>for</code> Loop</h3>\n<p>The <code>for</code> loop is often the tool you'll use when you want to iterate over a block of code a certain number of times.</p>\n<pre><code class=\"language-javascript\">for (let i = 0; i &#x3C; 5; i++) {\n  console.log(\"The number is \" + i);\n}\n// This will print numbers 0 through 4.\n</code></pre>\n<h3>The <code>for...in</code> Loop</h3>\n<p>The <code>for...in</code> statement iterates over the properties of an object.</p>\n<pre><code class=\"language-javascript\">const person = {fname:\"John\", lname:\"Doe\", age:25};\n\nfor (let key in person) {\n  console.log(key + \": \" + person[key]);\n}\n// Prints:\n// fname: John\n// lname: Doe\n// age: 25\n</code></pre>\n<h3>The <code>for...of</code> Loop</h3>\n<p>The <code>for...of</code> statement iterates over the values of an iterable object (like an Array, String, Map, etc.).</p>\n<pre><code class=\"language-javascript\">const colors = [\"red\", \"green\", \"blue\"];\n\nfor (let color of colors) {\n  console.log(color);\n}\n// Prints:\n// red\n// green\n// blue\n</code></pre>\n<h3>The <code>while</code> Loop</h3>\n<p>The <code>while</code> loop loops through a block of code as long as a specified condition is true.</p>\n<pre><code class=\"language-javascript\">let i = 0;\nwhile (i &#x3C; 5) {\n  console.log(\"The number is \" + i);\n  i++;\n}\n</code></pre>\n<h3>The <code>do...while</code> Loop</h3>\n<p>The <code>do...while</code> loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.</p>\n<pre><code class=\"language-javascript\">let i = 0;\ndo {\n  console.log(\"The number is \" + i);\n  i++;\n}\nwhile (i &#x3C; 5);\n</code></pre>"
    },
    "_id": "tutorials/javascript/loops.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/loops.md",
      "sourceFileName": "loops.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/loops"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/javascript-loops",
    "language": "javascript"
  },
  {
    "title": "JavaScript Operators",
    "slug": "javascript-operators",
    "order": 5,
    "description": "Understand the different operators in JavaScript for performing arithmetic, assignment, comparison, and logical operations.",
    "category": "JS Fundamentals",
    "body": {
      "raw": "\n## JavaScript Operators\n\nJavaScript uses operators to perform operations on values and variables.\n\n### Arithmetic Operators\nUsed to perform arithmetic between numeric values.\n- `+` Addition\n- `-` Subtraction\n- `*` Multiplication\n- `/` Division\n- `**` Exponentiation (ES2016)\n- `%` Modulus (Division Remainder)\n- `++` Increment\n- `--` Decrement\n\n```javascript\nlet x = 10;\nlet y = 4;\nconsole.log(x + y); // 14\nconsole.log(x % y); // 2\n```\n\n### Assignment Operators\nUsed to assign values to JavaScript variables.\n- `=` Assign\n- `+=` Add and assign\n- `-=` Subtract and assign\n- `*=` Multiply and assign\n- `/=` Divide and assign\n\n```javascript\nlet a = 10;\na += 5; // a is now 15\n```\n\n### Comparison Operators\nUsed in logical statements to determine equality or difference between variables or values.\n- `==` Equal to (value)\n- `===` Equal value and equal type (strict equality)\n- `!=` Not equal to (value)\n- `!==` Not equal value or not equal type\n- `>` Greater than\n- `<` Less than\n- `>=` Greater than or equal to\n- `<=` Less than or equal to\n- `?` Ternary operator\n\n```javascript\nlet age = 18;\nlet canVote = (age < 18) ? \"Too young\" : \"Old enough\";\nconsole.log(canVote); // \"Old enough\"\n```\n\n### Logical Operators\nUsed to determine the logic between variables or values.\n- `&&` Logical AND\n- `||` Logical OR\n- `!` Logical NOT\n\n```javascript\nlet isAdult = true;\nlet hasLicense = false;\n\nif (isAdult && hasLicense) {\n  console.log(\"Can drive.\");\n} else {\n  console.log(\"Cannot drive.\");\n}\n```\n\n### Type Operators\n- `typeof` Returns the type of a variable\n- `instanceof` Returns `true` if an object is an instance of an object type\n\n```javascript\nconsole.log(typeof \"John\"); // \"string\"\nconsole.log([1, 2] instanceof Array); // true\n```\n",
      "html": "<h2>JavaScript Operators</h2>\n<p>JavaScript uses operators to perform operations on values and variables.</p>\n<h3>Arithmetic Operators</h3>\n<p>Used to perform arithmetic between numeric values.</p>\n<ul>\n<li><code>+</code> Addition</li>\n<li><code>-</code> Subtraction</li>\n<li><code>*</code> Multiplication</li>\n<li><code>/</code> Division</li>\n<li><code>**</code> Exponentiation (ES2016)</li>\n<li><code>%</code> Modulus (Division Remainder)</li>\n<li><code>++</code> Increment</li>\n<li><code>--</code> Decrement</li>\n</ul>\n<pre><code class=\"language-javascript\">let x = 10;\nlet y = 4;\nconsole.log(x + y); // 14\nconsole.log(x % y); // 2\n</code></pre>\n<h3>Assignment Operators</h3>\n<p>Used to assign values to JavaScript variables.</p>\n<ul>\n<li><code>=</code> Assign</li>\n<li><code>+=</code> Add and assign</li>\n<li><code>-=</code> Subtract and assign</li>\n<li><code>*=</code> Multiply and assign</li>\n<li><code>/=</code> Divide and assign</li>\n</ul>\n<pre><code class=\"language-javascript\">let a = 10;\na += 5; // a is now 15\n</code></pre>\n<h3>Comparison Operators</h3>\n<p>Used in logical statements to determine equality or difference between variables or values.</p>\n<ul>\n<li><code>==</code> Equal to (value)</li>\n<li><code>===</code> Equal value and equal type (strict equality)</li>\n<li><code>!=</code> Not equal to (value)</li>\n<li><code>!==</code> Not equal value or not equal type</li>\n<li><code>></code> Greater than</li>\n<li><code>&#x3C;</code> Less than</li>\n<li><code>>=</code> Greater than or equal to</li>\n<li><code>&#x3C;=</code> Less than or equal to</li>\n<li><code>?</code> Ternary operator</li>\n</ul>\n<pre><code class=\"language-javascript\">let age = 18;\nlet canVote = (age &#x3C; 18) ? \"Too young\" : \"Old enough\";\nconsole.log(canVote); // \"Old enough\"\n</code></pre>\n<h3>Logical Operators</h3>\n<p>Used to determine the logic between variables or values.</p>\n<ul>\n<li><code>&#x26;&#x26;</code> Logical AND</li>\n<li><code>||</code> Logical OR</li>\n<li><code>!</code> Logical NOT</li>\n</ul>\n<pre><code class=\"language-javascript\">let isAdult = true;\nlet hasLicense = false;\n\nif (isAdult &#x26;&#x26; hasLicense) {\n  console.log(\"Can drive.\");\n} else {\n  console.log(\"Cannot drive.\");\n}\n</code></pre>\n<h3>Type Operators</h3>\n<ul>\n<li><code>typeof</code> Returns the type of a variable</li>\n<li><code>instanceof</code> Returns <code>true</code> if an object is an instance of an object type</li>\n</ul>\n<pre><code class=\"language-javascript\">console.log(typeof \"John\"); // \"string\"\nconsole.log([1, 2] instanceof Array); // true\n</code></pre>"
    },
    "_id": "tutorials/javascript/operators.md",
    "_raw": {
      "sourceFilePath": "tutorials/javascript/operators.md",
      "sourceFileName": "operators.md",
      "sourceFileDir": "tutorials/javascript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/javascript/operators"
    },
    "type": "TutorialPost",
    "url": "/tutorial/javascript/javascript-operators",
    "language": "javascript"
  },
  {
    "title": "Introduction to PHP",
    "slug": "introduction-to-php",
    "order": 1,
    "description": "An overview of PHP, a popular server-side scripting language.",
    "category": "Web Development",
    "body": {
      "raw": "\n## What is PHP?\n\nPHP (Hypertext Preprocessor) is a general-purpose scripting language especially suited to web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994. The PHP reference implementation is now produced by The PHP Group.\n",
      "html": "<h2>What is PHP?</h2>\n<p>PHP (Hypertext Preprocessor) is a general-purpose scripting language especially suited to web development. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994. The PHP reference implementation is now produced by The PHP Group.</p>"
    },
    "_id": "tutorials/php/introduction.md",
    "_raw": {
      "sourceFilePath": "tutorials/php/introduction.md",
      "sourceFileName": "introduction.md",
      "sourceFileDir": "tutorials/php",
      "contentType": "markdown",
      "flattenedPath": "tutorials/php/introduction"
    },
    "type": "TutorialPost",
    "url": "/tutorial/php/introduction-to-php",
    "language": "php"
  },
  {
    "title": "Mastering F-Strings in Python",
    "slug": "python-f-strings",
    "order": 3,
    "description": "Learn how to use f-strings for powerful and readable string formatting in Python.",
    "category": "Fundamentals",
    "body": {
      "raw": "\n## What are F-Strings?\n\nIntroduced in Python 3.6, f-strings (formatted string literals) provide a concise and convenient way to embed expressions inside string literals for formatting. They are prefixed with an 'f' or 'F' and allow you to embed Python expressions directly inside `{}` braces.\n\n## Basic Usage\n\nThe syntax is simple. Just place an `f` before the opening quote of your string, and then you can place any valid Python expression inside curly braces `{}`.\n\n```python\nname = \"Alice\"\nage = 30\ngreeting = f\"Hello, my name is {name} and I am {age} years old.\"\nprint(greeting)\n# Output: Hello, my name is Alice and I am 30 years old.\n```\n\n## Expressions Inside F-Strings\n\nYou can put any valid Python expression inside the braces, including function calls, arithmetic operations, and more.\n\n```python\n# Arithmetic operation\nprint(f\"Five plus ten is {5 + 10}.\")\n# Output: Five plus ten is 15.\n\n# Function call\ndef get_name():\n    return \"Bob\"\n\nprint(f\"His name is {get_name()}.\")\n# Output: His name is Bob.\n\n# Accessing dictionary values\nperson = {\"name\": \"Charlie\", \"age\": 25}\nprint(f\"{person['name']} is {person['age']} years old.\")\n# Output: Charlie is 25 years old.\n```\n\n## Formatting Specifiers\n\nF-strings also support format specifiers, which follow a colon `:` inside the braces. This allows for fine-grained control over the output.\n\n### Formatting Numbers\nYou can control decimal precision, padding, and alignment.\n\n```python\npi = 3.14159265\n\n# Format to 2 decimal places\nprint(f\"The value of pi is approximately {pi:.2f}.\")\n# Output: The value of pi is approximately 3.14.\n\n# Add padding\nnumber = 42\nprint(f\"The number is {number:05}.\") # Pad with leading zeros to a width of 5\n# Output: The number is 00042.\n```\n\n### Formatting Dates\n\nYou can format `datetime` objects easily.\n\n```python\nimport datetime\ntoday = datetime.datetime.now()\n\nprint(f\"Today is {today:%Y-%m-%d}.\")\n# Output: Today is 2024-07-10. (Will vary based on current date)\n```\n\nF-strings are the modern, preferred way to format strings in Python due to their readability and performance.\n",
      "html": "<h2>What are F-Strings?</h2>\n<p>Introduced in Python 3.6, f-strings (formatted string literals) provide a concise and convenient way to embed expressions inside string literals for formatting. They are prefixed with an 'f' or 'F' and allow you to embed Python expressions directly inside <code>{}</code> braces.</p>\n<h2>Basic Usage</h2>\n<p>The syntax is simple. Just place an <code>f</code> before the opening quote of your string, and then you can place any valid Python expression inside curly braces <code>{}</code>.</p>\n<pre><code class=\"language-python\">name = \"Alice\"\nage = 30\ngreeting = f\"Hello, my name is {name} and I am {age} years old.\"\nprint(greeting)\n# Output: Hello, my name is Alice and I am 30 years old.\n</code></pre>\n<h2>Expressions Inside F-Strings</h2>\n<p>You can put any valid Python expression inside the braces, including function calls, arithmetic operations, and more.</p>\n<pre><code class=\"language-python\"># Arithmetic operation\nprint(f\"Five plus ten is {5 + 10}.\")\n# Output: Five plus ten is 15.\n\n# Function call\ndef get_name():\n    return \"Bob\"\n\nprint(f\"His name is {get_name()}.\")\n# Output: His name is Bob.\n\n# Accessing dictionary values\nperson = {\"name\": \"Charlie\", \"age\": 25}\nprint(f\"{person['name']} is {person['age']} years old.\")\n# Output: Charlie is 25 years old.\n</code></pre>\n<h2>Formatting Specifiers</h2>\n<p>F-strings also support format specifiers, which follow a colon <code>:</code> inside the braces. This allows for fine-grained control over the output.</p>\n<h3>Formatting Numbers</h3>\n<p>You can control decimal precision, padding, and alignment.</p>\n<pre><code class=\"language-python\">pi = 3.14159265\n\n# Format to 2 decimal places\nprint(f\"The value of pi is approximately {pi:.2f}.\")\n# Output: The value of pi is approximately 3.14.\n\n# Add padding\nnumber = 42\nprint(f\"The number is {number:05}.\") # Pad with leading zeros to a width of 5\n# Output: The number is 00042.\n</code></pre>\n<h3>Formatting Dates</h3>\n<p>You can format <code>datetime</code> objects easily.</p>\n<pre><code class=\"language-python\">import datetime\ntoday = datetime.datetime.now()\n\nprint(f\"Today is {today:%Y-%m-%d}.\")\n# Output: Today is 2024-07-10. (Will vary based on current date)\n</code></pre>\n<p>F-strings are the modern, preferred way to format strings in Python due to their readability and performance.</p>"
    },
    "_id": "tutorials/python/f-strings.md",
    "_raw": {
      "sourceFilePath": "tutorials/python/f-strings.md",
      "sourceFileName": "f-strings.md",
      "sourceFileDir": "tutorials/python",
      "contentType": "markdown",
      "flattenedPath": "tutorials/python/f-strings"
    },
    "type": "TutorialPost",
    "url": "/tutorial/python/python-f-strings",
    "language": "python"
  },
  {
    "title": "Functions in Python",
    "slug": "functions",
    "order": 5,
    "description": "Understand how to define and use functions in Python for reusable code.",
    "category": "Functions",
    "body": {
      "raw": "\n## Defining and Using Functions\n\nA function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. A function can return data as a result.\n\n### Creating a Function\n\nIn Python a function is defined using the `def` keyword:\n\n```python\ndef my_function():\n  print(\"Hello from a function\")\n\nmy_function() # Calling the function\n```\n\n### Parameters and Arguments\n\nInformation can be passed into functions as arguments.\n\n```python\ndef greet(name):\n  print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n```\n\nThis tutorial explains Python functions in detail.\n",
      "html": "<h2>Defining and Using Functions</h2>\n<p>A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. A function can return data as a result.</p>\n<h3>Creating a Function</h3>\n<p>In Python a function is defined using the <code>def</code> keyword:</p>\n<pre><code class=\"language-python\">def my_function():\n  print(\"Hello from a function\")\n\nmy_function() # Calling the function\n</code></pre>\n<h3>Parameters and Arguments</h3>\n<p>Information can be passed into functions as arguments.</p>\n<pre><code class=\"language-python\">def greet(name):\n  print(f\"Hello, {name}!\")\n\ngreet(\"Alice\")\ngreet(\"Bob\")\n</code></pre>\n<p>This tutorial explains Python functions in detail.</p>"
    },
    "_id": "tutorials/python/functions.md",
    "_raw": {
      "sourceFilePath": "tutorials/python/functions.md",
      "sourceFileName": "functions.md",
      "sourceFileDir": "tutorials/python",
      "contentType": "markdown",
      "flattenedPath": "tutorials/python/functions"
    },
    "type": "TutorialPost",
    "url": "/tutorial/python/functions",
    "language": "python"
  },
  {
    "title": "Introduction to Python",
    "slug": "introduction-to-python",
    "order": 1,
    "description": "A brief overview of Python, its history, and why it's a popular choice for developers.",
    "category": "Getting Started",
    "body": {
      "raw": "\n## What is Python?\n\nPython is a high-level, interpreted programming language known for its readability and versatility. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. This focus on clarity makes it an excellent language for both beginners and seasoned developers.\n\n## Key Features\n\n- **Easy to Learn and Use**: Python has a simple syntax that is easy to pick up.\n- **Interpreted Language**: Code is executed line by line, making debugging easier.\n- **Cross-Platform**: Python runs on various operating systems like Windows, macOS, and Linux.\n- **Extensive Standard Library**: Comes with a large collection of modules and functions for many tasks, often called \"batteries included\".\n- **Dynamically Typed**: Variable types are checked at runtime, offering flexibility during development.\n\n## Common Uses\n\n- Web Development (Django, Flask)\n- Data Science and Machine Learning (NumPy, Pandas, Scikit-learn)\n- Automation and Scripting\n- Software Testing\n- Game Development (Pygame)\n\nThis tutorial series will guide you through the basics of Python programming, from fundamental concepts to more advanced topics. Let's get started!\n",
      "html": "<h2>What is Python?</h2>\n<p>Python is a high-level, interpreted programming language known for its readability and versatility. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. This focus on clarity makes it an excellent language for both beginners and seasoned developers.</p>\n<h2>Key Features</h2>\n<ul>\n<li><strong>Easy to Learn and Use</strong>: Python has a simple syntax that is easy to pick up.</li>\n<li><strong>Interpreted Language</strong>: Code is executed line by line, making debugging easier.</li>\n<li><strong>Cross-Platform</strong>: Python runs on various operating systems like Windows, macOS, and Linux.</li>\n<li><strong>Extensive Standard Library</strong>: Comes with a large collection of modules and functions for many tasks, often called \"batteries included\".</li>\n<li><strong>Dynamically Typed</strong>: Variable types are checked at runtime, offering flexibility during development.</li>\n</ul>\n<h2>Common Uses</h2>\n<ul>\n<li>Web Development (Django, Flask)</li>\n<li>Data Science and Machine Learning (NumPy, Pandas, Scikit-learn)</li>\n<li>Automation and Scripting</li>\n<li>Software Testing</li>\n<li>Game Development (Pygame)</li>\n</ul>\n<p>This tutorial series will guide you through the basics of Python programming, from fundamental concepts to more advanced topics. Let's get started!</p>"
    },
    "_id": "tutorials/python/introduction.md",
    "_raw": {
      "sourceFilePath": "tutorials/python/introduction.md",
      "sourceFileName": "introduction.md",
      "sourceFileDir": "tutorials/python",
      "contentType": "markdown",
      "flattenedPath": "tutorials/python/introduction"
    },
    "type": "TutorialPost",
    "url": "/tutorial/python/introduction-to-python",
    "language": "python"
  },
  {
    "title": "Loops in Python",
    "slug": "loops",
    "order": 4,
    "description": "Learn how to use for and while loops for iteration in Python.",
    "category": "Control Flow",
    "body": {
      "raw": "\n## Iterating with Loops in Python\n\nLoops are used in programming to repeat a specific block of code.\n\n### For Loops\n\nA for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).\n\n```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n  print(fruit)\n```\n\n### While Loops\n\nWith the while loop we can execute a set of statements as long as a condition is true.\n\n```python\ni = 1\nwhile i < 6:\n  print(i)\n  i += 1\n```\n\nThis tutorial covers for and while loops.\n",
      "html": "<h2>Iterating with Loops in Python</h2>\n<p>Loops are used in programming to repeat a specific block of code.</p>\n<h3>For Loops</h3>\n<p>A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).</p>\n<pre><code class=\"language-python\">fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n  print(fruit)\n</code></pre>\n<h3>While Loops</h3>\n<p>With the while loop we can execute a set of statements as long as a condition is true.</p>\n<pre><code class=\"language-python\">i = 1\nwhile i &#x3C; 6:\n  print(i)\n  i += 1\n</code></pre>\n<p>This tutorial covers for and while loops.</p>"
    },
    "_id": "tutorials/python/loops.md",
    "_raw": {
      "sourceFilePath": "tutorials/python/loops.md",
      "sourceFileName": "loops.md",
      "sourceFileDir": "tutorials/python",
      "contentType": "markdown",
      "flattenedPath": "tutorials/python/loops"
    },
    "type": "TutorialPost",
    "url": "/tutorial/python/loops",
    "language": "python"
  },
  {
    "title": "Understanding Python Decorators",
    "slug": "python-decorators",
    "order": 6,
    "description": "A practical guide to understanding and using decorators in Python.",
    "category": "Functions",
    "body": {
      "raw": "\n## What are Decorators?\n\nIn Python, a decorator is a design pattern that allows you to add new functionality to an existing object (like a function or method) without modifying its structure. Decorators are a form of metaprogramming, where a part of the program tries to modify another part of the program at compile time. They are often used for logging, access control, instrumentation, and more.\n\n## Basic Decorator Syntax\n\nA decorator is typically a function that takes another function as an argument (the decorated function), adds some functionality, and then returns another function.\n\n```python\ndef my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"Something is happening before the function is called.\")\n        result = func(*args, **kwargs)\n        print(\"Something is happening after the function is called.\")\n        return result\n    return wrapper\n\n@my_decorator\ndef say_hello(name):\n    print(f\"Hello, {name}!\")\n\nsay_hello(\"World\")\n```\n\nThis will output:\n```\nSomething is happening before the function is called.\nHello, World!\nSomething is happening after the function is called.\n```\n\n## Using `functools.wraps`\n\nWhen you use decorators, you are essentially replacing the original function with the wrapper function. This can obscure the original function's metadata (like its name, docstring, etc.). The `functools.wraps` decorator can be used to preserve this metadata.\n\n```python\nimport functools\n\ndef my_better_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Wrapper executing pre-call actions.\")\n        value = func(*args, **kwargs)\n        print(\"Wrapper executing post-call actions.\")\n        return value\n    return wrapper\n\n@my_better_decorator\ndef greet(name):\n    \"\"\"Greets a person.\"\"\"\n    return f\"Greetings, {name}!\"\n\nprint(greet(\"Pythonista\"))\nprint(greet.__name__) # Output: greet (thanks to @functools.wraps)\nprint(greet.__doc__)  # Output: Greets a person. (thanks to @functools.wraps)\n```\n\nDecorators are a very useful tool in Python for writing cleaner and more modular code.\n",
      "html": "<h2>What are Decorators?</h2>\n<p>In Python, a decorator is a design pattern that allows you to add new functionality to an existing object (like a function or method) without modifying its structure. Decorators are a form of metaprogramming, where a part of the program tries to modify another part of the program at compile time. They are often used for logging, access control, instrumentation, and more.</p>\n<h2>Basic Decorator Syntax</h2>\n<p>A decorator is typically a function that takes another function as an argument (the decorated function), adds some functionality, and then returns another function.</p>\n<pre><code class=\"language-python\">def my_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(\"Something is happening before the function is called.\")\n        result = func(*args, **kwargs)\n        print(\"Something is happening after the function is called.\")\n        return result\n    return wrapper\n\n@my_decorator\ndef say_hello(name):\n    print(f\"Hello, {name}!\")\n\nsay_hello(\"World\")\n</code></pre>\n<p>This will output:</p>\n<pre><code>Something is happening before the function is called.\nHello, World!\nSomething is happening after the function is called.\n</code></pre>\n<h2>Using <code>functools.wraps</code></h2>\n<p>When you use decorators, you are essentially replacing the original function with the wrapper function. This can obscure the original function's metadata (like its name, docstring, etc.). The <code>functools.wraps</code> decorator can be used to preserve this metadata.</p>\n<pre><code class=\"language-python\">import functools\n\ndef my_better_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Wrapper executing pre-call actions.\")\n        value = func(*args, **kwargs)\n        print(\"Wrapper executing post-call actions.\")\n        return value\n    return wrapper\n\n@my_better_decorator\ndef greet(name):\n    \"\"\"Greets a person.\"\"\"\n    return f\"Greetings, {name}!\"\n\nprint(greet(\"Pythonista\"))\nprint(greet.__name__) # Output: greet (thanks to @functools.wraps)\nprint(greet.__doc__)  # Output: Greets a person. (thanks to @functools.wraps)\n</code></pre>\n<p>Decorators are a very useful tool in Python for writing cleaner and more modular code.</p>"
    },
    "_id": "tutorials/python/python-decorators.md",
    "_raw": {
      "sourceFilePath": "tutorials/python/python-decorators.md",
      "sourceFileName": "python-decorators.md",
      "sourceFileDir": "tutorials/python",
      "contentType": "markdown",
      "flattenedPath": "tutorials/python/python-decorators"
    },
    "type": "TutorialPost",
    "url": "/tutorial/python/python-decorators",
    "language": "python"
  },
  {
    "title": "Python Variables and Data Types",
    "slug": "python-variables-data-types",
    "order": 2,
    "description": "Learn about variables, naming conventions, and fundamental data types in Python.",
    "category": "Fundamentals",
    "body": {
      "raw": "\n## Variables\n\nIn Python, variables are used to store data values. Python has no command for declaring a variable; a variable is created the moment you first assign a value to it.\n\n```python\nx = 5       # x is of type int\ny = \"Hello\" # y is of type str\nprint(x)\nprint(y)\n```\n\n### Naming Variables\n\n- A variable name must start with a letter or the underscore character.\n- A variable name cannot start with a number.\n- A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ).\n- Variable names are case-sensitive (age, Age and AGE are three different variables).\n\n## Data Types\n\nPython has various built-in data types. Here are some fundamental ones:\n\n- **Text Type**: `str`\n- **Numeric Types**: `int`, `float`, `complex`\n- **Sequence Types**: `list`, `tuple`, `range`\n- **Mapping Type**: `dict`\n- **Set Types**: `set`, `frozenset`\n- **Boolean Type**: `bool`\n- **Binary Types**: `bytes`, `bytearray`, `memoryview`\n\n### Example of Data Types\n\n```python\nmy_string = \"Python is fun\"      # str\nmy_integer = 100                 # int\nmy_float = 3.14                  # float\nmy_list = [\"apple\", \"banana\"]    # list\nmy_dict = {\"name\": \"Alice\", \"age\": 30} # dict\nmy_boolean = True                # bool\n\nprint(type(my_string))\nprint(type(my_integer))\nprint(type(my_float))\n```\n\nUnderstanding variables and data types is crucial for writing any Python program.\n",
      "html": "<h2>Variables</h2>\n<p>In Python, variables are used to store data values. Python has no command for declaring a variable; a variable is created the moment you first assign a value to it.</p>\n<pre><code class=\"language-python\">x = 5       # x is of type int\ny = \"Hello\" # y is of type str\nprint(x)\nprint(y)\n</code></pre>\n<h3>Naming Variables</h3>\n<ul>\n<li>A variable name must start with a letter or the underscore character.</li>\n<li>A variable name cannot start with a number.</li>\n<li>A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ).</li>\n<li>Variable names are case-sensitive (age, Age and AGE are three different variables).</li>\n</ul>\n<h2>Data Types</h2>\n<p>Python has various built-in data types. Here are some fundamental ones:</p>\n<ul>\n<li><strong>Text Type</strong>: <code>str</code></li>\n<li><strong>Numeric Types</strong>: <code>int</code>, <code>float</code>, <code>complex</code></li>\n<li><strong>Sequence Types</strong>: <code>list</code>, <code>tuple</code>, <code>range</code></li>\n<li><strong>Mapping Type</strong>: <code>dict</code></li>\n<li><strong>Set Types</strong>: <code>set</code>, <code>frozenset</code></li>\n<li><strong>Boolean Type</strong>: <code>bool</code></li>\n<li><strong>Binary Types</strong>: <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></li>\n</ul>\n<h3>Example of Data Types</h3>\n<pre><code class=\"language-python\">my_string = \"Python is fun\"      # str\nmy_integer = 100                 # int\nmy_float = 3.14                  # float\nmy_list = [\"apple\", \"banana\"]    # list\nmy_dict = {\"name\": \"Alice\", \"age\": 30} # dict\nmy_boolean = True                # bool\n\nprint(type(my_string))\nprint(type(my_integer))\nprint(type(my_float))\n</code></pre>\n<p>Understanding variables and data types is crucial for writing any Python program.</p>"
    },
    "_id": "tutorials/python/variables-and-data-types.md",
    "_raw": {
      "sourceFilePath": "tutorials/python/variables-and-data-types.md",
      "sourceFileName": "variables-and-data-types.md",
      "sourceFileDir": "tutorials/python",
      "contentType": "markdown",
      "flattenedPath": "tutorials/python/variables-and-data-types"
    },
    "type": "TutorialPost",
    "url": "/tutorial/python/python-variables-data-types",
    "language": "python"
  },
  {
    "title": "Introduction to SQL",
    "slug": "introduction-to-sql",
    "order": 1,
    "description": "A brief overview of SQL and its role in managing relational databases.",
    "category": "Databases",
    "body": {
      "raw": "\n## What is SQL?\n\nSQL (Structured Query Language) is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS).\n",
      "html": "<h2>What is SQL?</h2>\n<p>SQL (Structured Query Language) is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS).</p>"
    },
    "_id": "tutorials/sql/introduction.md",
    "_raw": {
      "sourceFilePath": "tutorials/sql/introduction.md",
      "sourceFileName": "introduction.md",
      "sourceFileDir": "tutorials/sql",
      "contentType": "markdown",
      "flattenedPath": "tutorials/sql/introduction"
    },
    "type": "TutorialPost",
    "url": "/tutorial/sql/introduction-to-sql",
    "language": "sql"
  },
  {
    "title": "Introduction to TypeScript",
    "slug": "introduction-to-typescript",
    "order": 1,
    "description": "An introduction to TypeScript and its relationship with JavaScript.",
    "category": "Getting Started",
    "body": {
      "raw": "\n## What is TypeScript?\n\nTypeScript is a free and open-source high-level programming language developed by Microsoft that adds static typing with optional type annotations to JavaScript. It is designed for the development of large applications and transpiles to JavaScript.\n",
      "html": "<h2>What is TypeScript?</h2>\n<p>TypeScript is a free and open-source high-level programming language developed by Microsoft that adds static typing with optional type annotations to JavaScript. It is designed for the development of large applications and transpiles to JavaScript.</p>"
    },
    "_id": "tutorials/typescript/introduction.md",
    "_raw": {
      "sourceFilePath": "tutorials/typescript/introduction.md",
      "sourceFileName": "introduction.md",
      "sourceFileDir": "tutorials/typescript",
      "contentType": "markdown",
      "flattenedPath": "tutorials/typescript/introduction"
    },
    "type": "TutorialPost",
    "url": "/tutorial/typescript/introduction-to-typescript",
    "language": "typescript"
  }
]