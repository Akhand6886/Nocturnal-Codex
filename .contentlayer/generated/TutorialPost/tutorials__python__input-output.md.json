{
  "title": "Input and Output in Python",
  "slug": "input-output",
  "order": 2,
  "description": "Learn how to handle user input and display output in Python.",
  "category": "Python Fundamentals",
  "body": {
    "raw": "\n## Input and Output in Python\n\nInteracting with the user is a fundamental part of many programs. In Python, this is primarily done by taking input from the user and displaying output to them.\n\n### Getting User Input\n\nPython provides the built-in `input()` function to get input from the user. When this function is called, the program stops execution and waits for the user to type something and press the Enter key.\n\n```python\n# The string inside input() is a prompt shown to the user.\nname = input(\"Please enter your name: \")\nprint(f\"Hello, {name}!\")\n```\n\n**Important Note:** The `input()` function always returns the user's input as a **string**. If you need to treat the input as a number, you must convert it using functions like `int()` or `float()`.\n\n```python\nage_str = input(\"What is your age? \")\nage = int(age_str) # Convert the string to an integer\n\n# You can perform calculations with the converted number\nyears_until_100 = 100 - age\nprint(f\"You will be 100 years old in {years_until_100} years.\")\n```\n\n### Displaying Output\n\nThe most common way to display output is using the `print()` function.\n\n#### Basic Printing\nYou can print strings, numbers, or any other object.\n```python\nprint(\"Hello, World!\")\nprint(42)\n```\n\n#### Printing Multiple Items\nYou can pass multiple items to `print()`, separated by commas. By default, they will be separated by a single space.\n```python\nprint(\"My name is\", \"Alice\", \"and my age is\", 30)\n# Output: My name is Alice and my age is 30\n```\n\n#### Changing the Separator and End Character\nThe `print()` function has optional parameters:\n- `sep`: The separator between arguments. Default is a space (`' '`).\n- `end`: The character printed at the end. Default is a newline (`'\\n'`).\n\n```python\n# Using a custom separator\nprint(\"apple\", \"banana\", \"cherry\", sep=\", \")\n# Output: apple, banana, cherry\n\n# Using a custom end character\nprint(\"First line\", end=\" | \")\nprint(\"Second line\")\n# Output: First line | Second line\n```\n\n#### Formatted Output with F-Strings\nF-strings (formatted string literals) are the modern and preferred way to format strings. They are easy to read and allow you to embed Python expressions directly inside a string.\n\n```python\nlanguage = \"Python\"\nversion = 3.12\nprint(f\"We are using {language} version {version}.\")\n# Output: We are using Python version 3.12\n\n# You can also include expressions\na = 5\nb = 10\nprint(f\"The sum of {a} and {b} is {a + b}.\")\n# Output: The sum of 5 and 10 is 15.\n```\n",
    "html": "<h2>Input and Output in Python</h2>\n<p>Interacting with the user is a fundamental part of many programs. In Python, this is primarily done by taking input from the user and displaying output to them.</p>\n<h3>Getting User Input</h3>\n<p>Python provides the built-in <code>input()</code> function to get input from the user. When this function is called, the program stops execution and waits for the user to type something and press the Enter key.</p>\n<pre><code class=\"language-python\"># The string inside input() is a prompt shown to the user.\nname = input(\"Please enter your name: \")\nprint(f\"Hello, {name}!\")\n</code></pre>\n<p><strong>Important Note:</strong> The <code>input()</code> function always returns the user's input as a <strong>string</strong>. If you need to treat the input as a number, you must convert it using functions like <code>int()</code> or <code>float()</code>.</p>\n<pre><code class=\"language-python\">age_str = input(\"What is your age? \")\nage = int(age_str) # Convert the string to an integer\n\n# You can perform calculations with the converted number\nyears_until_100 = 100 - age\nprint(f\"You will be 100 years old in {years_until_100} years.\")\n</code></pre>\n<h3>Displaying Output</h3>\n<p>The most common way to display output is using the <code>print()</code> function.</p>\n<h4>Basic Printing</h4>\n<p>You can print strings, numbers, or any other object.</p>\n<pre><code class=\"language-python\">print(\"Hello, World!\")\nprint(42)\n</code></pre>\n<h4>Printing Multiple Items</h4>\n<p>You can pass multiple items to <code>print()</code>, separated by commas. By default, they will be separated by a single space.</p>\n<pre><code class=\"language-python\">print(\"My name is\", \"Alice\", \"and my age is\", 30)\n# Output: My name is Alice and my age is 30\n</code></pre>\n<h4>Changing the Separator and End Character</h4>\n<p>The <code>print()</code> function has optional parameters:</p>\n<ul>\n<li><code>sep</code>: The separator between arguments. Default is a space (<code>' '</code>).</li>\n<li><code>end</code>: The character printed at the end. Default is a newline (<code>'\\n'</code>).</li>\n</ul>\n<pre><code class=\"language-python\"># Using a custom separator\nprint(\"apple\", \"banana\", \"cherry\", sep=\", \")\n# Output: apple, banana, cherry\n\n# Using a custom end character\nprint(\"First line\", end=\" | \")\nprint(\"Second line\")\n# Output: First line | Second line\n</code></pre>\n<h4>Formatted Output with F-Strings</h4>\n<p>F-strings (formatted string literals) are the modern and preferred way to format strings. They are easy to read and allow you to embed Python expressions directly inside a string.</p>\n<pre><code class=\"language-python\">language = \"Python\"\nversion = 3.12\nprint(f\"We are using {language} version {version}.\")\n# Output: We are using Python version 3.12\n\n# You can also include expressions\na = 5\nb = 10\nprint(f\"The sum of {a} and {b} is {a + b}.\")\n# Output: The sum of 5 and 10 is 15.\n</code></pre>"
  },
  "_id": "tutorials/python/input-output.md",
  "_raw": {
    "sourceFilePath": "tutorials/python/input-output.md",
    "sourceFileName": "input-output.md",
    "sourceFileDir": "tutorials/python",
    "contentType": "markdown",
    "flattenedPath": "tutorials/python/input-output"
  },
  "type": "TutorialPost",
  "url": "/tutorial/python/input-output",
  "language": "python"
}