{
  "title": "JavaScript Variables",
  "slug": "javascript-variables",
  "order": 3,
  "description": "Understand how to declare and use variables in JavaScript using var, let, and const.",
  "category": "JS Variables and Data Types",
  "body": {
    "raw": "\n## JavaScript Variables\n\nIn JavaScript, variables are containers for storing data values. You can declare variables using the keywords `var`, `let`, or `const`.\n\n### `var`\nThe `var` keyword was the original way to declare variables in JavaScript. Variables declared with `var` are function-scoped or globally-scoped.\n\n```javascript\nvar name = \"Alice\";\nvar age = 30;\n\nfunction sayHello() {\n  var message = \"Hello from the function\";\n  console.log(message); // \"Hello from the function\"\n}\n\n// console.log(message); // This would cause an error because message is function-scoped.\n```\n\n### `let`\nIntroduced in ES6 (ECMAScript 2015), `let` provides block-scoping. A block is any code enclosed in curly braces `{}`, like in an `if` statement or a `for` loop. It's generally recommended to use `let` over `var`.\n\n```javascript\nlet count = 10;\nif (true) {\n  let count = 20; // This is a different 'count' variable\n  console.log(count); // 20\n}\nconsole.log(count); // 10\n```\n\n### `const`\nAlso introduced in ES6, `const` is used to declare constants. Like `let`, it is block-scoped. A `const` variable cannot be reassigned.\n\n```javascript\nconst PI = 3.14159;\n// PI = 3.14; // This would throw an error.\n\n// For objects and arrays, the reference is constant, but the contents can be changed.\nconst person = { name: \"Bob\" };\nperson.name = \"Charlie\"; // This is allowed.\n// person = { name: \"David\" }; // This would throw an error.\n```\n\n### Naming Variables\n- Variable names can contain letters, digits, underscores, and dollar signs.\n- Names must begin with a letter, `$`, or `_`.\n- Names are case-sensitive (`y` and `Y` are different variables).\n- Reserved words (like JavaScript keywords) cannot be used as names.\n",
    "html": "<h2>JavaScript Variables</h2>\n<p>In JavaScript, variables are containers for storing data values. You can declare variables using the keywords <code>var</code>, <code>let</code>, or <code>const</code>.</p>\n<h3><code>var</code></h3>\n<p>The <code>var</code> keyword was the original way to declare variables in JavaScript. Variables declared with <code>var</code> are function-scoped or globally-scoped.</p>\n<pre><code class=\"language-javascript\">var name = \"Alice\";\nvar age = 30;\n\nfunction sayHello() {\n  var message = \"Hello from the function\";\n  console.log(message); // \"Hello from the function\"\n}\n\n// console.log(message); // This would cause an error because message is function-scoped.\n</code></pre>\n<h3><code>let</code></h3>\n<p>Introduced in ES6 (ECMAScript 2015), <code>let</code> provides block-scoping. A block is any code enclosed in curly braces <code>{}</code>, like in an <code>if</code> statement or a <code>for</code> loop. It's generally recommended to use <code>let</code> over <code>var</code>.</p>\n<pre><code class=\"language-javascript\">let count = 10;\nif (true) {\n  let count = 20; // This is a different 'count' variable\n  console.log(count); // 20\n}\nconsole.log(count); // 10\n</code></pre>\n<h3><code>const</code></h3>\n<p>Also introduced in ES6, <code>const</code> is used to declare constants. Like <code>let</code>, it is block-scoped. A <code>const</code> variable cannot be reassigned.</p>\n<pre><code class=\"language-javascript\">const PI = 3.14159;\n// PI = 3.14; // This would throw an error.\n\n// For objects and arrays, the reference is constant, but the contents can be changed.\nconst person = { name: \"Bob\" };\nperson.name = \"Charlie\"; // This is allowed.\n// person = { name: \"David\" }; // This would throw an error.\n</code></pre>\n<h3>Naming Variables</h3>\n<ul>\n<li>Variable names can contain letters, digits, underscores, and dollar signs.</li>\n<li>Names must begin with a letter, <code>$</code>, or <code>_</code>.</li>\n<li>Names are case-sensitive (<code>y</code> and <code>Y</code> are different variables).</li>\n<li>Reserved words (like JavaScript keywords) cannot be used as names.</li>\n</ul>"
  },
  "_id": "tutorials/javascript/variables.md",
  "_raw": {
    "sourceFilePath": "tutorials/javascript/variables.md",
    "sourceFileName": "variables.md",
    "sourceFileDir": "tutorials/javascript",
    "contentType": "markdown",
    "flattenedPath": "tutorials/javascript/variables"
  },
  "type": "TutorialPost",
  "url": "/tutorial/javascript/javascript-variables",
  "language": "javascript"
}