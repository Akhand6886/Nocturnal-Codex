{
  "title": "JS Functions",
  "slug": "javascript-functions",
  "order": 6,
  "description": "Learn how to define and use functions to create reusable blocks of code in JavaScript.",
  "category": "JS Functions",
  "body": {
    "raw": "\n## JavaScript Functions\n\nA JavaScript function is a block of code designed to perform a particular task. A function is executed when \"something\" invokes it (calls it).\n\n### Function Declarations\nThis is the most common way to define a function.\n\n```javascript\nfunction greet(name) {\n  return \"Hello, \" + name + \"!\";\n}\n\nconsole.log(greet(\"World\")); // Output: Hello, World!\n```\n\n### Function Expressions\nA function can also be defined as an expression, which can be stored in a variable.\n\n```javascript\nconst farewell = function(name) {\n  return \"Goodbye, \" + name + \"!\";\n};\n\nconsole.log(farewell(\"World\")); // Output: Goodbye, World!\n```\n\n### Arrow Functions (ES6)\nArrow functions provide a more concise syntax for writing function expressions.\n\n```javascript\nconst add = (a, b) => {\n  return a + b;\n};\n\n// For single-expression functions, you can omit the braces and return keyword\nconst subtract = (a, b) => a - b;\n\nconsole.log(add(5, 3));       // Output: 8\nconsole.log(subtract(10, 4)); // Output: 6\n```\n\n### Parameters and Arguments\n- **Parameters** are the names listed in the function definition.\n- **Arguments** are the real values passed to the function when it is invoked.\n\n### Return Value\nThe `return` statement stops the execution of a function and returns a value. If `return` is omitted, the function returns `undefined`.",
    "html": "<h2>JavaScript Functions</h2>\n<p>A JavaScript function is a block of code designed to perform a particular task. A function is executed when \"something\" invokes it (calls it).</p>\n<h3>Function Declarations</h3>\n<p>This is the most common way to define a function.</p>\n<pre><code class=\"language-javascript\">function greet(name) {\n  return \"Hello, \" + name + \"!\";\n}\n\nconsole.log(greet(\"World\")); // Output: Hello, World!\n</code></pre>\n<h3>Function Expressions</h3>\n<p>A function can also be defined as an expression, which can be stored in a variable.</p>\n<pre><code class=\"language-javascript\">const farewell = function(name) {\n  return \"Goodbye, \" + name + \"!\";\n};\n\nconsole.log(farewell(\"World\")); // Output: Goodbye, World!\n</code></pre>\n<h3>Arrow Functions (ES6)</h3>\n<p>Arrow functions provide a more concise syntax for writing function expressions.</p>\n<pre><code class=\"language-javascript\">const add = (a, b) => {\n  return a + b;\n};\n\n// For single-expression functions, you can omit the braces and return keyword\nconst subtract = (a, b) => a - b;\n\nconsole.log(add(5, 3));       // Output: 8\nconsole.log(subtract(10, 4)); // Output: 6\n</code></pre>\n<h3>Parameters and Arguments</h3>\n<ul>\n<li><strong>Parameters</strong> are the names listed in the function definition.</li>\n<li><strong>Arguments</strong> are the real values passed to the function when it is invoked.</li>\n</ul>\n<h3>Return Value</h3>\n<p>The <code>return</code> statement stops the execution of a function and returns a value. If <code>return</code> is omitted, the function returns <code>undefined</code>.</p>"
  },
  "_id": "tutorials/javascript/functions.md",
  "_raw": {
    "sourceFilePath": "tutorials/javascript/functions.md",
    "sourceFileName": "functions.md",
    "sourceFileDir": "tutorials/javascript",
    "contentType": "markdown",
    "flattenedPath": "tutorials/javascript/functions"
  },
  "type": "TutorialPost",
  "url": "/tutorial/javascript/javascript-functions",
  "language": "javascript"
}