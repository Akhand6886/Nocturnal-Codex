{
  "title": "JavaScript Events",
  "slug": "javascript-events",
  "order": 10,
  "description": "Understand how to handle user actions and other events on a web page with JavaScript.",
  "category": "JS DOM & Events",
  "body": {
    "raw": "\n## JavaScript Events\n\nEvents are actions or occurrences that happen in the system you are programming — the system will fire a signal of some kind when an event takes place, and you can write code that listens for and reacts to those events.\n\n### Common HTML Events\n\n-   **`onclick`**: The user clicks an HTML element.\n-   **`onmouseover`**: The user moves the mouse over an HTML element.\n-   **`onkeydown`**: The user presses a keyboard key.\n-   **`onload`**: The browser has finished loading the page.\n-   **`onsubmit`**: A form is submitted.\n\n### Event Handlers\n\nYou can add event handlers directly in your HTML, but the modern and recommended approach is to use JavaScript to add \"event listeners\".\n\n#### 1. Inline Event Handlers (Older, not recommended)\n\n```html\n<button onclick=\"alert('You clicked me!')\">Click Me</button>\n```\n\n#### 2. Using `addEventListener()` (Modern, recommended)\n\nThis is the preferred way to handle events. It allows you to add multiple event listeners for the same event to a single element.\n\nFirst, you need to select the element in your JavaScript:\n\n```javascript\nconst myButton = document.getElementById(\"my-button\");\n```\n\nThen, you add the event listener:\n\n```javascript\nmyButton.addEventListener(\"click\", function() {\n  console.log(\"Button was clicked!\");\n  // You can run any code here\n});\n\nmyButton.addEventListener(\"mouseover\", function() {\n  myButton.style.backgroundColor = \"lightgray\";\n});\n\nmyButton.addEventListener(\"mouseout\", function() {\n    myButton.style.backgroundColor = \"\"; // Revert to original style\n});\n```\n\nThis separates your HTML structure from your JavaScript logic, making your code cleaner and easier to maintain. Event handling is the key to creating interactive and dynamic web pages.",
    "html": "<h2>JavaScript Events</h2>\n<p>Events are actions or occurrences that happen in the system you are programming — the system will fire a signal of some kind when an event takes place, and you can write code that listens for and reacts to those events.</p>\n<h3>Common HTML Events</h3>\n<ul>\n<li><strong><code>onclick</code></strong>: The user clicks an HTML element.</li>\n<li><strong><code>onmouseover</code></strong>: The user moves the mouse over an HTML element.</li>\n<li><strong><code>onkeydown</code></strong>: The user presses a keyboard key.</li>\n<li><strong><code>onload</code></strong>: The browser has finished loading the page.</li>\n<li><strong><code>onsubmit</code></strong>: A form is submitted.</li>\n</ul>\n<h3>Event Handlers</h3>\n<p>You can add event handlers directly in your HTML, but the modern and recommended approach is to use JavaScript to add \"event listeners\".</p>\n<h4>1. Inline Event Handlers (Older, not recommended)</h4>\n<pre><code class=\"language-html\">&#x3C;button onclick=\"alert('You clicked me!')\">Click Me&#x3C;/button>\n</code></pre>\n<h4>2. Using <code>addEventListener()</code> (Modern, recommended)</h4>\n<p>This is the preferred way to handle events. It allows you to add multiple event listeners for the same event to a single element.</p>\n<p>First, you need to select the element in your JavaScript:</p>\n<pre><code class=\"language-javascript\">const myButton = document.getElementById(\"my-button\");\n</code></pre>\n<p>Then, you add the event listener:</p>\n<pre><code class=\"language-javascript\">myButton.addEventListener(\"click\", function() {\n  console.log(\"Button was clicked!\");\n  // You can run any code here\n});\n\nmyButton.addEventListener(\"mouseover\", function() {\n  myButton.style.backgroundColor = \"lightgray\";\n});\n\nmyButton.addEventListener(\"mouseout\", function() {\n    myButton.style.backgroundColor = \"\"; // Revert to original style\n});\n</code></pre>\n<p>This separates your HTML structure from your JavaScript logic, making your code cleaner and easier to maintain. Event handling is the key to creating interactive and dynamic web pages.</p>"
  },
  "_id": "tutorials/javascript/events.md",
  "_raw": {
    "sourceFilePath": "tutorials/javascript/events.md",
    "sourceFileName": "events.md",
    "sourceFileDir": "tutorials/javascript",
    "contentType": "markdown",
    "flattenedPath": "tutorials/javascript/events"
  },
  "type": "TutorialPost",
  "url": "/tutorial/javascript/javascript-events",
  "language": "javascript"
}