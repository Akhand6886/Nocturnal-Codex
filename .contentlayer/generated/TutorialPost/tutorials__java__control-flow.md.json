{
  "title": "Java Control Flow",
  "slug": "java-control-flow",
  "order": 5,
  "description": "Learn how to control the flow of execution in Java using conditional statements and loops.",
  "category": "Java Fundamentals",
  "body": {
    "raw": "\n## Control Flow in Java\n\nControl flow statements are what allow a program to make decisions and repeat actions.\n\n### Conditional Statements (`if`, `else if`, `else`)\n\nThese statements allow your program to execute certain blocks of code based on a boolean condition.\n\n```java\nint score = 85;\n\nif (score >= 90) {\n    System.out.println(\"Grade: A\");\n} else if (score >= 80) {\n    System.out.println(\"Grade: B\"); // This will be printed\n} else if (score >= 70) {\n    System.out.println(\"Grade: C\");\n} else {\n    System.out.println(\"Grade: F\");\n}\n```\n\n### The `switch` Statement\n\nA `switch` statement can be a cleaner alternative to a long chain of `if-else if` statements when you are checking a single variable against multiple values.\n\n```java\nint day = 4;\nString dayString;\nswitch (day) {\n    case 1:  dayString = \"Monday\";\n             break;\n    case 2:  dayString = \"Tuesday\";\n             break;\n    case 3:  dayString = \"Wednesday\";\n             break;\n    case 4:  dayString = \"Thursday\";\n             break;\n    // ... other cases\n    default: dayString = \"Invalid day\";\n             break;\n}\nSystem.out.println(dayString); // Output: Thursday\n```\n\n### Loops\n\nLoops are used to execute a block of code repeatedly.\n\n#### The `for` Loop\n\nA `for` loop is ideal when you know how many times you want to iterate.\n\n```java\n// Prints numbers from 0 to 4\nfor (int i = 0; i < 5; i++) {\n    System.out.println(\"Iteration: \" + i);\n}\n```\n\n#### The `while` Loop\n\nA `while` loop continues as long as a condition is true.\n\n```java\nint count = 0;\nwhile (count < 3) {\n    System.out.println(\"Count is \" + count);\n    count++;\n}\n```\n\n#### The `do-while` Loop\n\nA `do-while` loop is similar to a `while` loop, but it guarantees that the block of code is executed at least once.\n\n```java\nint i = 5;\ndo {\n    System.out.println(\"This will print once, even though i is not less than 5.\");\n    i++;\n} while (i < 5);\n```\n",
    "html": "<h2>Control Flow in Java</h2>\n<p>Control flow statements are what allow a program to make decisions and repeat actions.</p>\n<h3>Conditional Statements (<code>if</code>, <code>else if</code>, <code>else</code>)</h3>\n<p>These statements allow your program to execute certain blocks of code based on a boolean condition.</p>\n<pre><code class=\"language-java\">int score = 85;\n\nif (score >= 90) {\n    System.out.println(\"Grade: A\");\n} else if (score >= 80) {\n    System.out.println(\"Grade: B\"); // This will be printed\n} else if (score >= 70) {\n    System.out.println(\"Grade: C\");\n} else {\n    System.out.println(\"Grade: F\");\n}\n</code></pre>\n<h3>The <code>switch</code> Statement</h3>\n<p>A <code>switch</code> statement can be a cleaner alternative to a long chain of <code>if-else if</code> statements when you are checking a single variable against multiple values.</p>\n<pre><code class=\"language-java\">int day = 4;\nString dayString;\nswitch (day) {\n    case 1:  dayString = \"Monday\";\n             break;\n    case 2:  dayString = \"Tuesday\";\n             break;\n    case 3:  dayString = \"Wednesday\";\n             break;\n    case 4:  dayString = \"Thursday\";\n             break;\n    // ... other cases\n    default: dayString = \"Invalid day\";\n             break;\n}\nSystem.out.println(dayString); // Output: Thursday\n</code></pre>\n<h3>Loops</h3>\n<p>Loops are used to execute a block of code repeatedly.</p>\n<h4>The <code>for</code> Loop</h4>\n<p>A <code>for</code> loop is ideal when you know how many times you want to iterate.</p>\n<pre><code class=\"language-java\">// Prints numbers from 0 to 4\nfor (int i = 0; i &#x3C; 5; i++) {\n    System.out.println(\"Iteration: \" + i);\n}\n</code></pre>\n<h4>The <code>while</code> Loop</h4>\n<p>A <code>while</code> loop continues as long as a condition is true.</p>\n<pre><code class=\"language-java\">int count = 0;\nwhile (count &#x3C; 3) {\n    System.out.println(\"Count is \" + count);\n    count++;\n}\n</code></pre>\n<h4>The <code>do-while</code> Loop</h4>\n<p>A <code>do-while</code> loop is similar to a <code>while</code> loop, but it guarantees that the block of code is executed at least once.</p>\n<pre><code class=\"language-java\">int i = 5;\ndo {\n    System.out.println(\"This will print once, even though i is not less than 5.\");\n    i++;\n} while (i &#x3C; 5);\n</code></pre>"
  },
  "_id": "tutorials/java/control-flow.md",
  "_raw": {
    "sourceFilePath": "tutorials/java/control-flow.md",
    "sourceFileName": "control-flow.md",
    "sourceFileDir": "tutorials/java",
    "contentType": "markdown",
    "flattenedPath": "tutorials/java/control-flow"
  },
  "type": "TutorialPost",
  "url": "/tutorial/java/java-control-flow",
  "language": "java"
}