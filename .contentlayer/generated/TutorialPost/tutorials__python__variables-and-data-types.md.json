{
  "title": "Python Variables and Data Types",
  "slug": "python-variables-data-types",
  "order": 2,
  "description": "Master Python variables and data types including numbers, strings, booleans, and collections with comprehensive examples.",
  "category": "Fundamentals",
  "body": {
    "raw": "\n## Python Variables and Data Types\n\nVariables and data types are fundamental concepts in Python programming. A variable is a container that stores data values, while data types define what kind of data can be stored and manipulated in a program. Python's dynamic typing system makes working with variables intuitive and flexible.\n\n## Understanding Variables\n\nA variable in Python is like a label attached to a value. You can think of it as a named storage location in computer memory that holds data.\n\n### **Creating Variables**\n\n```python\n# Simple variable assignment\nname = \"Alice\"\nage = 25\nheight = 5.6\nis_student = True\n\nprint(name)\nprint(age)\nprint(height)\nprint(is_student)\n```\n\n### **Multiple Assignment**\n\n```python\n# Assign same value to multiple variables\nx = y = z = 10\n\n# Assign different values to multiple variables\na, b, c = 1, 2, 3\nname, age, city = \"John\", 30, \"New York\"\n\nprint(f\"x={x}, y={y}, z={z}\")\nprint(f\"a={a}, b={b}, c={c}\")\n```\n\n### **Variable Naming Rules**\n- Must start with a letter (a-z, A-Z) or underscore (_)\n- Can contain letters, numbers, and underscores\n- Case-sensitive (age and Age are different)\n- Cannot use Python keywords\n\n```python\n# Valid variable names\nfirst_name = \"John\"\nuser_age = 25\n_private_var = \"secret\"\nvar2 = \"valid\"\n\n# Invalid variable names (will cause errors)\n# 2name = \"Invalid\"      # Starts with number\n# first-name = \"Invalid\" # Contains hyphen\n# class = \"Invalid\"      # Uses Python keyword\n```\n\n## Python Data Types Overview\n\nPython has several built-in data types organized into categories:\n\n### **1. Numeric Types**\n- `int`: Integer numbers\n- `float`: Floating-point numbers  \n- `complex`: Complex numbers\n\n### **2. Text Type**\n- `str`: String (text data)\n\n### **3. Boolean Type**\n- `bool`: True/False values\n\n### **4. Sequence Types**\n- `list`: Ordered, mutable collection\n- `tuple`: Ordered, immutable collection\n- `range`: Sequence of numbers\n\n### **5. Mapping Type**\n- `dict`: Key-value pairs\n\n### **6. Set Types**\n- `set`: Unordered collection of unique items\n- `frozenset`: Immutable set\n\n## Numeric Data Types\n\n### **Integers (int)**\nWhole numbers without decimal points:\n```python\npositive_int = 42\nnegative_int = -17\nzero = 0\nlarge_number = 123456789012345\n\nprint(type(positive_int))\n\n# Integer operations\nresult = 10 + 5\nresult = 20 - 8\nresult = 6 * 7\nresult = 15 // 4 # floor division\nresult = 2 ** 3 # exponentiation\n```\n\n### **Floating Point Numbers (float)**\nNumbers with decimal points:\n```python\npi = 3.14159\ntemperature = -2.5\nscientific = 1.5e-4 # Scientific notation (0.00015)\ninfinity = float('inf')\n\nprint(type(pi))\n\n# Float operations\nresult = 10.5 + 2.3\nresult = 15.0 / 4\nresult = round(3.14159, 2)\n```\n\n### **Complex Numbers (complex)**\nNumbers with real and imaginary parts:\n```python\ncomplex_num1 = 3 + 4j\ncomplex_num2 = complex(2, 5) # 2 + 5j\n\nprint(complex_num1.real)\nprint(complex_num1.imag)\n\n# Complex operations\nresult = (3 + 4j) + (1 + 2j)\n```\n\n## String Data Type\n\nStrings represent text data and are enclosed in quotes:\n```python\n# Different ways to create strings\nsingle_quote = 'Hello'\ndouble_quote = \"World\"\ntriple_quote = \"\"\"This is a\nmultiline string\"\"\"\n\n# String concatenation\nfull_name = \"John\" + \" \" + \"Doe\"\ngreeting = \"Hello, \" + full_name\n\n# String repetition\nrepeated = \"Python \" * 3\n\n# String indexing and slicing\ntext = \"Python\"\nprint(text[0])\nprint(text[-1])\nprint(text[0:3])\n```\n\n### **String Methods**\n```python\nmessage = \" Hello, Python! \"\n\nprint(message.upper())\nprint(message.lower())\nprint(message.strip())\nprint(message.replace(\"Python\", \"World\"))\nprint(len(message))\n```\n\n## Boolean Data Type\n\nBoolean values represent True or False:\n```python\nis_python_fun = True\nis_difficult = False\n\n# Boolean from comparisons\nage = 25\nis_adult = age >= 18\nis_teenager = 13 <= age <= 19\n\n# Boolean operations\nresult = True and False\nresult = True or False\nresult = not True\n```\n\n## Collection Data Types\n\n### **Lists**\nOrdered, mutable collections:\n```python\n# Creating lists\nfruits = [\"apple\", \"banana\", \"orange\"]\nnumbers = [1, 2, 3]\nmixed = [\"text\", 42, True, 3.14]\n\n# Accessing elements\nprint(fruits[0])\nprint(fruits[-1])\n\n# Modifying lists\nfruits.append(\"grape\")\nfruits[0] = \"blueberry\"\ndel fruits[1]\n\nprint(fruits)\n```\n\n### **Tuples**\nOrdered, immutable collections:\n```python\n# Creating tuples\ncoordinates = (10, 20)\ncolors = (\"red\", \"green\", \"blue\")\nsingle_item = (42,) # Note the comma for single item\n\n# Accessing elements\nprint(coordinates[0])\n\n# Tuples are immutable\n# coordinates[0] = 15 # This would cause an error\n```\n\n### **Dictionaries**\nKey-value pairs:\n```python\n# Creating dictionaries\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person[\"name\"])\nprint(person.get(\"age\"))\n\n# Modifying dictionaries\nperson[\"email\"] = \"alice@email.com\"\nperson[\"age\"] = 26\n\nprint(person.keys())\nprint(person.values())\n```\n\n### **Sets**\nUnordered collections of unique elements:\n```python\n# Creating sets\nunique_numbers = {1, 2, 3, 4, 5, 5} # The duplicate 5 is ignored\nfruits_set = {\"apple\", \"banana\", \"orange\"}\n\n# Set operations\nnumbers1 = {1, 2, 3, 4}\nnumbers2 = {3, 4, 5, 6}\n\nunion = numbers1 | numbers2\nintersection = numbers1 & numbers2\ndifference = numbers1 - numbers2\n```\n\n## Type Checking and Conversion\n\n### **Checking Types**\n```python\nvalue = 42\nprint(type(value))\nprint(isinstance(value, int))\nprint(isinstance(value, str))\n```\n\n### **Type Conversion**\n```python\n# Converting between types\nnumber_str = \"123\"\nnumber_int = int(number_str)\nnumber_float = float(number_str)\n\n# Converting numbers to strings\nage = 25\nage_str = str(age)\n\n# Converting to boolean\nprint(bool(1))\nprint(bool(0))\nprint(bool(\"\"))\nprint(bool(\"text\"))\n```\n\n## Dynamic Typing in Action\n\nPython determines variable types automatically:\n```python\n# Variable can hold different types\nvar = 42\nprint(type(var))\n\nvar = \"Hello\"\nprint(type(var))\n\nvar = [1, 2, 3]\nprint(type(var))\n```\n\n## Best Practices\n\n1. **Use descriptive variable names**\n```python\n# Good\nuser_age = 25\ntotal_price = 99.99\n\n# Avoid\nx = 25\np = 99.99\n```\n\n2. **Follow naming conventions**\n```python\n# Variables and functions: snake_case\nfirst_name = \"John\"\ndef calculate_total(x, y): return x + y\n\n# Constants: UPPER_CASE\nMAX_USERS = 100\nPI = 3.14159\n```\n\n3. **Choose appropriate data types**\n```python\n# Use tuple for coordinates (immutable)\npoint = (10, 20)\n\n# Use list for shopping cart (mutable)\ncart_items = [\"apple\", \"banana\", \"milk\"]\n\n# Use dictionary for structured data\nuser_profile = {\"name\": \"Alice\", \"age\": 25}\n```\n\nUnderstanding variables and data types is crucial for Python programming. These concepts form the foundation for more complex operations and data structures you'll learn in upcoming tutorials.\n",
    "html": "<h2>Python Variables and Data Types</h2>\n<p>Variables and data types are fundamental concepts in Python programming. A variable is a container that stores data values, while data types define what kind of data can be stored and manipulated in a program. Python's dynamic typing system makes working with variables intuitive and flexible.</p>\n<h2>Understanding Variables</h2>\n<p>A variable in Python is like a label attached to a value. You can think of it as a named storage location in computer memory that holds data.</p>\n<h3><strong>Creating Variables</strong></h3>\n<pre><code class=\"language-python\"># Simple variable assignment\nname = \"Alice\"\nage = 25\nheight = 5.6\nis_student = True\n\nprint(name)\nprint(age)\nprint(height)\nprint(is_student)\n</code></pre>\n<h3><strong>Multiple Assignment</strong></h3>\n<pre><code class=\"language-python\"># Assign same value to multiple variables\nx = y = z = 10\n\n# Assign different values to multiple variables\na, b, c = 1, 2, 3\nname, age, city = \"John\", 30, \"New York\"\n\nprint(f\"x={x}, y={y}, z={z}\")\nprint(f\"a={a}, b={b}, c={c}\")\n</code></pre>\n<h3><strong>Variable Naming Rules</strong></h3>\n<ul>\n<li>Must start with a letter (a-z, A-Z) or underscore (_)</li>\n<li>Can contain letters, numbers, and underscores</li>\n<li>Case-sensitive (age and Age are different)</li>\n<li>Cannot use Python keywords</li>\n</ul>\n<pre><code class=\"language-python\"># Valid variable names\nfirst_name = \"John\"\nuser_age = 25\n_private_var = \"secret\"\nvar2 = \"valid\"\n\n# Invalid variable names (will cause errors)\n# 2name = \"Invalid\"      # Starts with number\n# first-name = \"Invalid\" # Contains hyphen\n# class = \"Invalid\"      # Uses Python keyword\n</code></pre>\n<h2>Python Data Types Overview</h2>\n<p>Python has several built-in data types organized into categories:</p>\n<h3><strong>1. Numeric Types</strong></h3>\n<ul>\n<li><code>int</code>: Integer numbers</li>\n<li><code>float</code>: Floating-point numbers</li>\n<li><code>complex</code>: Complex numbers</li>\n</ul>\n<h3><strong>2. Text Type</strong></h3>\n<ul>\n<li><code>str</code>: String (text data)</li>\n</ul>\n<h3><strong>3. Boolean Type</strong></h3>\n<ul>\n<li><code>bool</code>: True/False values</li>\n</ul>\n<h3><strong>4. Sequence Types</strong></h3>\n<ul>\n<li><code>list</code>: Ordered, mutable collection</li>\n<li><code>tuple</code>: Ordered, immutable collection</li>\n<li><code>range</code>: Sequence of numbers</li>\n</ul>\n<h3><strong>5. Mapping Type</strong></h3>\n<ul>\n<li><code>dict</code>: Key-value pairs</li>\n</ul>\n<h3><strong>6. Set Types</strong></h3>\n<ul>\n<li><code>set</code>: Unordered collection of unique items</li>\n<li><code>frozenset</code>: Immutable set</li>\n</ul>\n<h2>Numeric Data Types</h2>\n<h3><strong>Integers (int)</strong></h3>\n<p>Whole numbers without decimal points:</p>\n<pre><code class=\"language-python\">positive_int = 42\nnegative_int = -17\nzero = 0\nlarge_number = 123456789012345\n\nprint(type(positive_int))\n\n# Integer operations\nresult = 10 + 5\nresult = 20 - 8\nresult = 6 * 7\nresult = 15 // 4 # floor division\nresult = 2 ** 3 # exponentiation\n</code></pre>\n<h3><strong>Floating Point Numbers (float)</strong></h3>\n<p>Numbers with decimal points:</p>\n<pre><code class=\"language-python\">pi = 3.14159\ntemperature = -2.5\nscientific = 1.5e-4 # Scientific notation (0.00015)\ninfinity = float('inf')\n\nprint(type(pi))\n\n# Float operations\nresult = 10.5 + 2.3\nresult = 15.0 / 4\nresult = round(3.14159, 2)\n</code></pre>\n<h3><strong>Complex Numbers (complex)</strong></h3>\n<p>Numbers with real and imaginary parts:</p>\n<pre><code class=\"language-python\">complex_num1 = 3 + 4j\ncomplex_num2 = complex(2, 5) # 2 + 5j\n\nprint(complex_num1.real)\nprint(complex_num1.imag)\n\n# Complex operations\nresult = (3 + 4j) + (1 + 2j)\n</code></pre>\n<h2>String Data Type</h2>\n<p>Strings represent text data and are enclosed in quotes:</p>\n<pre><code class=\"language-python\"># Different ways to create strings\nsingle_quote = 'Hello'\ndouble_quote = \"World\"\ntriple_quote = \"\"\"This is a\nmultiline string\"\"\"\n\n# String concatenation\nfull_name = \"John\" + \" \" + \"Doe\"\ngreeting = \"Hello, \" + full_name\n\n# String repetition\nrepeated = \"Python \" * 3\n\n# String indexing and slicing\ntext = \"Python\"\nprint(text[0])\nprint(text[-1])\nprint(text[0:3])\n</code></pre>\n<h3><strong>String Methods</strong></h3>\n<pre><code class=\"language-python\">message = \" Hello, Python! \"\n\nprint(message.upper())\nprint(message.lower())\nprint(message.strip())\nprint(message.replace(\"Python\", \"World\"))\nprint(len(message))\n</code></pre>\n<h2>Boolean Data Type</h2>\n<p>Boolean values represent True or False:</p>\n<pre><code class=\"language-python\">is_python_fun = True\nis_difficult = False\n\n# Boolean from comparisons\nage = 25\nis_adult = age >= 18\nis_teenager = 13 &#x3C;= age &#x3C;= 19\n\n# Boolean operations\nresult = True and False\nresult = True or False\nresult = not True\n</code></pre>\n<h2>Collection Data Types</h2>\n<h3><strong>Lists</strong></h3>\n<p>Ordered, mutable collections:</p>\n<pre><code class=\"language-python\"># Creating lists\nfruits = [\"apple\", \"banana\", \"orange\"]\nnumbers = [1, 2, 3]\nmixed = [\"text\", 42, True, 3.14]\n\n# Accessing elements\nprint(fruits[0])\nprint(fruits[-1])\n\n# Modifying lists\nfruits.append(\"grape\")\nfruits[0] = \"blueberry\"\ndel fruits[1]\n\nprint(fruits)\n</code></pre>\n<h3><strong>Tuples</strong></h3>\n<p>Ordered, immutable collections:</p>\n<pre><code class=\"language-python\"># Creating tuples\ncoordinates = (10, 20)\ncolors = (\"red\", \"green\", \"blue\")\nsingle_item = (42,) # Note the comma for single item\n\n# Accessing elements\nprint(coordinates[0])\n\n# Tuples are immutable\n# coordinates[0] = 15 # This would cause an error\n</code></pre>\n<h3><strong>Dictionaries</strong></h3>\n<p>Key-value pairs:</p>\n<pre><code class=\"language-python\"># Creating dictionaries\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n\n# Accessing values\nprint(person[\"name\"])\nprint(person.get(\"age\"))\n\n# Modifying dictionaries\nperson[\"email\"] = \"alice@email.com\"\nperson[\"age\"] = 26\n\nprint(person.keys())\nprint(person.values())\n</code></pre>\n<h3><strong>Sets</strong></h3>\n<p>Unordered collections of unique elements:</p>\n<pre><code class=\"language-python\"># Creating sets\nunique_numbers = {1, 2, 3, 4, 5, 5} # The duplicate 5 is ignored\nfruits_set = {\"apple\", \"banana\", \"orange\"}\n\n# Set operations\nnumbers1 = {1, 2, 3, 4}\nnumbers2 = {3, 4, 5, 6}\n\nunion = numbers1 | numbers2\nintersection = numbers1 &#x26; numbers2\ndifference = numbers1 - numbers2\n</code></pre>\n<h2>Type Checking and Conversion</h2>\n<h3><strong>Checking Types</strong></h3>\n<pre><code class=\"language-python\">value = 42\nprint(type(value))\nprint(isinstance(value, int))\nprint(isinstance(value, str))\n</code></pre>\n<h3><strong>Type Conversion</strong></h3>\n<pre><code class=\"language-python\"># Converting between types\nnumber_str = \"123\"\nnumber_int = int(number_str)\nnumber_float = float(number_str)\n\n# Converting numbers to strings\nage = 25\nage_str = str(age)\n\n# Converting to boolean\nprint(bool(1))\nprint(bool(0))\nprint(bool(\"\"))\nprint(bool(\"text\"))\n</code></pre>\n<h2>Dynamic Typing in Action</h2>\n<p>Python determines variable types automatically:</p>\n<pre><code class=\"language-python\"># Variable can hold different types\nvar = 42\nprint(type(var))\n\nvar = \"Hello\"\nprint(type(var))\n\nvar = [1, 2, 3]\nprint(type(var))\n</code></pre>\n<h2>Best Practices</h2>\n<ol>\n<li><strong>Use descriptive variable names</strong></li>\n</ol>\n<pre><code class=\"language-python\"># Good\nuser_age = 25\ntotal_price = 99.99\n\n# Avoid\nx = 25\np = 99.99\n</code></pre>\n<ol start=\"2\">\n<li><strong>Follow naming conventions</strong></li>\n</ol>\n<pre><code class=\"language-python\"># Variables and functions: snake_case\nfirst_name = \"John\"\ndef calculate_total(x, y): return x + y\n\n# Constants: UPPER_CASE\nMAX_USERS = 100\nPI = 3.14159\n</code></pre>\n<ol start=\"3\">\n<li><strong>Choose appropriate data types</strong></li>\n</ol>\n<pre><code class=\"language-python\"># Use tuple for coordinates (immutable)\npoint = (10, 20)\n\n# Use list for shopping cart (mutable)\ncart_items = [\"apple\", \"banana\", \"milk\"]\n\n# Use dictionary for structured data\nuser_profile = {\"name\": \"Alice\", \"age\": 25}\n</code></pre>\n<p>Understanding variables and data types is crucial for Python programming. These concepts form the foundation for more complex operations and data structures you'll learn in upcoming tutorials.</p>"
  },
  "_id": "tutorials/python/variables-and-data-types.md",
  "_raw": {
    "sourceFilePath": "tutorials/python/variables-and-data-types.md",
    "sourceFileName": "variables-and-data-types.md",
    "sourceFileDir": "tutorials/python",
    "contentType": "markdown",
    "flattenedPath": "tutorials/python/variables-and-data-types"
  },
  "type": "TutorialPost",
  "url": "/tutorial/python/python-variables-data-types",
  "language": "python"
}