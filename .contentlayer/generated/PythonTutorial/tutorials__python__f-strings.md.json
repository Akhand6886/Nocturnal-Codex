{
  "title": "Mastering F-Strings in Python",
  "slug": "python-f-strings",
  "order": 3,
  "description": "Learn how to use f-strings for powerful and readable string formatting in Python.",
  "category": "Fundamentals",
  "body": {
    "raw": "\n## What are F-Strings?\n\nIntroduced in Python 3.6, f-strings (formatted string literals) provide a concise and convenient way to embed expressions inside string literals for formatting. They are prefixed with an 'f' or 'F' and allow you to embed Python expressions directly inside `{}` braces.\n\n## Basic Usage\n\nThe syntax is simple. Just place an `f` before the opening quote of your string, and then you can place any valid Python expression inside curly braces `{}`.\n\n```python\nname = \"Alice\"\nage = 30\ngreeting = f\"Hello, my name is {name} and I am {age} years old.\"\nprint(greeting)\n# Output: Hello, my name is Alice and I am 30 years old.\n```\n\n## Expressions Inside F-Strings\n\nYou can put any valid Python expression inside the braces, including function calls, arithmetic operations, and more.\n\n```python\n# Arithmetic operation\nprint(f\"Five plus ten is {5 + 10}.\")\n# Output: Five plus ten is 15.\n\n# Function call\ndef get_name():\n    return \"Bob\"\n\nprint(f\"His name is {get_name()}.\")\n# Output: His name is Bob.\n\n# Accessing dictionary values\nperson = {\"name\": \"Charlie\", \"age\": 25}\nprint(f\"{person['name']} is {person['age']} years old.\")\n# Output: Charlie is 25 years old.\n```\n\n## Formatting Specifiers\n\nF-strings also support format specifiers, which follow a colon `:` inside the braces. This allows for fine-grained control over the output.\n\n### Formatting Numbers\nYou can control decimal precision, padding, and alignment.\n\n```python\npi = 3.14159265\n\n# Format to 2 decimal places\nprint(f\"The value of pi is approximately {pi:.2f}.\")\n# Output: The value of pi is approximately 3.14.\n\n# Add padding\nnumber = 42\nprint(f\"The number is {number:05}.\") # Pad with leading zeros to a width of 5\n# Output: The number is 00042.\n```\n\n### Formatting Dates\n\nYou can format `datetime` objects easily.\n\n```python\nimport datetime\ntoday = datetime.datetime.now()\n\nprint(f\"Today is {today:%Y-%m-%d}.\")\n# Output: Today is 2024-07-10. (Will vary based on current date)\n```\n\nF-strings are the modern, preferred way to format strings in Python due to their readability and performance.\n",
    "html": "<h2>What are F-Strings?</h2>\n<p>Introduced in Python 3.6, f-strings (formatted string literals) provide a concise and convenient way to embed expressions inside string literals for formatting. They are prefixed with an 'f' or 'F' and allow you to embed Python expressions directly inside <code>{}</code> braces.</p>\n<h2>Basic Usage</h2>\n<p>The syntax is simple. Just place an <code>f</code> before the opening quote of your string, and then you can place any valid Python expression inside curly braces <code>{}</code>.</p>\n<pre><code class=\"language-python\">name = \"Alice\"\nage = 30\ngreeting = f\"Hello, my name is {name} and I am {age} years old.\"\nprint(greeting)\n# Output: Hello, my name is Alice and I am 30 years old.\n</code></pre>\n<h2>Expressions Inside F-Strings</h2>\n<p>You can put any valid Python expression inside the braces, including function calls, arithmetic operations, and more.</p>\n<pre><code class=\"language-python\"># Arithmetic operation\nprint(f\"Five plus ten is {5 + 10}.\")\n# Output: Five plus ten is 15.\n\n# Function call\ndef get_name():\n    return \"Bob\"\n\nprint(f\"His name is {get_name()}.\")\n# Output: His name is Bob.\n\n# Accessing dictionary values\nperson = {\"name\": \"Charlie\", \"age\": 25}\nprint(f\"{person['name']} is {person['age']} years old.\")\n# Output: Charlie is 25 years old.\n</code></pre>\n<h2>Formatting Specifiers</h2>\n<p>F-strings also support format specifiers, which follow a colon <code>:</code> inside the braces. This allows for fine-grained control over the output.</p>\n<h3>Formatting Numbers</h3>\n<p>You can control decimal precision, padding, and alignment.</p>\n<pre><code class=\"language-python\">pi = 3.14159265\n\n# Format to 2 decimal places\nprint(f\"The value of pi is approximately {pi:.2f}.\")\n# Output: The value of pi is approximately 3.14.\n\n# Add padding\nnumber = 42\nprint(f\"The number is {number:05}.\") # Pad with leading zeros to a width of 5\n# Output: The number is 00042.\n</code></pre>\n<h3>Formatting Dates</h3>\n<p>You can format <code>datetime</code> objects easily.</p>\n<pre><code class=\"language-python\">import datetime\ntoday = datetime.datetime.now()\n\nprint(f\"Today is {today:%Y-%m-%d}.\")\n# Output: Today is 2024-07-10. (Will vary based on current date)\n</code></pre>\n<p>F-strings are the modern, preferred way to format strings in Python due to their readability and performance.</p>"
  },
  "_id": "tutorials/python/f-strings.md",
  "_raw": {
    "sourceFilePath": "tutorials/python/f-strings.md",
    "sourceFileName": "f-strings.md",
    "sourceFileDir": "tutorials/python",
    "contentType": "markdown",
    "flattenedPath": "tutorials/python/f-strings"
  },
  "type": "PythonTutorial",
  "url": "/tutorial/python/python-f-strings",
  "language": "python"
}